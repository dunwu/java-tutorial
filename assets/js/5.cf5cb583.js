(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{368:function(t,s,a){"use strict";a.r(s);var e=a(14),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"javaweb-之-servlet-指南"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javaweb-之-servlet-指南"}},[t._v("#")]),t._v(" JavaWeb 之 Servlet 指南")]),t._v(" "),s("h2",{attrs:{id:"javaweb-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javaweb-简介"}},[t._v("#")]),t._v(" JavaWeb 简介")]),t._v(" "),s("h3",{attrs:{id:"web-应用程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web-应用程序"}},[t._v("#")]),t._v(" Web 应用程序")]),t._v(" "),s("p",[t._v("Web，在英语中 web 即表示网页的意思，它用于表示 Internet 主机上供外界访问的资源。")]),t._v(" "),s("p",[t._v("Web 应用程序是一种可以通过 Web 访问的应用程序，程序的最大好处是用户很容易访问应用程序，用户只需要有浏览器即可，不需要再安装其他软件。")]),t._v(" "),s("p",[t._v("Internet 上供外界访问的 Web 资源分为：")]),t._v(" "),s("ul",[s("li",[t._v("静态 web 资源：指 web 页面中供人们浏览的数据始终是不变。常见静态资源文件：html、css、各种图片类型（jpg、png）")]),t._v(" "),s("li",[t._v("动态 web 资源：指 web 页面中供人们浏览的数据是由程序产生的，不同时间点访问 web 页面看到的内容各不相同。常见动态资源技术：JSP/Servlet、ASP、PHP")])]),t._v(" "),s("h3",{attrs:{id:"常见-web-服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见-web-服务器"}},[t._v("#")]),t._v(" 常见 Web 服务器")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://tomcat.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tomcat"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://www.eclipse.org/jetty/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jetty"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://caucho.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Resin"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://httpd.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Apache"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://nginx.org/en/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.ibm.com/cloud/websphere-application-platform",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebSphere"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.oracle.com/middleware/technologies/weblogic.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebLogic"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("JBoss")])]),t._v(" "),s("h2",{attrs:{id:"servlet-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#servlet-简介"}},[t._v("#")]),t._v(" Servlet 简介")]),t._v(" "),s("h3",{attrs:{id:"什么是-servlet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-servlet"}},[t._v("#")]),t._v(" 什么是 Servlet")]),t._v(" "),s("p",[t._v("Servlet（Server Applet），即小服务程序或服务连接器。Servlet 是 Java 编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态 Web 内容。")]),t._v(" "),s("ul",[s("li",[t._v("狭义的 Servlet 是指 Java 实现的一个接口。")]),t._v(" "),s("li",[t._v("广义的 Servlet 是指任何实现了这个 Servlet 接口的类。")])]),t._v(" "),s("p",[t._v("Servlet 运行于支持 Java 的应用服务器中。从原理上讲，Servlet 可以响应任何类型的请求，但绝大多数情况下 Servlet 只用来扩展基于 HTTP 协议的 Web 服务器。")]),t._v(" "),s("h3",{attrs:{id:"servlet-和-cgi-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#servlet-和-cgi-的区别"}},[t._v("#")]),t._v(" Servlet 和 CGI 的区别")]),t._v(" "),s("p",[t._v("Servlet 技术出现之前，Web 主要使用 CGI 技术。它们的区别如下：")]),t._v(" "),s("ul",[s("li",[t._v("Servlet 是基于 Java 编写的，处于服务器进程中，他能够通过多线程方式运行 service() 方法，一个实例可以服务于多个请求，而且一般不会销毁；")]),t._v(" "),s("li",[t._v("CGI(Common Gateway Interface)，即通用网关接口。它会为每个请求产生新的进程，服务完成后销毁，所以效率上低于 Servlet。")])]),t._v(" "),s("h3",{attrs:{id:"servlet-版本以及主要特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#servlet-版本以及主要特性"}},[t._v("#")]),t._v(" Servlet 版本以及主要特性")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("版本")]),t._v(" "),s("th",[t._v("日期")]),t._v(" "),s("th",[t._v("JAVA EE/JDK 版本")]),t._v(" "),s("th",[t._v("特性")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Servlet 4.0")]),t._v(" "),s("td",[t._v("2017 年 10 月")]),t._v(" "),s("td",[t._v("JavaEE 8")]),t._v(" "),s("td",[t._v("HTTP2")])]),t._v(" "),s("tr",[s("td",[t._v("Servlet 3.1")]),t._v(" "),s("td",[t._v("2013 年 5 月")]),t._v(" "),s("td",[t._v("JavaEE 7")]),t._v(" "),s("td",[t._v("非阻塞 I/O，HTTP 协议升级机制")])]),t._v(" "),s("tr",[s("td",[t._v("Servlet 3.0")]),t._v(" "),s("td",[t._v("2009 年 12 月")]),t._v(" "),s("td",[t._v("JavaEE 6, JavaSE 6")]),t._v(" "),s("td",[t._v("可插拔性，易于开发，异步 Servlet，安全性，文件上传")])]),t._v(" "),s("tr",[s("td",[t._v("Servlet 2.5")]),t._v(" "),s("td",[t._v("2005 年 10 月")]),t._v(" "),s("td",[t._v("JavaEE 5, JavaSE 5")]),t._v(" "),s("td",[t._v("依赖 JavaSE 5，支持注解")])]),t._v(" "),s("tr",[s("td",[t._v("Servlet 2.4")]),t._v(" "),s("td",[t._v("2003 年 11 月")]),t._v(" "),s("td",[t._v("J2EE 1.4, J2SE 1.3")]),t._v(" "),s("td",[t._v("web.xml 使用 XML Schema")])]),t._v(" "),s("tr",[s("td",[t._v("Servlet 2.3")]),t._v(" "),s("td",[t._v("2001 年 8 月")]),t._v(" "),s("td",[t._v("J2EE 1.3, J2SE 1.2")]),t._v(" "),s("td",[t._v("Filter")])]),t._v(" "),s("tr",[s("td",[t._v("Servlet 2.2")]),t._v(" "),s("td",[t._v("1999 年 8 月")]),t._v(" "),s("td",[t._v("J2EE 1.2, J2SE 1.2")]),t._v(" "),s("td",[t._v("成为 J2EE 标准")])]),t._v(" "),s("tr",[s("td",[t._v("Servlet 2.1")]),t._v(" "),s("td",[t._v("1998 年 11 月")]),t._v(" "),s("td",[t._v("未指定")]),t._v(" "),s("td",[t._v("First official specification, added RequestDispatcher, ServletContext")])]),t._v(" "),s("tr",[s("td",[t._v("Servlet 2.0")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("JDK 1.1")]),t._v(" "),s("td",[t._v("Part of Java Servlet Development Kit 2.0")])]),t._v(" "),s("tr",[s("td",[t._v("Servlet 1.0")]),t._v(" "),s("td",[t._v("1997 年 6 月")]),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("h3",{attrs:{id:"servlet-任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#servlet-任务"}},[t._v("#")]),t._v(" Servlet 任务")]),t._v(" "),s("p",[t._v("Servlet 执行以下主要任务：")]),t._v(" "),s("ul",[s("li",[t._v("读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。")]),t._v(" "),s("li",[t._v("读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。")]),t._v(" "),s("li",[t._v("处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。")]),t._v(" "),s("li",[t._v("发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。")]),t._v(" "),s("li",[t._v("发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。")])]),t._v(" "),s("h3",{attrs:{id:"servlet-生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#servlet-生命周期"}},[t._v("#")]),t._v(" Servlet 生命周期")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.runoob.com/wp-content/uploads/2014/07/Servlet-LifeCycle.jpg",alt:"img"}})]),t._v(" "),s("p",[t._v("Servlet 生命周期如下：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("加载")]),t._v(" - 第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。容器通过类加载器使用 Servlet 类对应的文件加载 servlet；")]),t._v(" "),s("li",[s("strong",[t._v("初始化")]),t._v(" - Servlet 通过调用 "),s("strong",[t._v("init ()")]),t._v(" 方法进行初始化。")]),t._v(" "),s("li",[s("strong",[t._v("服务")]),t._v(" - Servlet 调用 "),s("strong",[t._v("service()")]),t._v(" 方法来处理客户端的请求。")]),t._v(" "),s("li",[s("strong",[t._v("销毁")]),t._v(" - Servlet 通过调用 "),s("strong",[t._v("destroy()")]),t._v(" 方法终止（结束）。")]),t._v(" "),s("li",[s("strong",[t._v("卸载")]),t._v(" - Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。")])]),t._v(" "),s("h2",{attrs:{id:"servlet-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#servlet-api"}},[t._v("#")]),t._v(" Servlet API")]),t._v(" "),s("h3",{attrs:{id:"servlet-包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#servlet-包"}},[t._v("#")]),t._v(" Servlet 包")]),t._v(" "),s("p",[t._v("Java Servlet 是运行在带有支持 Java Servlet 规范的解释器的 web 服务器上的 Java 类。")]),t._v(" "),s("p",[t._v("Servlet 可以使用 "),s("strong",[t._v("javax.servlet")]),t._v(" 和 "),s("strong",[t._v("javax.servlet.http")]),t._v(" 包创建，它是 Java 企业版的标准组成部分，Java 企业版是支持大型开发项目的 Java 类库的扩展版本。")]),t._v(" "),s("p",[t._v("Java Servlet 就像任何其他的 Java 类一样已经被创建和编译。在您安装 Servlet 包并把它们添加到您的计算机上的 Classpath 类路径中之后，您就可以通过 JDK 的 Java 编译器或任何其他编译器来编译 Servlet。")]),t._v(" "),s("h3",{attrs:{id:"servlet-接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#servlet-接口"}},[t._v("#")]),t._v(" Servlet 接口")]),t._v(" "),s("p",[t._v("Servlet 接口定义了下面五个方法：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Servlet")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletConfig")]),t._v(" var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletConfig")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getServletConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletRequest")]),t._v(" var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletResponse")]),t._v(" var2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getServletInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("destroy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"init-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#init-方法"}},[t._v("#")]),t._v(" init() 方法")]),t._v(" "),s("p",[t._v("init 方法被设计成只调用一次。它在第一次创建 Servlet 时被调用，在后续每次用户请求时不再调用。因此，它是用于一次性初始化，就像 Applet 的 init 方法一样。")]),t._v(" "),s("p",[t._v("Servlet 创建于用户第一次调用对应于该 Servlet 的 URL 时，但是您也可以指定 Servlet 在服务器第一次启动时被加载。")]),t._v(" "),s("p",[t._v("当用户调用一个 Servlet 时，就会创建一个 Servlet 实例，每一个用户请求都会产生一个新的线程，适当的时候移交给 doGet 或 doPost 方法。init() 方法简单地创建或加载一些数据，这些数据将被用于 Servlet 的整个生命周期。")]),t._v(" "),s("p",[t._v("init 方法的定义如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化代码...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"service-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#service-方法"}},[t._v("#")]),t._v(" service() 方法")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("service()")]),t._v(" 方法是执行实际任务的核心方法")]),t._v("。Servlet 容器（即 Web 服务器）调用 "),s("code",[t._v("service()")]),t._v(" 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端。")]),t._v(" "),s("p",[s("code",[t._v("service()")]),t._v(" 方法有两个参数："),s("code",[t._v("ServletRequest")]),t._v(" 和 "),s("code",[t._v("ServletResponse")]),t._v("。"),s("code",[t._v("ServletRequest")]),t._v(" 用来封装请求信息，"),s("code",[t._v("ServletResponse")]),t._v(" 用来封装响应信息，因此"),s("strong",[t._v("本质上这两个类是对通信协议的封装。")])]),t._v(" "),s("p",[t._v("每次服务器接收到一个 Servlet 请求时，服务器会产生一个新的线程并调用服务。"),s("code",[t._v("service()")]),t._v(" 方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 "),s("code",[t._v("doGet")]),t._v("、"),s("code",[t._v("doPost")]),t._v("、"),s("code",[t._v("doPut")]),t._v("，"),s("code",[t._v("doDelete")]),t._v(" 等方法。")]),t._v(" "),s("p",[t._v("下面是该方法的特征：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletRequest")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletResponse")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("service() 方法由容器调用，service 方法在适当的时候调用 doGet、doPost、doPut、doDelete 等方法。所以，您不用对 service() 方法做任何动作，您只需要根据来自客户端的请求类型来重写 doGet() 或 doPost() 即可。")]),t._v(" "),s("p",[t._v("doGet() 和 doPost() 方法是每次服务请求中最常用的方法。下面是这两种方法的特征。")]),t._v(" "),s("h4",{attrs:{id:"doget-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#doget-方法"}},[t._v("#")]),t._v(" doGet() 方法")]),t._v(" "),s("p",[t._v("GET 请求来自于一个 URL 的正常请求，或者来自于一个未指定 METHOD 的 HTML 表单，它由 doGet() 方法处理。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doGet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Servlet 代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"dopost-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dopost-方法"}},[t._v("#")]),t._v(" doPost() 方法")]),t._v(" "),s("p",[t._v("POST 请求来自于一个特别指定了 METHOD 为 POST 的 HTML 表单，它由 doPost() 方法处理。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doPost")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Servlet 代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"destroy-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#destroy-方法"}},[t._v("#")]),t._v(" destroy() 方法")]),t._v(" "),s("p",[t._v("destroy() 方法只会被调用一次，在 Servlet 生命周期结束时被调用。destroy() 方法可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表或点击计数器写入到磁盘，并执行其他类似的清理活动。")]),t._v(" "),s("p",[t._v("在调用 destroy() 方法之后，servlet 对象被标记为垃圾回收。destroy 方法定义如下所示：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("destroy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 终止化代码...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"servlet-和-http-状态码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#servlet-和-http-状态码"}},[t._v("#")]),t._v(" Servlet 和 HTTP 状态码")]),t._v(" "),s("p",[t._v("title: JavaEE Servlet HTTP 状态码\ndate: 2017-11-08\ncategories:")]),t._v(" "),s("ul",[s("li",[t._v("javaee\ntags:")]),t._v(" "),s("li",[t._v("javaee")]),t._v(" "),s("li",[t._v("servlet")]),t._v(" "),s("li",[t._v("http")])]),t._v(" "),s("h3",{attrs:{id:"http-状态码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-状态码"}},[t._v("#")]),t._v(" HTTP 状态码")]),t._v(" "),s("p",[t._v("HTTP 请求和 HTTP 响应消息的格式是类似的，结构如下：")]),t._v(" "),s("ul",[s("li",[t._v("初始状态行 + 回车换行符（回车+换行）")]),t._v(" "),s("li",[t._v("零个或多个标题行+回车换行符")]),t._v(" "),s("li",[t._v("一个空白行，即回车换行符")]),t._v(" "),s("li",[t._v("一个可选的消息主体，比如文件、查询数据或查询输出")])]),t._v(" "),s("p",[t._v("例如，服务器的响应头如下所示：")]),t._v(" "),s("div",{staticClass:"language-http extra-class"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token response-status"}},[s("span",{pre:!0,attrs:{class:"token http-version property"}},[t._v("HTTP/1.1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token status-code number"}},[t._v("200")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token reason-phrase string"}},[t._v("OK")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Content-Type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("text/html")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Header2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("...")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token text-html"}},[t._v("...\nHeaderN: ...\n  (Blank Line)\n"),s("span",{pre:!0,attrs:{class:"token doctype"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),s("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("doctype")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token name"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("..."),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n...\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])]),s("p",[t._v("状态行包括 HTTP 版本（在本例中为 HTTP/1.1）、一个状态码（在本例中为 200）和一个对应于状态码的短消息（在本例中为 OK）。")]),t._v(" "),s("p",[t._v("以下是可能从 Web 服务器返回的 HTTP 状态码和相关的信息列表：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("1**")]),t._v("：信息性状态码")]),t._v(" "),s("li",[s("code",[t._v("2**")]),t._v("：成功状态码\n"),s("ul",[s("li",[t._v("200：请求正常成功")]),t._v(" "),s("li",[t._v("204：指示请求成功但没有返回新信息")]),t._v(" "),s("li",[t._v("206：指示服务器已完成对资源的部分 GET 请求")])])]),t._v(" "),s("li",[s("code",[t._v("3**")]),t._v("：重定向状态码\n"),s("ul",[s("li",[t._v("301：永久性重定向")]),t._v(" "),s("li",[t._v("302：临时性重定向")]),t._v(" "),s("li",[t._v("304：服务器端允许请求访问资源，但未满足条件")])])]),t._v(" "),s("li",[s("code",[t._v("4**")]),t._v("：客户端错误状态码\n"),s("ul",[s("li",[t._v("400：请求报文中存在语法错误")]),t._v(" "),s("li",[t._v("401：发送的请求需要有通过 HTTP 认证的认证信息")]),t._v(" "),s("li",[t._v("403：对请求资源的访问被服务器拒绝了")]),t._v(" "),s("li",[t._v("404：服务器上无法找到请求的资源")])])]),t._v(" "),s("li",[s("code",[t._v("5**")]),t._v("：服务器错误状态码\n"),s("ul",[s("li",[t._v("500：服务器端在执行请求时发生了错误")]),t._v(" "),s("li",[t._v("503：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求")])])])]),t._v(" "),s("h3",{attrs:{id:"设置-http-状态码的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置-http-状态码的方法"}},[t._v("#")]),t._v(" 设置 HTTP 状态码的方法")]),t._v(" "),s("p",[t._v("下面的方法可用于在 Servlet 程序中设置 HTTP 状态码。这些方法通过 "),s("code",[t._v("HttpServletResponse")]),t._v(" 对象可用。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("序号")]),t._v(" "),s("th",[t._v("方法 & 描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("**public void setStatus ( int statusCode )**该方法设置一个任意的状态码。setStatus 方法接受一个 int（状态码）作为参数。如果您的反应包含了一个特殊的状态码和文档，请确保在使用 "),s("em",[t._v("PrintWriter")]),t._v(" 实际返回任何内容之前调用 setStatus。")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("**public void sendRedirect(String url)**该方法生成一个 302 响应，连同一个带有新文档 URL 的 "),s("em",[t._v("Location")]),t._v(" 头。")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("**public void sendError(int code, String message)**该方法发送一个状态码（通常为 404），连同一个在 HTML 文档内部自动格式化并发送到客户端的短消息。")])])])]),t._v(" "),s("h3",{attrs:{id:"http-状态码实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-状态码实例"}},[t._v("#")]),t._v(" HTTP 状态码实例")]),t._v(" "),s("p",[t._v('下面的例子把 407 错误代码发送到客户端浏览器，浏览器会显示 "Need authentication!!!" 消息。')]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 导入必需的 java 库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("javax"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("servlet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("javax"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("servlet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 扩展 HttpServlet 类")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" showError "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServlet")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理 GET 方法请求的方法")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doGet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置错误代码和原因")]),t._v("\n      response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("407")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Need authentication!!!"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理 POST 方法请求的方法")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doPost")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doGet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("现在，调用上面的 Servlet 将显示以下结果：")]),t._v(" "),s("div",{staticClass:"language-http extra-class"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[t._v("HTTP Status 407 - Need authentication!!!\ntype Status report\nmessage Need authentication!!!\ndescription The client must first authenticate itself with the proxy (Need authentication!!!).\nApache Tomcat/5.5.29\n")])])]),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://time.geekbang.org/column/intro/100027701",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入拆解 Tomcat & Jetty"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://book.douban.com/subject/4189495/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java Web 整合开发王者归来"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);