(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{430:function(e,t,a){"use strict";a.r(t);var n=a(14),r=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"spring-bean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean"}},[e._v("#")]),e._v(" Spring Bean")]),e._v(" "),t("p",[e._v("在 Spring 中，构成应用程序主体由 Spring IoC 容器管理的对象称为 Bean。"),t("strong",[e._v("Bean 是由 Spring IoC 容器实例化、装配和管理的对象")]),e._v("。 Bean 以及它们之间的依赖关系反映在容器使用的配置元数据中。")]),e._v(" "),t("h2",{attrs:{id:"spring-bean-定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-定义"}},[e._v("#")]),e._v(" Spring Bean 定义")]),e._v(" "),t("h3",{attrs:{id:"beandefinition"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition"}},[e._v("#")]),e._v(" BeanDefinition")]),e._v(" "),t("p",[e._v("Spring IoC 容器本身，并不能识别配置的元数据。为此，要将这些配置信息转为 Spring 能识别的格式——"),t("code",[e._v("BeanDefinition")]),e._v(" 对象。")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("BeanDefinition")]),e._v(" 是 Spring 中定义 Bean 的配置元信息接口")]),e._v("，它包含：")]),e._v(" "),t("ul",[t("li",[e._v("Bean 类名")]),e._v(" "),t("li",[e._v("Bean 行为配置元素，如：作用域、自动绑定的模式、生命周期回调等")]),e._v(" "),t("li",[e._v("其他 Bean 引用，也可称为合作者（Collaborators）或依赖（Dependencies）")]),e._v(" "),t("li",[e._v("配置设置，如 Bean 属性（Properties）")])]),e._v(" "),t("h4",{attrs:{id:"beandefinition-元信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition-元信息"}},[e._v("#")]),e._v(" BeanDefinition 元信息")]),e._v(" "),t("p",[t("code",[e._v("BeanDefinition")]),e._v(" 元信息如下：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("属性（Property）")]),e._v(" "),t("th",[e._v("说明")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-class",target:"_blank",rel:"noopener noreferrer"}},[e._v("Class"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("全类名，必须是具体类，不能用抽象类或接口")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-beanname",target:"_blank",rel:"noopener noreferrer"}},[e._v("Name"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("Bean 的名称或者 ID")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes",target:"_blank",rel:"noopener noreferrer"}},[e._v("Scope"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("Bean 的作用域（如："),t("code",[e._v("singleton")]),e._v("、"),t("code",[e._v("prototype")]),e._v(" 等）")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators",target:"_blank",rel:"noopener noreferrer"}},[e._v("Constructor arguments"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("Bean 构造器参数（用于依赖注入）")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators",target:"_blank",rel:"noopener noreferrer"}},[e._v("Properties"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("Bean 属性设置（用于依赖注入）")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-autowire",target:"_blank",rel:"noopener noreferrer"}},[e._v("Autowiring mode"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("Bean 自动绑定模式（如：通过名称 byName）")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-lazy-init",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lazy initialization mode"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("Bean 延迟初始化模式（延迟和非延迟）")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-lifecycle-initializingbean",target:"_blank",rel:"noopener noreferrer"}},[e._v("Initialization method"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("Bean 初始化回调方法名称")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-lifecycle-disposablebean",target:"_blank",rel:"noopener noreferrer"}},[e._v("Destruction method"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("Bean 销毁回调方法名称")])])])]),e._v(" "),t("h4",{attrs:{id:"beandefinition-构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition-构建"}},[e._v("#")]),e._v(" BeanDefinition 构建")]),e._v(" "),t("p",[e._v("BeanDefinition 构建方式：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("通过 "),t("code",[e._v("BeanDefinitionBuilder")])])]),e._v(" "),t("li",[t("p",[e._v("通过 "),t("code",[e._v("AbstractBeanDefinition")]),e._v(" 以及派生类")])])]),e._v(" "),t("blockquote",[t("p",[e._v("💻 Spring Bean 定义示例源码："),t("a",{attrs:{href:"https://github.com/dunwu/spring-tutorial/blob/master/codes/core/spring-core-ioc/src/test/java/io/github/dunwu/spring/core/bean/BeanDefinitionTests.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("BeanDefinitionTests"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"spring-bean-命名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-命名"}},[e._v("#")]),e._v(" Spring Bean 命名")]),e._v(" "),t("h4",{attrs:{id:"spring-bean-命名规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-命名规则"}},[e._v("#")]),e._v(" Spring Bean 命名规则")]),e._v(" "),t("p",[e._v("每个 Bean 拥有一个或多个标识符（identifiers），这些标识符在 Bean 所在的容器必须是唯一的。通常，一个 Bean 仅有一个标识符，如果需要额外的，可考虑使用别名（Alias）来扩充。")]),e._v(" "),t("p",[e._v("在基于 XML 的配置元信息中，开发人员"),t("strong",[e._v("可以使用 "),t("code",[e._v("id")]),e._v(" 属性、"),t("code",[e._v("name")]),e._v(" 属性或来指定 Bean 标识符")]),e._v("。通常，Bean 的标识符由字母组成，允许出现特殊字符。如果要想引入 Bean 的别名的话，可在 "),t("code",[e._v("name")]),e._v(" 属性使用半角逗号（“,”）或分号（“;”) 来间隔。")]),e._v(" "),t("p",[e._v("Spring 中，"),t("strong",[e._v("为 Bean 指定 "),t("code",[e._v("id")]),e._v(" 和 "),t("code",[e._v("name")]),e._v(" 属性不是必须的")]),e._v("。如果不指定，Spring 会自动为 Bean 分配一个唯一的名称。尽管 Bean 的命名没有限制，不过"),t("strong",[e._v("官方建议采用驼峰命名法来命名 Bean")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"spring-bean-命名生成器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-命名生成器"}},[e._v("#")]),e._v(" Spring Bean 命名生成器")]),e._v(" "),t("p",[e._v("Spring 提供了两种 Spring Bean 命名生成器：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DefaultBeanNameGenerator")]),e._v("：默认通用 "),t("code",[e._v("BeanNameGenerator")]),e._v(" 实现。")]),e._v(" "),t("li",[t("code",[e._v("AnnotationBeanNameGenerator")]),e._v("：基于注解扫描的 "),t("code",[e._v("BeanNameGenerator")]),e._v(" 实现。")])]),e._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeanNameGenerator")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n   "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("generateBeanName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeanDefinition")]),e._v(" definition"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BeanDefinitionRegistry")]),e._v(" registry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("h4",{attrs:{id:"spring-bean-别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-别名"}},[e._v("#")]),e._v(" Spring Bean 别名")]),e._v(" "),t("p",[e._v("Spring 支持通过 "),t("code",[e._v("<alias>")]),e._v(" 属性为 Bean 设置别名。")]),e._v(" "),t("p",[e._v("Bean 别名（Alias）的作用：")]),e._v(" "),t("ul",[t("li",[e._v("复用现有的 "),t("code",[e._v("BeanDefinition")])]),e._v(" "),t("li",[e._v("更具有场景化的命名方法，比如：\n"),t("ul",[t("li",[t("code",[e._v('<alias name="myApp-dataSource" alias="subsystemA-dataSource"/>')])]),e._v(" "),t("li",[t("code",[e._v('<alias name="myApp-dataSource" alias="subsystemB-dataSource"/>')])])])])]),e._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("bean")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("id")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("class")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("io.github.dunwu.spring.core.bean.entity.person.User"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("\x3c!-- 属性略 --\x3e")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("bean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("alias")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("alias")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("aliasUser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/>")])]),e._v("\n")])])]),t("h2",{attrs:{id:"spring-bean-生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-生命周期"}},[e._v("#")]),e._v(" Spring Bean 生命周期")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20211201102734.png",alt:""}})]),e._v(" "),t("ol",[t("li",[t("p",[e._v("Spring 对 Bean 进行实例化（相当于 new XXX()）")])]),e._v(" "),t("li",[t("p",[e._v("Spring 将值和引用注入到 Bean 对应的属性中")])]),e._v(" "),t("li",[t("p",[e._v("如果 Bean 实现了 "),t("code",[e._v("BeanNameAware")]),e._v(" 接口，Spring 将 Bean 的 ID 传递给 "),t("code",[e._v("setBeanName")]),e._v(" 方法")]),e._v(" "),t("ul",[t("li",[e._v("作用是通过 Bean 的引用来获得 Bean ID，一般业务中是很少有用到 Bean 的 ID 的")])])]),e._v(" "),t("li",[t("p",[e._v("如果 Bean 实现了 "),t("code",[e._v("BeanFactoryAware")]),e._v(" 接口，Spring 将调用 "),t("code",[e._v("setBeanDactory")]),e._v(" 方法，并把 "),t("code",[e._v("BeanFactory")]),e._v(" 容器实例作为参数传入。")]),e._v(" "),t("ul",[t("li",[e._v("作用是获取 Spring 容器，如 Bean 通过 Spring 容器发布事件等")])])]),e._v(" "),t("li",[t("p",[e._v("如果 Bean 实现了 "),t("code",[e._v("ApplicationContextAware")]),e._v(" 接口，Spring 容器将调用 "),t("code",[e._v("setApplicationContext")]),e._v(" 方法，把应用上下文作为参数传入")]),e._v(" "),t("ul",[t("li",[e._v("作用与 "),t("code",[e._v("BeanFactory")]),e._v(" 类似都是为了获取 Spring 容器，不同的是 Spring 容器在调用 "),t("code",[e._v("setApplicationContext")]),e._v(" 方法时会把它自己作为 "),t("code",[e._v("setApplicationContext")]),e._v(" 的参数传入，而 Spring 容器在调用 "),t("code",[e._v("setBeanFactory")]),e._v(" 前需要使用者自己指定（注入）"),t("code",[e._v("setBeanFactory")]),e._v(" 里的参数 "),t("code",[e._v("BeanFactory")])])])]),e._v(" "),t("li",[t("p",[e._v("如果 Bean 实现了 "),t("code",[e._v("BeanPostProcess")]),e._v(" 接口，Spring 将调用 "),t("code",[e._v("postProcessBeforeInitialization")]),e._v(" 方法")]),e._v(" "),t("ul",[t("li",[e._v("作用是在 Bean 实例创建成功后对其进行增强处理，如对 Bean 进行修改，增加某个功能")])])]),e._v(" "),t("li",[t("p",[e._v("如果 Bean 实现了 "),t("code",[e._v("InitializingBean")]),e._v(" 接口，Spring 将调用 "),t("code",[e._v("afterPropertiesSet")]),e._v(" 方法，作用与在配置文件中对 Bean 使用 "),t("code",[e._v("init-method")]),e._v(" 声明初始化的作用一样，都是在 Bean 的全部属性设置成功后执行的初始化方法。")])]),e._v(" "),t("li",[t("p",[e._v("如果 Bean 实现了 "),t("code",[e._v("BeanPostProcess")]),e._v(" 接口，Spring 将调用 "),t("code",[e._v("postProcessAfterInitialization")]),e._v(" 方法")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("postProcessBeforeInitialization")]),e._v(" 是在 Bean 初始化前执行的，而 "),t("code",[e._v("postProcessAfterInitialization")]),e._v(" 是在 Bean 初始化后执行的")])])]),e._v(" "),t("li",[t("p",[e._v("经过以上的工作后，Bean 将一直驻留在应用上下文中给应用使用，直到应用上下文被销毁")])]),e._v(" "),t("li",[t("p",[e._v("如果 Bean 实现了 "),t("code",[e._v("DispostbleBean")]),e._v(" 接口，Spring 将调用它的 "),t("code",[e._v("destory")]),e._v(" 方法，作用与在配置文件中对 Bean 使用 "),t("code",[e._v("destory-method")]),e._v(" 属性的作用一样，都是在 Bean 实例销毁前执行的方法。")])])]),e._v(" "),t("h2",{attrs:{id:"spring-bean-注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-注册"}},[e._v("#")]),e._v(" Spring Bean 注册")]),e._v(" "),t("p",[e._v("注册 Spring Bean 实际上是将 "),t("code",[e._v("BeanDefinition")]),e._v(" 注册到 IoC 容器中。")]),e._v(" "),t("h3",{attrs:{id:"xml-配置元信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xml-配置元信息"}},[e._v("#")]),e._v(" XML 配置元信息")]),e._v(" "),t("p",[e._v("Spring 的传统配置方式。在 "),t("code",[e._v("<bean>")]),e._v(" 标签中配置元数据内容。")]),e._v(" "),t("p",[e._v("缺点是当 JavaBean 过多时，产生的配置文件足以让你眼花缭乱。")]),e._v(" "),t("h3",{attrs:{id:"注解配置元信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注解配置元信息"}},[e._v("#")]),e._v(" 注解配置元信息")]),e._v(" "),t("p",[e._v("使用 "),t("code",[e._v("@Bean")]),e._v("、"),t("code",[e._v("@Component")]),e._v("、"),t("code",[e._v("@Import")]),e._v(" 注解注册 Spring Bean。")]),e._v(" "),t("h3",{attrs:{id:"java-api-配置元信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-api-配置元信息"}},[e._v("#")]),e._v(" Java API 配置元信息")]),e._v(" "),t("ul",[t("li",[e._v("命名方式："),t("code",[e._v("BeanDefinitionRegistry#registerBeanDefinition(String,BeanDefinition)")])]),e._v(" "),t("li",[e._v("非命名方式："),t("code",[e._v("BeanDefinitionReaderUtils#registerWithGeneratedName(AbstractBeanDefinition,BeanDefinitionRegistry)")])]),e._v(" "),t("li",[e._v("配置类方式："),t("code",[e._v("AnnotatedBeanDefinitionReader#register(Class...)")])])]),e._v(" "),t("blockquote",[t("p",[e._v("💻 Spring Bean 注册示例源码："),t("a",{attrs:{href:"https://github.com/dunwu/spring-tutorial/blob/master/codes/core/spring-core-ioc/src/test/java/io/github/dunwu/spring/core/bean/BeanRegistryTests.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("BeanRegistryTests"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"spring-bean-实例化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-实例化"}},[e._v("#")]),e._v(" Spring Bean 实例化")]),e._v(" "),t("p",[e._v("Spring Bean 实例化方式：")]),e._v(" "),t("ul",[t("li",[e._v("常规方式\n"),t("ul",[t("li",[e._v("通过构造器（配置元信息：XML、Java 注解和 Java API）")]),e._v(" "),t("li",[e._v("通过静态方法（配置元信息：XML、Java 注解和 Java API）")]),e._v(" "),t("li",[e._v("通过 Bean 工厂方法（配置元信息：XML、Java 注解和 Java API）")]),e._v(" "),t("li",[e._v("通过 "),t("code",[e._v("FactoryBean")]),e._v("（配置元信息：XML、Java 注解和 Java API）")])])]),e._v(" "),t("li",[e._v("特殊方式\n"),t("ul",[t("li",[e._v("通过 "),t("code",[e._v("ServiceLoaderFactoryBean")]),e._v("（配置元信息：XML、Java 注解和 Java API ）")]),e._v(" "),t("li",[e._v("通过 "),t("code",[e._v("AutowireCapableBeanFactory#createBean(java.lang.Class, int, boolean)")])]),e._v(" "),t("li",[e._v("通过 "),t("code",[e._v("BeanDefinitionRegistry#registerBeanDefinition(String,BeanDefinition)")])])])])]),e._v(" "),t("blockquote",[t("p",[e._v("💻 Spring Bean 实例化示例源码："),t("a",{attrs:{href:"https://github.com/dunwu/spring-tutorial/blob/master/codes/core/spring-core-ioc/src/test/java/io/github/dunwu/spring/core/bean/BeanInstantiationTests.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("BeanInstantiationTests"),t("OutboundLink")],1),e._v("、"),t("a",{attrs:{href:"https://github.com/dunwu/spring-tutorial/blob/master/codes/core/spring-core-ioc/src/test/java/io/github/dunwu/spring/core/bean/BeanInstantiationSpecialTests.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("BeanInstantiationSpecialTests"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"spring-bean-初始化和销毁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-初始化和销毁"}},[e._v("#")]),e._v(" Spring Bean 初始化和销毁")]),e._v(" "),t("p",[e._v("Spring Bean 初始化和销毁的方式有以下几种：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("使用 "),t("code",[e._v("@PostConstruct")]),e._v(" 和 "),t("code",[e._v("@PreDestroy")]),e._v(" 注解分别指定相应的初始化方法和销毁方法。")])]),e._v(" "),t("li",[t("p",[e._v("实现 "),t("code",[e._v("InitializingBean")]),e._v(" 接口的 "),t("code",[e._v("afterPropertiesSet()")]),e._v(" 方法来编写初始化方法；实现 "),t("code",[e._v("DisposableBean")]),e._v(" 接口的 "),t("code",[e._v("destroy()")]),e._v(" 方法来编写销毁方法。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("InitializingBean")]),e._v(" 接口包含一个 "),t("code",[e._v("afterPropertiesSet")]),e._v(" 方法，可以通过实现该接口，然后在这个方法中编写初始化逻辑。")]),e._v(" "),t("li",[t("code",[e._v("DisposableBean")]),e._v("接口包含一个 "),t("code",[e._v("destory")]),e._v(" 方法，可以通过实现该接口，然后在这个方法中编写销毁逻辑。")])])]),e._v(" "),t("li",[t("p",[e._v("自定义初始化方法")]),e._v(" "),t("ul",[t("li",[e._v("XML 配置："),t("code",[e._v('<bean init-method="init" destroy="destroy" ... />')])]),e._v(" "),t("li",[e._v("Java 注解："),t("code",[e._v('@Bean(initMethod = "init", destroyMethod = "destroy")')])]),e._v(" "),t("li",[e._v("Java API："),t("code",[e._v("AbstractBeanDefinition#setInitMethodName(String)")]),e._v(" 和 "),t("code",[e._v("AbstractBeanDefinition#setDestroyMethodName(String)")]),e._v(" 分别定义初始化和销毁方法")])])])]),e._v(" "),t("p",[e._v("注意：如果同时存在，执行顺序会按照序列执行。")]),e._v(" "),t("p",[e._v("Bean 的延迟初始化")]),e._v(" "),t("ul",[t("li",[e._v("xml 方式："),t("code",[e._v('<bean lazy-init="true" ... />')])]),e._v(" "),t("li",[e._v("注解方式："),t("code",[e._v("@Lazy")])])]),e._v(" "),t("p",[e._v("Spring 提供了一个 "),t("code",[e._v("BeanPostProcessor")]),e._v(" 接口，提供了两个方法 "),t("code",[e._v("postProcessBeforeInitialization")]),e._v(" 和 "),t("code",[e._v("postProcessAfterInitialization")]),e._v("。其中"),t("code",[e._v("postProcessBeforeInitialization")]),e._v(" 在组件的初始化方法调用之前执行，"),t("code",[e._v("postProcessAfterInitialization")]),e._v(" 在组件的初始化方法调用之后执行。它们都包含两个入参：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("bean")]),e._v("：当前组件对象；")]),e._v(" "),t("li",[t("code",[e._v("beanName")]),e._v("：当前组件在容器中的名称。")])]),e._v(" "),t("blockquote",[t("p",[e._v("💻 Spring Bean 初始化和销毁示例源码："),t("a",{attrs:{href:"https://github.com/dunwu/spring-tutorial/blob/master/codes/core/spring-core-ioc/src/test/java/io/github/dunwu/spring/core/bean/BeanInitDestroyTests.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("BeanInitDestroyTests"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"spring-bean-垃圾回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-垃圾回收"}},[e._v("#")]),e._v(" Spring Bean 垃圾回收")]),e._v(" "),t("p",[e._v("Spring Bean 垃圾回收步骤：")]),e._v(" "),t("ol",[t("li",[e._v("关闭 Spring 容器（应用上下文）")]),e._v(" "),t("li",[e._v("执行 GC")]),e._v(" "),t("li",[e._v("Spring Bean 覆盖的 "),t("code",[e._v("finalize()")]),e._v(" 方法被回调")])]),e._v(" "),t("h2",{attrs:{id:"spring-bean-作用范围"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-作用范围"}},[e._v("#")]),e._v(" Spring Bean 作用范围")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[e._v("Scope")]),e._v(" "),t("th",{staticStyle:{"text-align":"left"}},[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-singleton",target:"_blank",rel:"noopener noreferrer"}},[e._v("singleton"),t("OutboundLink")],1)]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-prototype",target:"_blank",rel:"noopener noreferrer"}},[e._v("prototype"),t("OutboundLink")],1)]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("Scopes a single bean definition to any number of object instances.")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-request",target:"_blank",rel:"noopener noreferrer"}},[e._v("request"),t("OutboundLink")],1)]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring "),t("code",[e._v("ApplicationContext")]),e._v(".")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-session",target:"_blank",rel:"noopener noreferrer"}},[e._v("session"),t("OutboundLink")],1)]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("Scopes a single bean definition to the lifecycle of an HTTP "),t("code",[e._v("Session")]),e._v(". Only valid in the context of a web-aware Spring "),t("code",[e._v("ApplicationContext")]),e._v(".")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-application",target:"_blank",rel:"noopener noreferrer"}},[e._v("application"),t("OutboundLink")],1)]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("Scopes a single bean definition to the lifecycle of a "),t("code",[e._v("ServletContext")]),e._v(". Only valid in the context of a web-aware Spring "),t("code",[e._v("ApplicationContext")]),e._v(".")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#websocket-stomp-websocket-scope",target:"_blank",rel:"noopener noreferrer"}},[e._v("websocket"),t("OutboundLink")],1)]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("Scopes a single bean definition to the lifecycle of a "),t("code",[e._v("WebSocket")]),e._v(". Only valid in the context of a web-aware Spring "),t("code",[e._v("ApplicationContext")]),e._v(".")])])])]),e._v(" "),t("h2",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spring 官方文档之 Core Technologies"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/course/intro/265",target:"_blank",rel:"noopener noreferrer"}},[e._v("《小马哥讲 Spring 核心编程思想》"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);