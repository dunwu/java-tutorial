(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{446:function(t,v,e){"use strict";e.r(v);var r=e(14),n=Object(r.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"spring-事件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-事件"}},[t._v("#")]),t._v(" Spring 事件")]),t._v(" "),v("h2",{attrs:{id:"java-事件-监听器编程模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-事件-监听器编程模型"}},[t._v("#")]),t._v(" Java 事件/监听器编程模型")]),t._v(" "),v("p",[t._v("设计模式 - 观察者模式扩展")]),t._v(" "),v("ul",[v("li",[t._v("可观者对象（消息发送者） - java.util.Observable")]),t._v(" "),v("li",[t._v("观察者 - java.util.Observer")])]),t._v(" "),v("p",[t._v("标准化接口")]),t._v(" "),v("ul",[v("li",[t._v("事件对象 - java.util.EventObject")]),t._v(" "),v("li",[t._v("事件监听器 - java.util.EventListener")])]),t._v(" "),v("h2",{attrs:{id:"面向接口的事件-监听器设计模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向接口的事件-监听器设计模式"}},[t._v("#")]),t._v(" 面向接口的事件/监听器设计模式")]),t._v(" "),v("p",[t._v("事件/监听器场景举例")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Java 技术规范")]),t._v(" "),v("th",[t._v("事件接口")]),t._v(" "),v("th",[t._v("监听器接口")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("JavaBeans")]),t._v(" "),v("td",[t._v("java.beans.PropertyChangeEvent")]),t._v(" "),v("td",[t._v("java.beans.PropertyChangeListener")])]),t._v(" "),v("tr",[v("td",[t._v("Java AWT")]),t._v(" "),v("td",[t._v("java.awt.event.MouseEvent")]),t._v(" "),v("td",[t._v("java.awt.event.MouseListener")])]),t._v(" "),v("tr",[v("td",[t._v("Java Swing")]),t._v(" "),v("td",[t._v("javax.swing.event.MenuEvent")]),t._v(" "),v("td",[t._v("javax.swing.event.MenuListener")])]),t._v(" "),v("tr",[v("td",[t._v("Java Preference")]),t._v(" "),v("td",[t._v("java.util.prefs.PreferenceChangeEvent")]),t._v(" "),v("td",[t._v("java.util.prefs.PreferenceChangeListener")])])])]),t._v(" "),v("h2",{attrs:{id:"面向注解的事件-监听器设计模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向注解的事件-监听器设计模式"}},[t._v("#")]),t._v(" 面向注解的事件/监听器设计模式")]),t._v(" "),v("p",[t._v("事件/监听器注解场景举例")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Java 技术规范")]),t._v(" "),v("th",[t._v("事件注解")]),t._v(" "),v("th",[t._v("监听器注解")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Servlet 3.0+")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v("@javax.servlet.annotation.WebListener")])]),t._v(" "),v("tr",[v("td",[t._v("JPA 1.0+")]),t._v(" "),v("td",[t._v("@javax.persistence.PostPersist")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("Java Common")]),t._v(" "),v("td",[t._v("@PostConstruct")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("EJB 3.0+")]),t._v(" "),v("td",[t._v("@javax.ejb.PrePassivate")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("JSF 2.0+")]),t._v(" "),v("td",[t._v("@javax.faces.event.ListenerFor")]),t._v(" "),v("td")])])]),t._v(" "),v("h2",{attrs:{id:"spring-标准事件-applicationevent"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-标准事件-applicationevent"}},[t._v("#")]),t._v(" Spring 标准事件 - ApplicationEvent")]),t._v(" "),v("p",[t._v("Java 标准事件 "),v("code",[t._v("java.util.EventObject")]),t._v(" 扩展")]),t._v(" "),v("ul",[v("li",[t._v("扩展特性：事件发生事件戳")]),t._v(" "),v("li",[t._v("Spring 应用上下文 ApplicationEvent 扩展 - "),v("code",[t._v("ApplicationContextEvent")])]),t._v(" "),v("li",[t._v("Spring 应用上下文（ApplicationContext）作为事件源")])]),t._v(" "),v("p",[t._v("具体实现：")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("org.springframework.context.event.ContextClosedEvent")])]),t._v(" "),v("li",[v("code",[t._v("org.springframework.context.event.ContextRefreshedEvent")])]),t._v(" "),v("li",[v("code",[t._v("org.springframework.context.event.ContextStartedEvent")])]),t._v(" "),v("li",[v("code",[t._v("org.springframework.context.event.ContextStoppedEvent")])])]),t._v(" "),v("h2",{attrs:{id:"基于接口的-spring-事件监听器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基于接口的-spring-事件监听器"}},[t._v("#")]),t._v(" 基于接口的 Spring 事件监听器")]),t._v(" "),v("p",[t._v("Java 标准事件监听器 "),v("code",[t._v("java.util.EventListener")]),t._v(" 扩展")]),t._v(" "),v("ul",[v("li",[t._v("扩展接口 - "),v("code",[t._v("org.springframework.context.ApplicationListener")])]),t._v(" "),v("li",[t._v("设计特点：单一类型事件处理")]),t._v(" "),v("li",[t._v("处理方法："),v("code",[t._v("onApplicationEvent(ApplicationEvent)")])]),t._v(" "),v("li",[t._v("事件类型："),v("code",[t._v("org.springframework.context.ApplicationEvent")])])]),t._v(" "),v("h2",{attrs:{id:"基于注解的-spring-事件监听器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基于注解的-spring-事件监听器"}},[t._v("#")]),t._v(" 基于注解的 Spring 事件监听器")]),t._v(" "),v("p",[t._v("Spring 注解 - "),v("code",[t._v("@org.springframework.context.event.EventListener")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("特性")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("设计特点")]),t._v(" "),v("td",[t._v("支持多 "),v("code",[t._v("ApplicationEvent")]),t._v(" 类型，无需接口约束")])]),t._v(" "),v("tr",[v("td",[t._v("注解目标")]),t._v(" "),v("td",[t._v("方法")])]),t._v(" "),v("tr",[v("td",[t._v("是否支持异步执行")]),t._v(" "),v("td",[t._v("支持")])]),t._v(" "),v("tr",[v("td",[t._v("是否支持泛型类型事件")]),t._v(" "),v("td",[t._v("支持")])]),t._v(" "),v("tr",[v("td",[t._v("是指支持顺序控制")]),t._v(" "),v("td",[t._v("支持，配合 "),v("code",[t._v("@Order")]),t._v(" 注解控制")])])])]),t._v(" "),v("h2",{attrs:{id:"注册-spring-applicationlistener"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#注册-spring-applicationlistener"}},[t._v("#")]),t._v(" 注册 Spring ApplicationListener")]),t._v(" "),v("ul",[v("li",[t._v("方法一：ApplicationListener 作为 Spring Bean 注册")]),t._v(" "),v("li",[t._v("方法二：通过 ConfigurableApplicationContext API 注册")])]),t._v(" "),v("h2",{attrs:{id:"spring-事件发布器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-事件发布器"}},[t._v("#")]),t._v(" Spring 事件发布器")]),t._v(" "),v("ul",[v("li",[t._v("方法一：通过 ApplicationEventPublisher 发布 Spring 事件\n"),v("ul",[v("li",[t._v("获取 ApplicationEventPublisher\n"),v("ul",[v("li",[t._v("依赖注入")])])])])]),t._v(" "),v("li",[t._v("方法二：通过 ApplicationEventMulticaster 发布 Spring 事件\n"),v("ul",[v("li",[t._v("获取 ApplicationEventMulticaster\n"),v("ul",[v("li",[t._v("依赖注入")]),t._v(" "),v("li",[t._v("依赖查找")])])])])])]),t._v(" "),v("h2",{attrs:{id:"spring-层次性上下文事件传播"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-层次性上下文事件传播"}},[t._v("#")]),t._v(" Spring 层次性上下文事件传播")]),t._v(" "),v("ul",[v("li",[t._v("发生说明")]),t._v(" "),v("li",[t._v("当 Spring 应用出现多层次 Spring 应用上下文（ApplicationContext）时，如 Spring WebMVC、Spring Boot 或 Spring Cloud 场景下，由子 ApplicationContext 发起 Spring 事件可能会传递到其 Parent ApplicationContext（直到 Root）的过程")]),t._v(" "),v("li",[t._v("如何避免")]),t._v(" "),v("li",[t._v("定位 Spring 事件源（ApplicationContext）进行过滤处理")])]),t._v(" "),v("h2",{attrs:{id:"spring-内建事件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-内建事件"}},[t._v("#")]),t._v(" Spring 内建事件")]),t._v(" "),v("p",[t._v("ApplicationContextEvent 派生事件")]),t._v(" "),v("ul",[v("li",[t._v("ContextRefreshedEvent ：Spring 应用上下文就绪事件")]),t._v(" "),v("li",[t._v("ContextStartedEvent ：Spring 应用上下文启动事件")]),t._v(" "),v("li",[t._v("ContextStoppedEvent ：Spring 应用上下文停止事件")]),t._v(" "),v("li",[t._v("ContextClosedEvent ：Spring 应用上下文关闭事件")])]),t._v(" "),v("h2",{attrs:{id:"spring-4-2-payload-事件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-4-2-payload-事件"}},[t._v("#")]),t._v(" Spring 4.2 Payload 事件")]),t._v(" "),v("p",[t._v("Spring Payload 事件 - org.springframework.context.PayloadApplicationEvent")]),t._v(" "),v("ul",[v("li",[t._v("使用场景：简化 Spring 事件发送，关注事件源主体")]),t._v(" "),v("li",[t._v("发送方法：ApplicationEventPublisher#publishEvent(java.lang.Object)")])]),t._v(" "),v("h2",{attrs:{id:"自定义-spring-事件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自定义-spring-事件"}},[t._v("#")]),t._v(" 自定义 Spring 事件")]),t._v(" "),v("ul",[v("li",[t._v("扩展 org.springframework.context.ApplicationEvent")]),t._v(" "),v("li",[t._v("实现 org.springframework.context.ApplicationListener")]),t._v(" "),v("li",[t._v("注册 org.springframework.context.ApplicationListener")])]),t._v(" "),v("h2",{attrs:{id:"依赖注入-applicationeventpublisher"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入-applicationeventpublisher"}},[t._v("#")]),t._v(" 依赖注入 ApplicationEventPublisher")]),t._v(" "),v("ul",[v("li",[t._v("通过 ApplicationEventPublisherAware 回调接口")]),t._v(" "),v("li",[t._v("通过 @Autowired ApplicationEventPublisher")])]),t._v(" "),v("h2",{attrs:{id:"依赖查找-applicationeventmulticaster"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#依赖查找-applicationeventmulticaster"}},[t._v("#")]),t._v(" 依赖查找 ApplicationEventMulticaster")]),t._v(" "),v("p",[t._v("查找条件")]),t._v(" "),v("ul",[v("li",[t._v('Bean 名称："applicationEventMulticaster"')]),t._v(" "),v("li",[t._v("Bean 类型：org.springframework.context.event.ApplicationEventMulticaster")])]),t._v(" "),v("h2",{attrs:{id:"applicationeventpublisher-底层实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#applicationeventpublisher-底层实现"}},[t._v("#")]),t._v(" ApplicationEventPublisher 底层实现")]),t._v(" "),v("ul",[v("li",[t._v("接口：org.springframework.context.event.ApplicationEventMulticaster")]),t._v(" "),v("li",[t._v("抽象类：org.springframework.context.event.AbstractApplicationEventMulticaster")]),t._v(" "),v("li",[t._v("实现类：org.springframework.context.event.SimpleApplicationEventMulticaster")])]),t._v(" "),v("h2",{attrs:{id:"同步和异步-spring-事件广播"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步-spring-事件广播"}},[t._v("#")]),t._v(" 同步和异步 Spring 事件广播")]),t._v(" "),v("p",[t._v("基于实现类 - "),v("code",[t._v("org.springframework.context.event.SimpleApplicationEventMulticaster")])]),t._v(" "),v("ul",[v("li",[t._v("模式切换："),v("code",[t._v("setTaskExecutor(java.util.concurrent.Executor)")]),t._v(" 方法\n"),v("ul",[v("li",[t._v("默认模式：同步")]),t._v(" "),v("li",[t._v("异步模式：如 "),v("code",[t._v("java.util.concurrent.ThreadPoolExecutor")])])])]),t._v(" "),v("li",[t._v("设计缺陷：非基于接口契约编程")])]),t._v(" "),v("p",[t._v("基于注解 - "),v("code",[t._v("@org.springframework.context.event.EventListener")])]),t._v(" "),v("ul",[v("li",[t._v("模式切换\n"),v("ul",[v("li",[t._v("默认模式：同步")]),t._v(" "),v("li",[t._v("异步模式：标注 "),v("code",[t._v("@org.springframework.scheduling.annotation.Async")])])])]),t._v(" "),v("li",[t._v("实现限制：无法直接实现同步/异步动态切换")])]),t._v(" "),v("h2",{attrs:{id:"spring-4-1-事件异常处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-4-1-事件异常处理"}},[t._v("#")]),t._v(" Spring 4.1 事件异常处理")]),t._v(" "),v("p",[t._v("Spring 3.0 错误处理接口 - org.springframework.util.ErrorHandler")]),t._v(" "),v("p",[t._v("使用场景")]),t._v(" "),v("ul",[v("li",[t._v("Spring 事件（Events）\n"),v("ul",[v("li",[t._v("SimpleApplicationEventMulticaster Spring 4.1 开始支持")])])]),t._v(" "),v("li",[t._v("Spring 本地调度（Scheduling）\n"),v("ul",[v("li",[t._v("org.springframework.scheduling.concurrent.ConcurrentTaskScheduler")]),t._v(" "),v("li",[t._v("org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler")])])])]),t._v(" "),v("h2",{attrs:{id:"spring-事件-监听器实现原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-事件-监听器实现原理"}},[t._v("#")]),t._v(" Spring 事件/监听器实现原理")]),t._v(" "),v("p",[t._v("核心类 - "),v("code",[t._v("org.springframework.context.event.SimpleApplicationEventMulticaster")])]),t._v(" "),v("ul",[v("li",[t._v("设计模式：观察者模式扩展\n"),v("ul",[v("li",[t._v("被观察者 - org.springframework.context.ApplicationListener\n"),v("ul",[v("li",[t._v("API 添加")]),t._v(" "),v("li",[t._v("依赖查找")])])]),t._v(" "),v("li",[t._v("通知对象 - org.springframework.context.ApplicationEvent")])])]),t._v(" "),v("li",[t._v("执行模式：同步/异步")]),t._v(" "),v("li",[t._v("异常处理：org.springframework.util.ErrorHandler")]),t._v(" "),v("li",[t._v("泛型处理：org.springframework.core.ResolvableType")])]),t._v(" "),v("h2",{attrs:{id:"问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),v("p",[v("strong",[t._v("Spring Boot 事件")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("事件类型")]),t._v(" "),v("th",[t._v("发生时机")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("ApplicationStartingEvent")]),t._v(" "),v("td",[t._v("当 Spring Boot 应用已启动时")])]),t._v(" "),v("tr",[v("td",[t._v("ApplicationStartedEvent")]),t._v(" "),v("td",[t._v("当 Spring Boot 应用已启动时")])]),t._v(" "),v("tr",[v("td",[t._v("ApplicationEnvironmentPreparedEvent")]),t._v(" "),v("td",[t._v("当 Spring Boot Environment 实例已准备时")])]),t._v(" "),v("tr",[v("td",[t._v("ApplicationPreparedEvent")]),t._v(" "),v("td",[t._v("当 Spring Boot 应用预备时")])]),t._v(" "),v("tr",[v("td",[t._v("ApplicationReadyEvent")]),t._v(" "),v("td",[t._v("当 Spring Boot 应用完全可用时")])]),t._v(" "),v("tr",[v("td",[t._v("ApplicationFailedEvent")]),t._v(" "),v("td",[t._v("当 Spring Boot 应用启动失败时")])])])]),t._v(" "),v("p",[v("strong",[t._v("Spring Cloud 事件")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("事件类型")]),t._v(" "),v("th",[t._v("发生时机")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("EnvironmentChangeEvent")]),t._v(" "),v("td",[t._v("当 Environment 示例配置属性发生变化时")])]),t._v(" "),v("tr",[v("td",[t._v("HeartbeatEvent")]),t._v(" "),v("td",[t._v("当 DiscoveryClient 客户端发送心跳时")])]),t._v(" "),v("tr",[v("td",[t._v("InstancePreRegisteredEvent")]),t._v(" "),v("td",[t._v("当服务实例注册前")])]),t._v(" "),v("tr",[v("td",[t._v("InstanceRegisteredEvent")]),t._v(" "),v("td",[t._v("当服务实例注册后")])]),t._v(" "),v("tr",[v("td",[t._v("RefreshEvent")]),t._v(" "),v("td",[t._v("当 RefreshEndpoint 被调用时")])]),t._v(" "),v("tr",[v("td",[t._v("RefreshScopeRefreshedEvent")]),t._v(" "),v("td",[t._v("当 Refresh Scope Bean 刷新后")])])])]),t._v(" "),v("p",[v("strong",[t._v("Spring 事件核心接口/组件")]),t._v("？")]),t._v(" "),v("ul",[v("li",[t._v("Spring 事件 - org.springframework.context.ApplicationEvent")]),t._v(" "),v("li",[t._v("Spring 事件监听器 - org.springframework.context.ApplicationListener")]),t._v(" "),v("li",[t._v("Spring 事件发布器 - org.springframework.context.ApplicationEventPublisher")]),t._v(" "),v("li",[t._v("Spring 事件广播器 - org.springframework.context.event.ApplicationEventMulticaster")])]),t._v(" "),v("p",[v("strong",[t._v("Spring 同步和异步事件处理的使用场景")]),t._v("？")]),t._v(" "),v("ul",[v("li",[t._v("Spring 同步事件 - 绝大多数 Spring 使用场景，如 ContextRefreshedEvent")]),t._v(" "),v("li",[t._v("Spring 异步事件 - 主要 @EventListener 与 @Async 配合，实现异步处理，不阻塞主线程，比如长时间的数据计算任务等。不要轻易调整 SimpleApplicationEventMulticaster 中关联的 taskExecutor 对象，除非使用者非常了解 Spring 事件机制，否则容易出现异常行为。")])]),t._v(" "),v("h2",{attrs:{id:"参考资料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring 官方文档之 Core Technologies"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://time.geekbang.org/course/intro/265",target:"_blank",rel:"noopener noreferrer"}},[t._v("《小马哥讲 Spring 核心编程思想》"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=n.exports}}]);