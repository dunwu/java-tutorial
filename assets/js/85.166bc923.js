(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{448:function(t,r,n){"use strict";n.r(r);var a=n(14),o=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"spring-注解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-注解"}},[t._v("#")]),t._v(" Spring 注解")]),t._v(" "),r("h2",{attrs:{id:"spring-注解驱动编程发展历程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-注解驱动编程发展历程"}},[t._v("#")]),t._v(" Spring 注解驱动编程发展历程")]),t._v(" "),r("ul",[r("li",[t._v("注解驱动启蒙时代：Spring Framework 1.x")]),t._v(" "),r("li",[t._v("注解驱动过渡时代：Spring Framework 2.x")]),t._v(" "),r("li",[t._v("注解驱动黄金时代：Spring Framework 3.x")]),t._v(" "),r("li",[t._v("注解驱动完善时代：Spring Framework 4.x")]),t._v(" "),r("li",[t._v("注解驱动当下时代：Spring Framework 5.x")])]),t._v(" "),r("h2",{attrs:{id:"spring-核心注解场景分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-核心注解场景分类"}},[t._v("#")]),t._v(" Spring 核心注解场景分类")]),t._v(" "),r("p",[t._v("Spring 模式注解")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Spring 注解")]),t._v(" "),r("th",[t._v("场景说明")]),t._v(" "),r("th",[t._v("起始版本")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("@Repository")]),t._v(" "),r("td",[t._v("数据仓储模式注解")]),t._v(" "),r("td",[t._v("2.0")])]),t._v(" "),r("tr",[r("td",[t._v("@Component")]),t._v(" "),r("td",[t._v("通用组件模式注解")]),t._v(" "),r("td",[t._v("2.5")])]),t._v(" "),r("tr",[r("td",[t._v("@Service")]),t._v(" "),r("td",[t._v("服务模式注解")]),t._v(" "),r("td",[t._v("2.5")])]),t._v(" "),r("tr",[r("td",[t._v("@Controller")]),t._v(" "),r("td",[t._v("Web 控制器模式注解")]),t._v(" "),r("td",[t._v("2.5")])]),t._v(" "),r("tr",[r("td",[t._v("@Configuration")]),t._v(" "),r("td",[t._v("配置类模式注解")]),t._v(" "),r("td",[t._v("3.0")])])])]),t._v(" "),r("p",[t._v("装配注解")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Spring 注解")]),t._v(" "),r("th",[t._v("场景说明")]),t._v(" "),r("th",[t._v("起始版本")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("@ImportResource")]),t._v(" "),r("td",[t._v("替换 XML 元素 "),r("code",[t._v("<import>")])]),t._v(" "),r("td",[t._v("2.5")])]),t._v(" "),r("tr",[r("td",[t._v("@Import")]),t._v(" "),r("td",[t._v("导入 Configuration 类")]),t._v(" "),r("td",[t._v("2.5")])]),t._v(" "),r("tr",[r("td",[t._v("@ComponentScan")]),t._v(" "),r("td",[t._v("扫描指定 package 下标注 Spring 模式注解的类")]),t._v(" "),r("td",[t._v("3.1")])])])]),t._v(" "),r("p",[t._v("依赖注入注解")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Spring 注解")]),t._v(" "),r("th",[t._v("场景说明")]),t._v(" "),r("th",[t._v("起始版本")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("@Autowired")]),t._v(" "),r("td",[t._v("Bean 依赖注入，支持多种依赖查找方式")]),t._v(" "),r("td",[t._v("2.5")])]),t._v(" "),r("tr",[r("td",[t._v("@Qualifier")]),t._v(" "),r("td",[t._v("细粒度的 @Autowired 依赖查找")]),t._v(" "),r("td",[t._v("2.5")])])])]),t._v(" "),r("h2",{attrs:{id:"spring-注解编程模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-注解编程模型"}},[t._v("#")]),t._v(" Spring 注解编程模型")]),t._v(" "),r("ul",[r("li",[t._v("元注解（Meta-Annotations）")]),t._v(" "),r("li",[t._v("Spring 模式注解（Stereotype Annotations）")]),t._v(" "),r("li",[t._v("Spring 组合注解（Composed Annotations）")]),t._v(" "),r("li",[t._v("Spring 注解属性别名和覆盖（Attribute Aliases and Overrides）")])]),t._v(" "),r("h2",{attrs:{id:"spring-元注解-meta-annotations"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-元注解-meta-annotations"}},[t._v("#")]),t._v(" Spring 元注解（Meta-Annotations）")]),t._v(" "),r("ul",[r("li",[t._v("java.lang.annotation.Documented")]),t._v(" "),r("li",[t._v("java.lang.annotation.Inherited")]),t._v(" "),r("li",[t._v("java.lang.annotation.Repeatable")])]),t._v(" "),r("h2",{attrs:{id:"spring-模式注解-stereotype-annotations"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-模式注解-stereotype-annotations"}},[t._v("#")]),t._v(" Spring 模式注解（Stereotype Annotations）")]),t._v(" "),r("p",[t._v("理解 @Component “派⽣性”：元标注 @Component 的注解在 XML 元素 "),r("a",{attrs:{href:"context:component-scan"}},[t._v("context:component-scan")]),t._v(" 或注解 @ComponentScan 扫描中“派生”了 @Component 的特性，并且从 Spring Framework 4.0 开始支持多层次“派⽣性”。")]),t._v(" "),r("p",[t._v("举例说明：")]),t._v(" "),r("ul",[r("li",[t._v("@Repository")]),t._v(" "),r("li",[t._v("@Service")]),t._v(" "),r("li",[t._v("@Controller")]),t._v(" "),r("li",[t._v("@Configuration")]),t._v(" "),r("li",[t._v("@SpringBootConfiguration（Spring Boot）")])]),t._v(" "),r("p",[t._v("@Component “派⽣性”原理")]),t._v(" "),r("ul",[r("li",[t._v("核心组件 - org.springframework.context.annotation.ClassPathBeanDefinitionScanner")]),t._v(" "),r("li",[t._v("org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider")]),t._v(" "),r("li",[t._v("资源处理 - org.springframework.core.io.support.ResourcePatternResolver")]),t._v(" "),r("li",[t._v("资源-类元信息")]),t._v(" "),r("li",[t._v("org.springframework.core.type.classreading.MetadataReaderFactory")]),t._v(" "),r("li",[t._v("类元信息 - org.springframework.core.type.ClassMetadata")]),t._v(" "),r("li",[t._v("ASM 实现 - org.springframework.core.type.classreading.ClassMetadataReadingVisitor")]),t._v(" "),r("li",[t._v("反射实现 - org.springframework.core.type.StandardAnnotationMetadata")]),t._v(" "),r("li",[t._v("注解元信息 - org.springframework.core.type.AnnotationMetadata")]),t._v(" "),r("li",[t._v("ASM 实现 - org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor")]),t._v(" "),r("li",[t._v("反射实现 - org.springframework.core.type.StandardAnnotationMetadata")])]),t._v(" "),r("h2",{attrs:{id:"spring-组合注解-composed-annotations"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-组合注解-composed-annotations"}},[t._v("#")]),t._v(" Spring 组合注解（Composed Annotations）")]),t._v(" "),r("p",[t._v("Spring 组合注解（Composed Annotations）中的元注允许是 Spring 模式注解（Stereotype Annotation）与其他 Spring 功能性注解的任意组合。")]),t._v(" "),r("h2",{attrs:{id:"spring-注解属性别名-attribute-aliases"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-注解属性别名-attribute-aliases"}},[t._v("#")]),t._v(" Spring 注解属性别名（Attribute Aliases）")]),t._v(" "),r("h2",{attrs:{id:"spring-注解属性覆盖-attribute-overrides"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-注解属性覆盖-attribute-overrides"}},[t._v("#")]),t._v(" Spring 注解属性覆盖（Attribute Overrides）")]),t._v(" "),r("h2",{attrs:{id:"spring-enable-模块驱动"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-enable-模块驱动"}},[t._v("#")]),t._v(" Spring @Enable 模块驱动")]),t._v(" "),r("p",[t._v("@Enable 模块驱动")]),t._v(" "),r("p",[t._v("@Enable 模块驱动是以 @Enable 为前缀的注解驱动编程模型。所谓“模块”是指具备相同领域的功能组件集合，组合所形成⼀个独⽴的单元。⽐如 Web MVC 模块、AspectJ 代理模块、Caching（缓存）模块、JMX（Java 管理扩展）模块、Async（异步处理）模块等。")]),t._v(" "),r("p",[t._v("举例说明")]),t._v(" "),r("ul",[r("li",[t._v("@EnableWebMvc")]),t._v(" "),r("li",[t._v("@EnableTransactionManagement")]),t._v(" "),r("li",[t._v("@EnableCaching")]),t._v(" "),r("li",[t._v("@EnableMBeanExport")]),t._v(" "),r("li",[t._v("@EnableAsync")])]),t._v(" "),r("p",[t._v("@Enable 模块驱动编程模式")]),t._v(" "),r("ul",[r("li",[t._v("驱动注解：@EnableXXX")]),t._v(" "),r("li",[t._v("导入注解：@Import 具体实现")]),t._v(" "),r("li",[t._v("具体实现")]),t._v(" "),r("li",[t._v("基于 Configuration Class")]),t._v(" "),r("li",[t._v("基于 ImportSelector 接口实现")]),t._v(" "),r("li",[t._v("基于 ImportBeanDefinitionRegistrar 接口实现")])]),t._v(" "),r("h2",{attrs:{id:"spring-条件注解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-条件注解"}},[t._v("#")]),t._v(" Spring 条件注解")]),t._v(" "),r("p",[t._v("基于配置条件注解 - @org.springframework.context.annotation.Profile")]),t._v(" "),r("ul",[r("li",[t._v("关联对象 - org.springframework.core.env.Environment 中的 Profiles")]),t._v(" "),r("li",[t._v("实现变化：从 Spring 4.0 开始，@Profile 基于 @Conditional 实现")])]),t._v(" "),r("p",[t._v("基于编程条件注解 - @org.springframework.context.annotation.Conditional")]),t._v(" "),r("ul",[r("li",[t._v("关联对象 - org.springframework.context.annotation.Condition 具体实现")])]),t._v(" "),r("p",[t._v("@Conditional 实现原理")]),t._v(" "),r("ul",[r("li",[t._v("上下文对象 - org.springframework.context.annotation.ConditionContext")]),t._v(" "),r("li",[t._v("条件判断 - org.springframework.context.annotation.ConditionEvaluator")]),t._v(" "),r("li",[t._v("配置阶段 - org.springframework.context.annotation.ConfigurationCondition.ConfigurationPhase")]),t._v(" "),r("li",[t._v("判断入口\n"),r("ul",[r("li",[t._v("org.springframework.context.annotation.ConfigurationClassPostProcessor")]),t._v(" "),r("li",[t._v("org.springframework.context.annotation.ConfigurationClassParser")])])])]),t._v(" "),r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring 官方文档之 Core Technologies"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://time.geekbang.org/course/intro/265",target:"_blank",rel:"noopener noreferrer"}},[t._v("《小马哥讲 Spring 核心编程思想》"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=o.exports}}]);