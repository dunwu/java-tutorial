(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{429:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"spring-面试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-面试"}},[t._v("#")]),t._v(" Spring 面试")]),t._v(" "),a("h2",{attrs:{id:"综合篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#综合篇"}},[t._v("#")]),t._v(" 综合篇")]),t._v(" "),a("h3",{attrs:{id:"不同版本的-spring-framework-有哪些主要功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同版本的-spring-framework-有哪些主要功能"}},[t._v("#")]),t._v(" 不同版本的 Spring Framework 有哪些主要功能？")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Version")]),t._v(" "),a("th",[t._v("Feature")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Spring 2.5")]),t._v(" "),a("td",[t._v("发布于 2007 年。这是第一个支持注解的版本。")])]),t._v(" "),a("tr",[a("td",[t._v("Spring 3.0")]),t._v(" "),a("td",[t._v("发布于 2009 年。它完全利用了 Java5 中的改进，并为 JEE6 提供了支持。")])]),t._v(" "),a("tr",[a("td",[t._v("Spring 4.0")]),t._v(" "),a("td",[t._v("发布于 2013 年。这是第一个完全支持 JAVA8 的版本。")])])])]),t._v(" "),a("h3",{attrs:{id:"什么是-spring-framework"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-framework"}},[t._v("#")]),t._v(" 什么是 Spring Framework？")]),t._v(" "),a("ul",[a("li",[t._v("Spring 是一个开源应用框架，旨在降低应用程序开发的复杂度。")]),t._v(" "),a("li",[t._v("它是轻量级、松散耦合的。")]),t._v(" "),a("li",[t._v("它具有分层体系结构，允许用户选择组件，同时还为 J2EE 应用程序开发提供了一个有凝聚力的框架。")]),t._v(" "),a("li",[t._v("它可以集成其他框架，如 Structs、Hibernate、EJB 等，所以又称为框架的框架。")])]),t._v(" "),a("h3",{attrs:{id:"列举-spring-framework-的优点。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列举-spring-framework-的优点。"}},[t._v("#")]),t._v(" 列举 Spring Framework 的优点。")]),t._v(" "),a("ul",[a("li",[t._v("由于 Spring Frameworks 的分层架构，用户可以自由选择自己需要的组件。")]),t._v(" "),a("li",[t._v("Spring Framework 支持 POJO(Plain Old Java Object) 编程，从而具备持续集成和可测试性。")]),t._v(" "),a("li",[t._v("由于依赖注入和控制反转，JDBC 得以简化。")]),t._v(" "),a("li",[t._v("它是开源免费的。")])]),t._v(" "),a("h3",{attrs:{id:"spring-framework-有哪些不同的功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-framework-有哪些不同的功能"}},[t._v("#")]),t._v(" Spring Framework 有哪些不同的功能？")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("轻量级")]),t._v(" - Spring 在代码量和透明度方面都很轻便。")]),t._v(" "),a("li",[a("strong",[t._v("IOC")]),t._v(" - 控制反转")]),t._v(" "),a("li",[a("strong",[t._v("AOP")]),t._v(" - 面向切面编程可以将应用业务逻辑和系统服务分离，以实现高内聚。")]),t._v(" "),a("li",[a("strong",[t._v("容器")]),t._v(" - Spring 负责创建和管理对象（Bean）的生命周期和配置。")]),t._v(" "),a("li",[a("strong",[t._v("MVC")]),t._v(" - 对 web 应用提供了高度可配置性，其他框架的集成也十分方便。")]),t._v(" "),a("li",[a("strong",[t._v("事务管理")]),t._v(" - 提供了用于事务管理的通用抽象层。Spring 的事务支持也可用于容器较少的环境。")]),t._v(" "),a("li",[a("strong",[t._v("JDBC 异常")]),t._v(" - Spring 的 JDBC 抽象层提供了一个异常层次结构，简化了错误处理策略。")])]),t._v(" "),a("h3",{attrs:{id:"spring-framework-中有多少个模块-它们分别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-framework-中有多少个模块-它们分别是什么"}},[t._v("#")]),t._v(" Spring Framework 中有多少个模块，它们分别是什么？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/spring/spring-framework.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Spring 核心容器")]),t._v(" – 该层基本上是 Spring Framework 的核心。它包含以下模块：\n"),a("ul",[a("li",[t._v("Spring Core")]),t._v(" "),a("li",[t._v("Spring Bean")]),t._v(" "),a("li",[t._v("SpEL (Spring Expression Language)")]),t._v(" "),a("li",[t._v("Spring Context")])])]),t._v(" "),a("li",[a("strong",[t._v("数据访问/集成")]),t._v(" – 该层提供与数据库交互的支持。它包含以下模块：\n"),a("ul",[a("li",[t._v("JDBC (Java DataBase Connectivity)")]),t._v(" "),a("li",[t._v("ORM (Object Relational Mapping)")]),t._v(" "),a("li",[t._v("OXM (Object XML Mappers)")]),t._v(" "),a("li",[t._v("JMS (Java Messaging Service)")]),t._v(" "),a("li",[t._v("Transaction")])])]),t._v(" "),a("li",[a("strong",[t._v("Web")]),t._v(" – 该层提供了创建 Web 应用程序的支持。它包含以下模块：\n"),a("ul",[a("li",[t._v("Web")]),t._v(" "),a("li",[t._v("Web – Servlet")]),t._v(" "),a("li",[t._v("Web – Socket")]),t._v(" "),a("li",[t._v("Web – Portlet")])])]),t._v(" "),a("li",[a("strong",[t._v("AOP")]),t._v(" – 该层支持面向切面编程")]),t._v(" "),a("li",[a("strong",[t._v("Instrumentation")]),t._v(" – 该层为类检测和类加载器实现提供支持。")]),t._v(" "),a("li",[a("strong",[t._v("Test")]),t._v(" – 该层为使用 JUnit 和 TestNG 进行测试提供支持。")]),t._v(" "),a("li",[a("strong",[t._v("几个杂项模块:")]),t._v(" "),a("ul",[a("li",[t._v("Messaging – 该模块为 STOMP 提供支持。它还支持注解编程模型，该模型用于从 WebSocket 客户端路由和处理 STOMP 消息。")]),t._v(" "),a("li",[t._v("Aspects – 该模块为与 AspectJ 的集成提供支持。")])])])]),t._v(" "),a("h3",{attrs:{id:"什么是-spring-配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-配置文件"}},[t._v("#")]),t._v(" 什么是 Spring 配置文件？")]),t._v(" "),a("p",[t._v("Spring 配置文件是 XML 文件。该文件主要包含类信息。它描述了这些类是如何配置以及相互引入的。但是，XML 配置文件冗长且更加干净。如果没有正确规划和编写，那么在大项目中管理变得非常困难。")]),t._v(" "),a("h3",{attrs:{id:"spring-应用程序有哪些不同组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-应用程序有哪些不同组件"}},[t._v("#")]),t._v(" Spring 应用程序有哪些不同组件？")]),t._v(" "),a("p",[t._v("Spring 应用一般有以下组件：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("接口")]),t._v(" - 定义功能。")]),t._v(" "),a("li",[a("strong",[t._v("Bean 类")]),t._v(" - 它包含属性，setter 和 getter 方法，函数等。")]),t._v(" "),a("li",[a("strong",[t._v("Spring 面向切面编程（AOP）")]),t._v(" - 提供面向切面编程的功能。")]),t._v(" "),a("li",[a("strong",[t._v("Bean 配置文件")]),t._v(" - 包含类的信息以及如何配置它们。")]),t._v(" "),a("li",[a("strong",[t._v("用户程序")]),t._v(" - 它使用接口。")])]),t._v(" "),a("h3",{attrs:{id:"使用-spring-有哪些方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-spring-有哪些方式"}},[t._v("#")]),t._v(" 使用 Spring 有哪些方式？")]),t._v(" "),a("p",[t._v("使用 Spring 有以下方式：")]),t._v(" "),a("ul",[a("li",[t._v("作为一个成熟的 Spring Web 应用程序。")]),t._v(" "),a("li",[t._v("作为第三方 Web 框架，使用 Spring Frameworks 中间层。")]),t._v(" "),a("li",[t._v("用于远程使用。")]),t._v(" "),a("li",[t._v("作为企业级 Java Bean，它可以包装现有的 POJO（Plain Old Java Objects）。")])]),t._v(" "),a("h2",{attrs:{id:"核心篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心篇"}},[t._v("#")]),t._v(" 核心篇")]),t._v(" "),a("h3",{attrs:{id:"ioc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ioc"}},[t._v("#")]),t._v(" IoC")]),t._v(" "),a("h4",{attrs:{id:"什么是-ioc-什么是依赖注入-什么是-spring-ioc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-ioc-什么是依赖注入-什么是-spring-ioc"}},[t._v("#")]),t._v(" 什么是 IoC？什么是依赖注入？什么是 Spring IoC？")]),t._v(" "),a("p",[a("strong",[t._v("IoC")]),t._v(" 即"),a("strong",[t._v("控制反转")]),t._v("（Inversion of Control，缩写为 IoC）。IoC 又称为"),a("strong",[t._v("依赖倒置原则")]),t._v("（设计模式六大原则之一），它的要点在于："),a("strong",[t._v("程序要依赖于抽象接口，不要依赖于具体实现")]),t._v("。它的作用就是"),a("strong",[t._v("用于降低代码间的耦合度")]),t._v("。")]),t._v(" "),a("p",[t._v("IoC 的实现方式有两种：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("依赖注入")]),t._v("（Dependency Injection，简称 DI）：不通过 "),a("code",[t._v("new()")]),t._v(" 的方式在类内部创建依赖类对象，而是将依赖的类对象在外部创建好之后，通过构造器、函数参数等方式传递（或注入）给类使用。")]),t._v(" "),a("li",[a("strong",[t._v("依赖查找")]),t._v("（Dependency Lookup）：容器中的受控对象通过容器的 API 来查找自己所依赖的资源和协作对象。")])]),t._v(" "),a("p",[t._v("Spring IoC 是 IoC 的一种实现。DI 是 Spring IoC 的主要实现原则。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20221005163639.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"依赖注入有哪些实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入有哪些实现方式"}},[t._v("#")]),t._v(" 依赖注入有哪些实现方式？")]),t._v(" "),a("p",[t._v("依赖注入有如下方式：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("依赖注入方式")]),t._v(" "),a("th",[t._v("配置元数据举例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Setter 方法注入")]),t._v(" "),a("td",[a("code",[t._v('<proeprty name="user" ref="userBean"/>')])])]),t._v(" "),a("tr",[a("td",[t._v("构造器注入")]),t._v(" "),a("td",[a("code",[t._v('<constructor-arg name="user" ref="userBean" />')])])]),t._v(" "),a("tr",[a("td",[t._v("字段注入")]),t._v(" "),a("td",[a("code",[t._v("@Autowired User user;")])])]),t._v(" "),a("tr",[a("td",[t._v("方法注入")]),t._v(" "),a("td",[a("code",[t._v("@Autowired public void user(User user) { ... }")])])]),t._v(" "),a("tr",[a("td",[t._v("接口回调注入")]),t._v(" "),a("td",[a("code",[t._v("class MyBean implements BeanFactoryAware { ... }")])])])])]),t._v(" "),a("h4",{attrs:{id:"构造器注入-vs-setter-注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造器注入-vs-setter-注入"}},[t._v("#")]),t._v(" 构造器注入 VS. setter 注入")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("构造器注入")]),t._v(" "),a("th",[t._v("setter 注入")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("没有部分注入")]),t._v(" "),a("td",[t._v("有部分注入")])]),t._v(" "),a("tr",[a("td",[t._v("不会覆盖 setter 属性")]),t._v(" "),a("td",[t._v("会覆盖 setter 属性")])]),t._v(" "),a("tr",[a("td",[t._v("任意修改都会创建一个新实例")]),t._v(" "),a("td",[t._v("任意修改不会创建一个新实例")])]),t._v(" "),a("tr",[a("td",[t._v("适用于设置很多属性")]),t._v(" "),a("td",[t._v("适用于设置少量属性")])])])]),t._v(" "),a("p",[t._v("官方推荐使用构造器注入。")]),t._v(" "),a("h4",{attrs:{id:"beanfactory-vs-applicationcontext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory-vs-applicationcontext"}},[t._v("#")]),t._v(" BeanFactory VS. ApplicationContext")]),t._v(" "),a("p",[t._v("在 Spring 中，有两种 IoC 容器："),a("code",[t._v("BeanFactory")]),t._v(" 和 "),a("code",[t._v("ApplicationContext")]),t._v("。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("BeanFactory")]),t._v("："),a("strong",[a("code",[t._v("BeanFactory")]),t._v(" 是 Spring 基础 IoC 容器")]),t._v("。"),a("code",[t._v("BeanFactory")]),t._v(" 提供了 Spring 容器的配置框架和基本功能。")]),t._v(" "),a("li",[a("code",[t._v("ApplicationContext")]),t._v("："),a("strong",[a("code",[t._v("ApplicationContext")]),t._v(" 是具备应用特性的 "),a("code",[t._v("BeanFactory")]),t._v(" 的子接口")]),t._v("。它还扩展了其他一些接口，以支持更丰富的功能，如：国际化、访问资源、事件机制、更方便的支持 AOP、在 web 应用中指定应用层上下文等。")])]),t._v(" "),a("p",[t._v("实际开发中，更推荐使用 "),a("code",[t._v("ApplicationContext")]),t._v(" 作为 IoC 容器，因为它的功能远多于 "),a("code",[t._v("BeanFactory")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"beanfactory-vs-factorybean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory-vs-factorybean"}},[t._v("#")]),t._v(" BeanFactory VS. FactoryBean")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("BeanFactory")]),t._v(" 是 Spring 基础 IoC 容器")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("FactoryBean")]),t._v(" 是创建 Bean 的一种方式，帮助实现复杂的初始化逻辑。")]),t._v(" "),a("h4",{attrs:{id:"spring-ioc-启动时做了哪些准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc-启动时做了哪些准备"}},[t._v("#")]),t._v(" Spring IoC 启动时做了哪些准备")]),t._v(" "),a("p",[t._v("IoC 配置元信息读取和解析")]),t._v(" "),a("p",[t._v("IoC 容器生命周期管理")]),t._v(" "),a("p",[t._v("Spring 事件发布")]),t._v(" "),a("p",[t._v("国际化")]),t._v(" "),a("p",[t._v("等等")]),t._v(" "),a("h4",{attrs:{id:"spring-ioc-的实现机制是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc-的实现机制是什么"}},[t._v("#")]),t._v(" Spring IoC 的实现机制是什么")]),t._v(" "),a("p",[t._v("Spring 中的 IoC 的实现原理就是工厂模式加反射机制。")]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fruit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Apple")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fruit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Apple"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Orange")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fruit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Orange"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Factory")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fruit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fruit")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            f"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fruit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Client")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fruit")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Factory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"io.github.dunwu.spring.Apple"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"bean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bean"}},[t._v("#")]),t._v(" Bean")]),t._v(" "),a("h4",{attrs:{id:"什么是-spring-bean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-bean"}},[t._v("#")]),t._v(" 什么是 Spring Bean")]),t._v(" "),a("p",[t._v("在 Spring 中，构成应用程序主体由 Spring IoC 容器管理的对象称为 Bean。"),a("strong",[t._v("Bean 是由 Spring IoC 容器实例化、装配和管理的对象")]),t._v("。 Bean 以及它们之间的依赖关系反映在容器使用的配置元数据中。")]),t._v(" "),a("p",[t._v("Spring IoC 容器本身，并不能识别配置的元数据。为此，要将这些配置信息转为 Spring 能识别的格式——"),a("code",[t._v("BeanDefinition")]),t._v(" 对象。")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("BeanDefinition")]),t._v(" 是 Spring 中定义 Bean 的配置元信息接口")]),t._v("，它包含：")]),t._v(" "),a("ul",[a("li",[t._v("Bean 类名")]),t._v(" "),a("li",[t._v("Bean 行为配置元素，如：作用域、自动绑定的模式、生命周期回调等")]),t._v(" "),a("li",[t._v("其他 Bean 引用，也可称为合作者（Collaborators）或依赖（Dependencies）")]),t._v(" "),a("li",[t._v("配置设置，如 Bean 属性（Properties）")])]),t._v(" "),a("h4",{attrs:{id:"如何注册-spring-bean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何注册-spring-bean"}},[t._v("#")]),t._v(" 如何注册 Spring Bean")]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("BeanDefinition")]),t._v(" 和外部单例对象来注册。")]),t._v(" "),a("h4",{attrs:{id:"spring-提供了哪些配置方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-提供了哪些配置方式"}},[t._v("#")]),t._v(" spring 提供了哪些配置方式？")]),t._v(" "),a("ul",[a("li",[t._v("基于 xml 配置")])]),t._v(" "),a("p",[t._v("bean 所需的依赖项和服务在 XML 格式的配置文件中指定。这些配置文件通常包含许多 bean 定义和特定于应用程序的配置选项。它们通常以 bean 标签开头。例如：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("studentbean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("org.edureka.firstSpring.StudentBean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Edureka"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ul",[a("li",[t._v("基于注解配置")])]),t._v(" "),a("p",[t._v("您可以通过在相关的类，方法或字段声明上使用注解，将 bean 配置为组件类本身，而不是使用 XML 来描述 bean 装配。默认情况下，Spring 容器中未打开注解装配。因此，您需要在使用它之前在 Spring 配置文件中启用它。例如：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("beans")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("context:")]),t._v("annotation-config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- bean definitions go here --\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("beans")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ul",[a("li",[t._v("基于 Java API 配置")])]),t._v(" "),a("p",[t._v("Spring 的 Java 配置是通过使用 @Bean 和 @Configuration 来实现。")]),t._v(" "),a("ol",[a("li",[t._v("@Bean 注解扮演与 "),a("code",[t._v("<bean />")]),t._v(" 元素相同的角色。")]),t._v(" "),a("li",[t._v("@Configuration 类允许通过简单地调用同一个类中的其他 @Bean 方法来定义 bean 间依赖关系。")])]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StudentConfig")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StudentBean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myStudent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StudentBean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"spring-支持集中-bean-scope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-支持集中-bean-scope"}},[t._v("#")]),t._v(" spring 支持集中 bean scope？")]),t._v(" "),a("p",[t._v("Spring bean 支持 5 种 scope：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Singleton")]),t._v(" - 每个 Spring IoC 容器仅有一个单实例。")]),t._v(" "),a("li",[a("strong",[t._v("Prototype")]),t._v(" - 每次请求都会产生一个新的实例。")]),t._v(" "),a("li",[a("strong",[t._v("Request")]),t._v(" - 每一次 HTTP 请求都会产生一个新的实例，并且该 bean 仅在当前 HTTP 请求内有效。")]),t._v(" "),a("li",[a("strong",[t._v("Session")]),t._v(" - 每一次 HTTP 请求都会产生一个新的 bean，同时该 bean 仅在当前 HTTP session 内有效。")]),t._v(" "),a("li",[a("strong",[t._v("Global-session")]),t._v(" - 类似于标准的 HTTP Session 作用域，不过它仅仅在基于 portlet 的 web 应用中才有意义。Portlet 规范定义了全局 Session 的概念，它被所有构成某个 portlet web 应用的各种不同的 portlet 所共享。在 global session 作用域中定义的 bean 被限定于全局 portlet Session 的生命周期范围内。如果你在 web 中使用 global session 作用域来标识 bean，那么 web 会自动当成 session 类型来使用。")])]),t._v(" "),a("p",[t._v("仅当用户使用支持 Web 的 ApplicationContext 时，最后三个才可用。")]),t._v(" "),a("h4",{attrs:{id:"spring-bean-的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-的生命周期"}},[t._v("#")]),t._v(" Spring Bean 的生命周期")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20211201102734.png",alt:""}})]),t._v(" "),a("p",[t._v("spring bean 容器的生命周期如下：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Spring 对 Bean 进行实例化（相当于 new XXX()）")])]),t._v(" "),a("li",[a("p",[t._v("Spring 将值和引用注入到 Bean 对应的属性中")])]),t._v(" "),a("li",[a("p",[t._v("如果 Bean 实现了 "),a("code",[t._v("BeanNameAware")]),t._v(" 接口，Spring 将 Bean 的 ID 传递给 "),a("code",[t._v("setBeanName")]),t._v(" 方法")]),t._v(" "),a("ul",[a("li",[t._v("作用是通过 Bean 的引用来获得 Bean ID，一般业务中是很少有用到 Bean 的 ID 的")])])]),t._v(" "),a("li",[a("p",[t._v("如果 Bean 实现了 "),a("code",[t._v("BeanFactoryAware")]),t._v(" 接口，Spring 将调用 "),a("code",[t._v("setBeanDactory")]),t._v(" 方法，并把 "),a("code",[t._v("BeanFactory")]),t._v(" 容器实例作为参数传入。")]),t._v(" "),a("ul",[a("li",[t._v("作用是获取 Spring 容器，如 Bean 通过 Spring 容器发布事件等")])])]),t._v(" "),a("li",[a("p",[t._v("如果 Bean 实现了 "),a("code",[t._v("ApplicationContextAware")]),t._v(" 接口，Spring 容器将调用 "),a("code",[t._v("setApplicationContext")]),t._v(" 方法，把应用上下文作为参数传入")]),t._v(" "),a("ul",[a("li",[t._v("作用与 "),a("code",[t._v("BeanFactory")]),t._v(" 类似都是为了获取 Spring 容器，不同的是 Spring 容器在调用 "),a("code",[t._v("setApplicationContext")]),t._v(" 方法时会把它自己作为 "),a("code",[t._v("setApplicationContext")]),t._v(" 的参数传入，而 Spring 容器在调用 "),a("code",[t._v("setBeanFactory")]),t._v(" 前需要使用者自己指定（注入）"),a("code",[t._v("setBeanFactory")]),t._v(" 里的参数 "),a("code",[t._v("BeanFactory")])])])]),t._v(" "),a("li",[a("p",[t._v("如果 Bean 实现了 "),a("code",[t._v("BeanPostProcess")]),t._v(" 接口，Spring 将调用 "),a("code",[t._v("postProcessBeforeInitialization")]),t._v(" 方法")]),t._v(" "),a("ul",[a("li",[t._v("作用是在 Bean 实例创建成功后对其进行增强处理，如对 Bean 进行修改，增加某个功能")])])]),t._v(" "),a("li",[a("p",[t._v("如果 Bean 实现了 "),a("code",[t._v("InitializingBean")]),t._v(" 接口，Spring 将调用 "),a("code",[t._v("afterPropertiesSet")]),t._v(" 方法，作用与在配置文件中对 Bean 使用 "),a("code",[t._v("init-method")]),t._v(" 声明初始化的作用一样，都是在 Bean 的全部属性设置成功后执行的初始化方法。")])]),t._v(" "),a("li",[a("p",[t._v("如果 Bean 实现了 "),a("code",[t._v("BeanPostProcess")]),t._v(" 接口，Spring 将调用 "),a("code",[t._v("postProcessAfterInitialization")]),t._v(" 方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("postProcessBeforeInitialization")]),t._v(" 是在 Bean 初始化前执行的，而 "),a("code",[t._v("postProcessAfterInitialization")]),t._v(" 是在 Bean 初始化后执行的")])])]),t._v(" "),a("li",[a("p",[t._v("经过以上的工作后，Bean 将一直驻留在应用上下文中给应用使用，直到应用上下文被销毁")])]),t._v(" "),a("li",[a("p",[t._v("如果 Bean 实现了 "),a("code",[t._v("DispostbleBean")]),t._v(" 接口，Spring 将调用它的 "),a("code",[t._v("destory")]),t._v(" 方法，作用与在配置文件中对 Bean 使用 "),a("code",[t._v("destory-method")]),t._v(" 属性的作用一样，都是在 Bean 实例销毁前执行的方法。")])])]),t._v(" "),a("h4",{attrs:{id:"什么是-spring-的内部-bean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-的内部-bean"}},[t._v("#")]),t._v(" 什么是 spring 的内部 bean？")]),t._v(" "),a("p",[t._v("只有将 bean 用作另一个 bean 的属性时，才能将 bean 声明为内部 bean。为了定义 bean，Spring 的基于 XML 的配置元数据在 "),a("code",[t._v("<property>")]),t._v(" 或 "),a("code",[t._v("<constructor-arg>")]),t._v(" 中提供了 "),a("code",[t._v("<bean>")]),t._v(" 元素的使用。内部 bean 总是匿名的，它们总是作为原型。")]),t._v(" "),a("p",[t._v("例如，假设我们有一个 Student 类，其中引用了 Person 类。这里我们将只创建一个 Person 类实例并在 Student 中使用它。")]),t._v(" "),a("p",[t._v("Student.java")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Setters and Getters")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Setters and Getters")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("bean.xml")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[t._v('<bean id=“StudentBean" class="com.edureka.Student">\n    '),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--This is inner bean --\x3e")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("com.edureka.Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n            <property name="name" value=“Scott">'),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n            <property name="address" value=“Bangalore">'),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h4",{attrs:{id:"什么是-spring-装配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-装配"}},[t._v("#")]),t._v(" 什么是 spring 装配")]),t._v(" "),a("p",[t._v("当 bean 在 Spring 容器中组合在一起时，它被称为装配或 bean 装配。 Spring 容器需要知道需要什么 bean 以及容器应该如何使用依赖注入来将 bean 绑定在一起，同时装配 bean。")]),t._v(" "),a("h4",{attrs:{id:"自动装配有哪些方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动装配有哪些方式"}},[t._v("#")]),t._v(" 自动装配有哪些方式？")]),t._v(" "),a("p",[t._v("Spring 容器能够自动装配 bean。也就是说，可以通过检查 BeanFactory 的内容让 Spring 自动解析 bean 的协作者。")]),t._v(" "),a("p",[t._v("自动装配的不同模式：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("no")]),t._v(" - 这是默认设置，表示没有自动装配。应使用显式 bean 引用进行装配。")]),t._v(" "),a("li",[a("strong",[t._v("byName")]),t._v(" - 它根据 bean 的名称注入对象依赖项。它匹配并装配其属性与 XML 文件中由相同名称定义的 bean。")]),t._v(" "),a("li",[a("strong",[t._v("byType")]),t._v(" - 它根据类型注入对象依赖项。如果属性的类型与 XML 文件中的一个 bean 名称匹配，则匹配并装配属性。")]),t._v(" "),a("li",[a("strong",[t._v("构造器")]),t._v(" - 它通过调用类的构造器来注入依赖项。它有大量的参数。")]),t._v(" "),a("li",[a("strong",[t._v("autodetect")]),t._v(" - 首先容器尝试通过构造器使用 autowire 装配，如果不能，则尝试通过 byType 自动装配。")])]),t._v(" "),a("h4",{attrs:{id:"自动装配有什么局限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动装配有什么局限"}},[t._v("#")]),t._v(" 自动装配有什么局限？")]),t._v(" "),a("ul",[a("li",[t._v("覆盖的可能性 - 您始终可以使用 "),a("code",[t._v("<constructor-arg>")]),t._v(" 和 "),a("code",[t._v("<property>")]),t._v(" 设置指定依赖项，这将覆盖自动装配。")]),t._v(" "),a("li",[t._v("基本元数据类型 - 简单属性（如原数据类型，字符串和类）无法自动装配。")]),t._v(" "),a("li",[t._v("令人困惑的性质 - 总是喜欢使用明确的装配，因为自动装配不太精确。")])]),t._v(" "),a("h3",{attrs:{id:"aop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[t._v("#")]),t._v(" AOP")]),t._v(" "),a("h4",{attrs:{id:"什么是-aop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-aop"}},[t._v("#")]),t._v(" 什么是 AOP？")]),t._v(" "),a("p",[t._v("AOP(Aspect-Oriented Programming), 即 "),a("strong",[t._v("面向切面编程")]),t._v(", 它与 OOP( Object-Oriented Programming, 面向对象编程) 相辅相成, 提供了与 OOP 不同的抽象软件结构的视角.\n在 OOP 中, 我们以类(class)作为我们的基本单元, 而 AOP 中的基本单元是 "),a("strong",[t._v("Aspect(切面)")])]),t._v(" "),a("h4",{attrs:{id:"aop-中的-aspect、advice、pointcut、jointpoint-和-advice-参数分别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop-中的-aspect、advice、pointcut、jointpoint-和-advice-参数分别是什么"}},[t._v("#")]),t._v(" AOP 中的 Aspect、Advice、Pointcut、JointPoint 和 Advice 参数分别是什么？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/spring/core/spring-aop.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Aspect")]),t._v(" - Aspect 是一个实现交叉问题的类，例如事务管理。方面可以是配置的普通类，然后在 Spring Bean 配置文件中配置，或者我们可以使用 Spring AspectJ 支持使用 @Aspect 注解将类声明为 Aspect。")]),t._v(" "),a("li",[a("strong",[t._v("Advice")]),t._v(" - Advice 是针对特定 JoinPoint 采取的操作。在编程方面，它们是在应用程序中达到具有匹配切入点的特定 JoinPoint 时执行的方法。您可以将 Advice 视为 Spring 拦截器（Interceptor）或 Servlet 过滤器（filter）。")]),t._v(" "),a("li",[a("strong",[t._v("Advice Arguments")]),t._v(" - 我们可以在 advice 方法中传递参数。我们可以在切入点中使用 args() 表达式来应用于与参数模式匹配的任何方法。如果我们使用它，那么我们需要在确定参数类型的 advice 方法中使用相同的名称。")]),t._v(" "),a("li",[a("strong",[t._v("Pointcut")]),t._v(" - Pointcut 是与 JoinPoint 匹配的正则表达式，用于确定是否需要执行 Advice。 Pointcut 使用与 JoinPoint 匹配的不同类型的表达式。Spring 框架使用 AspectJ Pointcut 表达式语言来确定将应用通知方法的 JoinPoint。")]),t._v(" "),a("li",[a("strong",[t._v("JoinPoint")]),t._v(" - JoinPoint 是应用程序中的特定点，例如方法执行，异常处理，更改对象变量值等。在 Spring AOP 中，JoinPoint 始终是方法的执行器。")])]),t._v(" "),a("h4",{attrs:{id:"什么是通知-advice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是通知-advice"}},[t._v("#")]),t._v(" 什么是通知（Advice）？")]),t._v(" "),a("p",[t._v("特定 JoinPoint 处的 Aspect 所采取的动作称为 Advice。Spring AOP 使用一个 Advice 作为拦截器，在 JoinPoint “周围”维护一系列的拦截器。")]),t._v(" "),a("h4",{attrs:{id:"有哪些类型的通知-advice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有哪些类型的通知-advice"}},[t._v("#")]),t._v(" 有哪些类型的通知（Advice）？")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Before")]),t._v(" - 这些类型的 Advice 在 joinpoint 方法之前执行，并使用 @Before 注解标记进行配置。")]),t._v(" "),a("li",[a("strong",[t._v("After Returning")]),t._v(" - 这些类型的 Advice 在连接点方法正常执行后执行，并使用@AfterReturning 注解标记进行配置。")]),t._v(" "),a("li",[a("strong",[t._v("After Throwing")]),t._v(" - 这些类型的 Advice 仅在 joinpoint 方法通过抛出异常退出并使用 @AfterThrowing 注解标记配置时执行。")]),t._v(" "),a("li",[a("strong",[t._v("After (finally)")]),t._v(" - 这些类型的 Advice 在连接点方法之后执行，无论方法退出是正常还是异常返回，并使用 @After 注解标记进行配置。")]),t._v(" "),a("li",[a("strong",[t._v("Around")]),t._v(" - 这些类型的 Advice 在连接点之前和之后执行，并使用 @Around 注解标记进行配置。")])]),t._v(" "),a("h4",{attrs:{id:"指出在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指出在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处。"}},[t._v("#")]),t._v(" 指出在 spring aop 中 concern 和 cross-cutting concern 的不同之处。")]),t._v(" "),a("p",[t._v("concern 是我们想要在应用程序的特定模块中定义的行为。它可以定义为我们想要实现的功能。")]),t._v(" "),a("p",[t._v("cross-cutting concern 是一个适用于整个应用的行为，这会影响整个应用程序。例如，日志记录，安全性和数据传输是应用程序几乎每个模块都需要关注的问题，因此它们是跨领域的问题。")]),t._v(" "),a("h4",{attrs:{id:"aop-有哪些实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop-有哪些实现方式"}},[t._v("#")]),t._v(" AOP 有哪些实现方式？")]),t._v(" "),a("p",[t._v("实现 AOP 的技术，主要分为两大类：")]),t._v(" "),a("ul",[a("li",[t._v("静态代理 - 指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，因此也称为编译时增强；\n"),a("ul",[a("li",[t._v("编译时编织（特殊编译器实现）")]),t._v(" "),a("li",[t._v("类加载时编织（特殊的类加载器实现）。")])])]),t._v(" "),a("li",[t._v("动态代理 - 在运行时在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。\n"),a("ul",[a("li",[t._v("JDK 动态代理")]),t._v(" "),a("li",[t._v("CGLIB")])])])]),t._v(" "),a("h4",{attrs:{id:"spring-aop-and-aspectj-aop-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop-and-aspectj-aop-有什么区别"}},[t._v("#")]),t._v(" Spring AOP and AspectJ AOP 有什么区别？")]),t._v(" "),a("p",[t._v("Spring AOP 基于动态代理方式实现；AspectJ 基于静态代理方式实现。\nSpring AOP 仅支持方法级别的 PointCut；提供了完全的 AOP 支持，它还支持属性级别的 PointCut。")]),t._v(" "),a("h4",{attrs:{id:"如何理解-spring-中的代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何理解-spring-中的代理"}},[t._v("#")]),t._v(" 如何理解 Spring 中的代理？")]),t._v(" "),a("p",[t._v("将 Advice 应用于目标对象后创建的对象称为代理。在客户端对象的情况下，目标对象和代理对象是相同的。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Advice + Target Object = Proxy\n")])])]),a("h4",{attrs:{id:"什么是编织-weaving"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是编织-weaving"}},[t._v("#")]),t._v(" 什么是编织（Weaving）？")]),t._v(" "),a("p",[t._v("为了创建一个 advice 对象而链接一个 aspect 和其它应用类型或对象，称为编织（Weaving）。在 Spring AOP 中，编织在运行时执行。请参考下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3101171-cfaa92f0e4115b4a.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注解"}},[t._v("#")]),t._v(" 注解")]),t._v(" "),a("h3",{attrs:{id:"你用过哪些重要的-spring-注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#你用过哪些重要的-spring-注解"}},[t._v("#")]),t._v(" 你用过哪些重要的 Spring 注解？")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("@Controller")]),t._v(" - 用于 Spring MVC 项目中的控制器类。")]),t._v(" "),a("li",[a("strong",[t._v("@Service")]),t._v(" - 用于服务类。")]),t._v(" "),a("li",[a("strong",[t._v("@RequestMapping")]),t._v(" - 用于在控制器处理程序方法中配置 URI 映射。")]),t._v(" "),a("li",[a("strong",[t._v("@ResponseBody")]),t._v(" - 用于发送 Object 作为响应，通常用于发送 XML 或 JSON 数据作为响应。")]),t._v(" "),a("li",[a("strong",[t._v("@PathVariable")]),t._v(" - 用于将动态值从 URI 映射到处理程序方法参数。")]),t._v(" "),a("li",[a("strong",[t._v("@Autowired")]),t._v(" - 用于在 spring bean 中自动装配依赖项。")]),t._v(" "),a("li",[a("strong",[t._v("@Qualifier")]),t._v(" - 使用 @Autowired 注解，以避免在存在多个 bean 类型实例时出现混淆。")]),t._v(" "),a("li",[a("strong",[t._v("@Scope")]),t._v(" - 用于配置 spring bean 的范围。")]),t._v(" "),a("li",[a("strong",[t._v("@Configuration")]),t._v("，"),a("strong",[t._v("@ComponentScan")]),t._v(" 和 "),a("strong",[t._v("@Bean")]),t._v(" - 用于基于 java 的配置。")]),t._v(" "),a("li",[a("strong",[t._v("@Aspect")]),t._v("，"),a("strong",[t._v("@Before")]),t._v("，"),a("strong",[t._v("@After")]),t._v("，"),a("strong",[t._v("@Around")]),t._v("，"),a("strong",[t._v("@Pointcut")]),t._v(" - 用于切面编程（AOP）。")])]),t._v(" "),a("h3",{attrs:{id:"如何在-spring-中启动注解装配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何在-spring-中启动注解装配"}},[t._v("#")]),t._v(" 如何在 spring 中启动注解装配？")]),t._v(" "),a("p",[t._v("默认情况下，Spring 容器中未打开注解装配。因此，要使用基于注解装配，我们必须通过配置"),a("code",[t._v("<context：annotation-config />")]),t._v(" 元素在 Spring 配置文件中启用它。")]),t._v(" "),a("h3",{attrs:{id:"component-controller-repository-service-有何区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#component-controller-repository-service-有何区别"}},[t._v("#")]),t._v(" @Component, @Controller, @Repository, @Service 有何区别？")]),t._v(" "),a("ul",[a("li",[t._v("@Component：这将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。")]),t._v(" "),a("li",[t._v("@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IoC 容器中。")]),t._v(" "),a("li",[t._v("@Service：此注解是组件注解的特化。它不会对 @Component 注解提供任何其他行为。您可以在服务层类中使用 @Service 而不是 @Component，因为它以更好的方式指定了意图。")]),t._v(" "),a("li",[t._v("@Repository：这个注解是具有类似用途和功能的 @Component 注解的特化。它为 DAO 提供了额外的好处。它将 DAO 导入 IoC 容器，并使未经检查的异常有资格转换为 Spring DataAccessException。")])]),t._v(" "),a("h3",{attrs:{id:"required-注解有什么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#required-注解有什么用"}},[t._v("#")]),t._v(" @Required 注解有什么用？")]),t._v(" "),a("p",[t._v("@Required 应用于 bean 属性 setter 方法。此注解仅指示必须在配置时使用 bean 定义中的显式属性值或使用自动装配填充受影响的 bean 属性。如果尚未填充受影响的 bean 属性，则容器将抛出 BeanInitializationException。")]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Required")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"autowired-注解有什么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autowired-注解有什么用"}},[t._v("#")]),t._v(" @Autowired 注解有什么用？")]),t._v(" "),a("p",[t._v("@Autowired 可以更准确地控制应该在何处以及如何进行自动装配。此注解用于在 setter 方法，构造器，具有任意名称或多个参数的属性或方法上自动装配 bean。默认情况下，它是类型驱动的注入。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"qualifier-注解有什么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qualifier-注解有什么用"}},[t._v("#")]),t._v(" @Qualifier 注解有什么用？")]),t._v(" "),a("p",[t._v("当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier 注解和 @Autowired 通过指定应该装配哪个确切的 bean 来消除歧义。")]),t._v(" "),a("p",[t._v("例如，这里我们分别有两个类，Employee 和 EmpAccount。在 EmpAccount 中，使用@Qualifier 指定了必须装配 id 为 emp1 的 bean。")]),t._v(" "),a("p",[t._v("Employee.java")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("EmpAccount.java")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EmpAccount")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Qualifier")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("showName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("“"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ”"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"requestmapping-注解有什么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requestmapping-注解有什么用"}},[t._v("#")]),t._v(" @RequestMapping 注解有什么用？")]),t._v(" "),a("p",[t._v("@RequestMapping 注解用于将特定 HTTP 请求方法映射到将处理相应请求的控制器中的特定类/方法。此注解可应用于两个级别：")]),t._v(" "),a("ul",[a("li",[t._v("类级别：映射请求的 URL")]),t._v(" "),a("li",[t._v("方法级别：映射 URL 以及 HTTP 请求方法")])]),t._v(" "),a("h2",{attrs:{id:"数据篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据篇"}},[t._v("#")]),t._v(" 数据篇")]),t._v(" "),a("h3",{attrs:{id:"spring-dao-有什么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-dao-有什么用"}},[t._v("#")]),t._v(" spring DAO 有什么用？")]),t._v(" "),a("p",[t._v("Spring DAO 使得 JDBC，Hibernate 或 JDO 这样的数据访问技术更容易以一种统一的方式工作。这使得用户容易在持久性技术之间切换。它还允许您在编写代码时，无需考虑捕获每种技术不同的异常。")]),t._v(" "),a("h3",{attrs:{id:"列举-spring-dao-抛出的异常。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列举-spring-dao-抛出的异常。"}},[t._v("#")]),t._v(" 列举 Spring DAO 抛出的异常。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/spring/data-access/spring-data-access-exception.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"spring-jdbc-api-中存在哪些类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-jdbc-api-中存在哪些类"}},[t._v("#")]),t._v(" spring JDBC API 中存在哪些类？")]),t._v(" "),a("ul",[a("li",[t._v("JdbcTemplate")]),t._v(" "),a("li",[t._v("SimpleJdbcTemplate")]),t._v(" "),a("li",[t._v("NamedParameterJdbcTemplate")]),t._v(" "),a("li",[t._v("SimpleJdbcInsert")]),t._v(" "),a("li",[t._v("SimpleJdbcCall")])]),t._v(" "),a("h3",{attrs:{id:"使用-spring-访问-hibernate-的方法有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-spring-访问-hibernate-的方法有哪些"}},[t._v("#")]),t._v(" 使用 Spring 访问 Hibernate 的方法有哪些？")]),t._v(" "),a("p",[t._v("我们可以通过两种方式使用 Spring 访问 Hibernate：")]),t._v(" "),a("ol",[a("li",[t._v("使用 Hibernate 模板和回调进行控制反转")]),t._v(" "),a("li",[t._v("扩展 HibernateDAOSupport 并应用 AOP 拦截器节点")])]),t._v(" "),a("h3",{attrs:{id:"列举-spring-支持的事务管理类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列举-spring-支持的事务管理类型"}},[t._v("#")]),t._v(" 列举 spring 支持的事务管理类型")]),t._v(" "),a("p",[t._v("Spring 支持两种类型的事务管理：")]),t._v(" "),a("ol",[a("li",[t._v("程序化事务管理：在此过程中，在编程的帮助下管理事务。它为您提供极大的灵活性，但维护起来非常困难。")]),t._v(" "),a("li",[t._v("声明式事务管理：在此，事务管理与业务代码分离。仅使用注解或基于 XML 的配置来管理事务。")])]),t._v(" "),a("h3",{attrs:{id:"spring-支持哪些-orm-框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-支持哪些-orm-框架"}},[t._v("#")]),t._v(" spring 支持哪些 ORM 框架")]),t._v(" "),a("ul",[a("li",[t._v("Hibernate")]),t._v(" "),a("li",[t._v("iBatis")]),t._v(" "),a("li",[t._v("JPA")]),t._v(" "),a("li",[t._v("JDO")]),t._v(" "),a("li",[t._v("OJB")])]),t._v(" "),a("h2",{attrs:{id:"mvc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[t._v("#")]),t._v(" MVC")]),t._v(" "),a("h3",{attrs:{id:"spring-mvc-框架有什么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-框架有什么用"}},[t._v("#")]),t._v(" Spring MVC 框架有什么用？")]),t._v(" "),a("p",[t._v("Spring Web MVC 框架提供 "),a("strong",[t._v("模型-视图-控制器")]),t._v(" 架构和随时可用的组件，用于开发灵活且松散耦合的 Web 应用程序。 MVC 模式有助于分离应用程序的不同方面，如输入逻辑，业务逻辑和 UI 逻辑，同时在所有这些元素之间提供松散耦合。")]),t._v(" "),a("h3",{attrs:{id:"描述一下-dispatcherservlet-的工作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述一下-dispatcherservlet-的工作流程"}},[t._v("#")]),t._v(" 描述一下 DispatcherServlet 的工作流程")]),t._v(" "),a("p",[t._v("DispatcherServlet 的工作流程可以用一幅图来说明：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/spring/web/spring-dispatcher-servlet.png",alt:"img"}})]),t._v(" "),a("ol",[a("li",[t._v("向服务器发送 HTTP 请求，请求被前端控制器 "),a("code",[t._v("DispatcherServlet")]),t._v(" 捕获。")]),t._v(" "),a("li",[a("code",[t._v("DispatcherServlet")]),t._v(" 根据 "),a("strong",[a("code",[t._v("<servlet-name>-servlet.xml")])]),t._v(" 中的配置对请求的 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 "),a("code",[t._v("HandlerMapping")]),t._v(" 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以"),a("code",[t._v("HandlerExecutionChain")]),t._v(" 对象的形式返回。")]),t._v(" "),a("li",[a("code",[t._v("DispatcherServlet")]),t._v(" 根据获得的"),a("code",[t._v("Handler")]),t._v("，选择一个合适的 "),a("code",[t._v("HandlerAdapter")]),t._v("。（附注：如果成功获得"),a("code",[t._v("HandlerAdapter")]),t._v("后，此时将开始执行拦截器的 preHandler(...)方法）。")]),t._v(" "),a("li",[t._v("提取"),a("code",[t._v("Request")]),t._v("中的模型数据，填充"),a("code",[t._v("Handler")]),t._v("入参，开始执行"),a("code",[t._v("Handler")]),t._v("（"),a("code",[t._v("Controller")]),t._v(")。 在填充"),a("code",[t._v("Handler")]),t._v("的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：\n"),a("ul",[a("li",[t._v("HttpMessageConveter： 将请求消息（如 Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息。")]),t._v(" "),a("li",[t._v("数据转换：对请求消息进行数据转换。如"),a("code",[t._v("String")]),t._v("转换成"),a("code",[t._v("Integer")]),t._v("、"),a("code",[t._v("Double")]),t._v("等。")]),t._v(" "),a("li",[t._v("数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等。")]),t._v(" "),a("li",[t._v("数据验证： 验证数据的有效性（长度、格式等），验证结果存储到"),a("code",[t._v("BindingResult")]),t._v("或"),a("code",[t._v("Error")]),t._v("中。")])])]),t._v(" "),a("li",[t._v("Handler(Controller)执行完成后，向 "),a("code",[t._v("DispatcherServlet")]),t._v(" 返回一个 "),a("code",[t._v("ModelAndView")]),t._v(" 对象；")]),t._v(" "),a("li",[t._v("根据返回的"),a("code",[t._v("ModelAndView")]),t._v("，选择一个适合的 "),a("code",[t._v("ViewResolver")]),t._v("（必须是已经注册到 Spring 容器中的"),a("code",[t._v("ViewResolver")]),t._v(")返回给"),a("code",[t._v("DispatcherServlet")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("ViewResolver")]),t._v(" 结合"),a("code",[t._v("Model")]),t._v("和"),a("code",[t._v("View")]),t._v("，来渲染视图。")]),t._v(" "),a("li",[t._v("视图负责将渲染结果返回给客户端。")])]),t._v(" "),a("h3",{attrs:{id:"介绍一下-webapplicationcontext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下-webapplicationcontext"}},[t._v("#")]),t._v(" 介绍一下 WebApplicationContext")]),t._v(" "),a("p",[t._v("WebApplicationContext 是 ApplicationContext 的扩展。它具有 Web 应用程序所需的一些额外功能。它与普通的 ApplicationContext 在解析主题和决定与哪个 servlet 关联的能力方面有所不同。")]),t._v(" "),a("p",[t._v("（完）")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("👉 想学习更多 Spring 内容可以访问我的 Spring 教程："),a("strong",[a("a",{attrs:{href:"https://github.com/dunwu/spring-notes",target:"_blank",rel:"noopener noreferrer"}},[t._v("spring-notes"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.edureka.co/blog/interview-questions/spring-interview-questions/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Top 50 Spring Interview Questions You Must Prepare In 2018"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.journaldev.com/2696/spring-interview-questions-and-answers",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Interview Questions and Answers"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);