(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{444:function(r,e,t){"use strict";t.r(e);var v=t(14),o=Object(v.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"spring-类型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-类型转换"}},[r._v("#")]),r._v(" Spring 类型转换")]),r._v(" "),e("h2",{attrs:{id:"spring-类型转换的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-类型转换的实现"}},[r._v("#")]),r._v(" Spring 类型转换的实现")]),r._v(" "),e("ul",[e("li",[r._v("基于 JavaBeans 接口的类型转换实现\n"),e("ul",[e("li",[r._v("基于 java.beans.PropertyEditor 接口扩展")])])]),r._v(" "),e("li",[r._v("Spring 3.0+ 通用类型转换实现")])]),r._v(" "),e("h2",{attrs:{id:"使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[r._v("#")]),r._v(" 使用场景")]),r._v(" "),e("table",[e("thead",[e("tr",[e("th",[r._v("场景")]),r._v(" "),e("th",[r._v("基于 JavaBeans 接口的类型转换实现")]),r._v(" "),e("th",[r._v("Spring 3.0+ 通用类型转换实现")])])]),r._v(" "),e("tbody",[e("tr",[e("td",[r._v("数据绑定")]),r._v(" "),e("td",[r._v("YES")]),r._v(" "),e("td",[r._v("YES")])]),r._v(" "),e("tr",[e("td",[r._v("BeanWrapper")]),r._v(" "),e("td",[r._v("YES")]),r._v(" "),e("td",[r._v("YES")])]),r._v(" "),e("tr",[e("td",[r._v("Bean 属性类型转换")]),r._v(" "),e("td",[r._v("YES")]),r._v(" "),e("td",[r._v("YES")])]),r._v(" "),e("tr",[e("td",[r._v("外部化属性类型转换")]),r._v(" "),e("td",[r._v("NO")]),r._v(" "),e("td",[r._v("YES")])])])]),r._v(" "),e("h2",{attrs:{id:"基于-javabeans-接口的类型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于-javabeans-接口的类型转换"}},[r._v("#")]),r._v(" 基于 JavaBeans 接口的类型转换")]),r._v(" "),e("p",[r._v("核心职责")]),r._v(" "),e("ul",[e("li",[r._v("将 String 类型的内容转化为目标类型的对象")])]),r._v(" "),e("p",[r._v("扩展原理")]),r._v(" "),e("ul",[e("li",[r._v("Spring 框架将文本内容传递到 PropertyEditor 实现的 setAsText(String) 方法")]),r._v(" "),e("li",[r._v("PropertyEditor#setAsText(String) 方法实现将 String 类型转化为目标类型的对象")]),r._v(" "),e("li",[r._v("将目标类型的对象传入 PropertyEditor#setValue(Object) 方法")]),r._v(" "),e("li",[r._v("PropertyEditor#setValue(Object) 方法实现需要临时存储传入对象")]),r._v(" "),e("li",[r._v("Spring 框架将通过 PropertyEditor#getValue() 获取类型转换后的对象")])]),r._v(" "),e("h2",{attrs:{id:"spring-內建-propertyeditor-扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-內建-propertyeditor-扩展"}},[r._v("#")]),r._v(" Spring 內建 PropertyEditor 扩展")]),r._v(" "),e("p",[r._v("內建扩展（org.springframework.beans.propertyeditors 包下）")]),r._v(" "),e("table",[e("thead",[e("tr",[e("th",[r._v("转换场景")]),r._v(" "),e("th",[r._v("实现类")])])]),r._v(" "),e("tbody",[e("tr",[e("td",[r._v("String -> Byte 数组")]),r._v(" "),e("td",[r._v("org.springframework.beans.propertyeditors.ByteArrayPropertyEditor")])]),r._v(" "),e("tr",[e("td",[r._v("String -> Char")]),r._v(" "),e("td",[r._v("org.springframework.beans.propertyeditors.CharacterEditor")])]),r._v(" "),e("tr",[e("td",[r._v("String -> Char 数组")]),r._v(" "),e("td",[r._v("org.springframework.beans.propertyeditors.CharArrayPropertyEditor")])]),r._v(" "),e("tr",[e("td",[r._v("String -> Charset")]),r._v(" "),e("td",[r._v("org.springframework.beans.propertyeditors.CharsetEditor")])]),r._v(" "),e("tr",[e("td",[r._v("String -> Class")]),r._v(" "),e("td",[r._v("org.springframework.beans.propertyeditors.ClassEditor")])]),r._v(" "),e("tr",[e("td",[r._v("String -> Currency")]),r._v(" "),e("td",[r._v("org.springframework.beans.propertyeditors.CurrencyEditor")])]),r._v(" "),e("tr",[e("td"),r._v(" "),e("td")])])]),r._v(" "),e("h2",{attrs:{id:"自定义-propertyeditor-扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义-propertyeditor-扩展"}},[r._v("#")]),r._v(" 自定义 PropertyEditor 扩展")]),r._v(" "),e("p",[r._v("扩展模式")]),r._v(" "),e("ul",[e("li",[r._v("扩展 "),e("code",[r._v("java.beans.PropertyEditorSupport")]),r._v(" 类")])]),r._v(" "),e("p",[r._v("实现 "),e("code",[r._v("org.springframework.beans.PropertyEditorRegistrar")])]),r._v(" "),e("ul",[e("li",[r._v("实现 "),e("code",[r._v("registerCustomEditors(org.springframework.beans.PropertyEditorRegistry)")]),r._v(" 方法")]),r._v(" "),e("li",[r._v("将 "),e("code",[r._v("PropertyEditorRegistrar")]),r._v(" 实现注册为 Spring Bean")])]),r._v(" "),e("p",[r._v("向 "),e("code",[r._v("org.springframework.beans.PropertyEditorRegistry")]),r._v(" 注册自定义 PropertyEditor 实现")]),r._v(" "),e("ul",[e("li",[r._v("通用类型实现 "),e("code",[r._v("registerCustomEditor(Class<?>, PropertyEditor)")])]),r._v(" "),e("li",[r._v("Java Bean 属性类型实现："),e("code",[r._v("registerCustomEditor(Class<?>, String, PropertyEditor)")])])]),r._v(" "),e("h2",{attrs:{id:"spring-propertyeditor-的设计缺陷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-propertyeditor-的设计缺陷"}},[r._v("#")]),r._v(" Spring PropertyEditor 的设计缺陷")]),r._v(" "),e("p",[r._v("违反职责单一原则")]),r._v(" "),e("ul",[e("li",[e("code",[r._v("java.beans.PropertyEditor")]),r._v(" 接口职责太多，除了类型转换，还包括 Java Beans 事件和 Java GUI 交\n互")])]),r._v(" "),e("p",[e("code",[r._v("java.beans.PropertyEditor")]),r._v(" 实现类型局限")]),r._v(" "),e("ul",[e("li",[r._v("来源类型只能为 "),e("code",[r._v("java.lang.String")]),r._v(" 类型")])]),r._v(" "),e("p",[e("code",[r._v("java.beans.PropertyEditor")]),r._v(" 实现缺少类型安全")]),r._v(" "),e("ul",[e("li",[r._v("除了实现类命名可以表达语义，实现类无法感知目标转换类型")])]),r._v(" "),e("h2",{attrs:{id:"spring-3-通用类型转换接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-3-通用类型转换接口"}},[r._v("#")]),r._v(" Spring 3 通用类型转换接口")]),r._v(" "),e("p",[r._v("类型转换接口 - org.springframework.core.convert.converter.Converter<S,T>")]),r._v(" "),e("ul",[e("li",[r._v("泛型参数 S：来源类型，参数 T：目标类型")]),r._v(" "),e("li",[r._v("核心方法：T convert(S)")])]),r._v(" "),e("p",[r._v("通用类型转换接口 - org.springframework.core.convert.converter.GenericConverter")]),r._v(" "),e("ul",[e("li",[r._v("核心方法：convert(Object,TypeDescriptor,TypeDescriptor)")]),r._v(" "),e("li",[r._v("配对类型：org.springframework.core.convert.converter.GenericConverter.ConvertiblePair")]),r._v(" "),e("li",[r._v("类型描述：org.springframework.core.convert.TypeDescriptor")])]),r._v(" "),e("h2",{attrs:{id:"spring-內建类型转换器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-內建类型转换器"}},[r._v("#")]),r._v(" Spring 內建类型转换器")]),r._v(" "),e("p",[r._v("內建扩展")]),r._v(" "),e("table",[e("thead",[e("tr",[e("th",[r._v("转换场景")]),r._v(" "),e("th",[r._v("实现类所在包名（package）")])])]),r._v(" "),e("tbody",[e("tr",[e("td",[r._v("日期/时间相关")]),r._v(" "),e("td",[r._v("org.springframework.format.datetime")])]),r._v(" "),e("tr",[e("td",[r._v("Java 8 日期/时间相关")]),r._v(" "),e("td",[r._v("org.springframework.format.datetime.standard")])]),r._v(" "),e("tr",[e("td",[r._v("通用实现")]),r._v(" "),e("td",[r._v("org.springframework.core.convert.support")])])])]),r._v(" "),e("h2",{attrs:{id:"converter-接口的局限性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#converter-接口的局限性"}},[r._v("#")]),r._v(" Converter 接口的局限性")]),r._v(" "),e("p",[r._v("局限一：缺少 Source Type 和 Target Type 前置判断")]),r._v(" "),e("ul",[e("li",[r._v("应对：增加 org.springframework.core.convert.converter.ConditionalConverter 实现")])]),r._v(" "),e("p",[r._v("局限二：仅能转换单一的 Source Type 和 Target Type")]),r._v(" "),e("ul",[e("li",[r._v("应对：使用 org.springframework.core.convert.converter.GenericConverter 代替")])]),r._v(" "),e("h2",{attrs:{id:"genericconverter-接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#genericconverter-接口"}},[r._v("#")]),r._v(" GenericConverter 接口")]),r._v(" "),e("p",[e("code",[r._v("org.springframework.core.convert.converter.GenericConverter")])]),r._v(" "),e("table",[e("thead",[e("tr",[e("th",[r._v("核心要素")]),r._v(" "),e("th",[r._v("说明")])])]),r._v(" "),e("tbody",[e("tr",[e("td",[r._v("使用场景")]),r._v(" "),e("td",[r._v("用于“复合”类型转换场景，比如 Collection、Map、数组等")])]),r._v(" "),e("tr",[e("td",[r._v("转换范围")]),r._v(" "),e("td",[e("code",[r._v("Set<ConvertiblePair> getConvertibleTypes()")])])]),r._v(" "),e("tr",[e("td",[r._v("配对类型")]),r._v(" "),e("td",[e("code",[r._v("org.springframework.core.convert.converter.GenericConverter.ConvertiblePair")])])]),r._v(" "),e("tr",[e("td",[r._v("转换方法")]),r._v(" "),e("td",[e("code",[r._v("convert(Object,TypeDescriptor,TypeDescriptor)")])])]),r._v(" "),e("tr",[e("td",[r._v("类型描述")]),r._v(" "),e("td",[e("code",[r._v("org.springframework.core.convert.TypeDescriptor")])])])])]),r._v(" "),e("h2",{attrs:{id:"优化-genericconverter-接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化-genericconverter-接口"}},[r._v("#")]),r._v(" 优化 GenericConverter 接口")]),r._v(" "),e("p",[r._v("GenericConverter 局限性")]),r._v(" "),e("ul",[e("li",[r._v("缺少 Source Type 和 Target Type 前置判断")]),r._v(" "),e("li",[r._v("单一类型转换实现复杂")])]),r._v(" "),e("p",[r._v("GenericConverter 优化接口 - "),e("code",[r._v("ConditionalGenericConverter")])]),r._v(" "),e("ul",[e("li",[r._v("复合类型转换："),e("code",[r._v("org.springframework.core.convert.converter.GenericConverter")])]),r._v(" "),e("li",[r._v("类型条件判断："),e("code",[r._v("org.springframework.core.convert.converter.ConditionalConverter")])])]),r._v(" "),e("h2",{attrs:{id:"扩展-spring-类型转换器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展-spring-类型转换器"}},[r._v("#")]),r._v(" 扩展 Spring 类型转换器")]),r._v(" "),e("p",[r._v("实现转换器接口")]),r._v(" "),e("ul",[e("li",[e("code",[r._v("org.springframework.core.convert.converter.Converter")])]),r._v(" "),e("li",[e("code",[r._v("org.springframework.core.convert.converter.ConverterFactory")])]),r._v(" "),e("li",[e("code",[r._v("org.springframework.core.convert.converter.GenericConverter")])])]),r._v(" "),e("p",[r._v("注册转换器实现")]),r._v(" "),e("ul",[e("li",[r._v("通过 "),e("code",[r._v("ConversionServiceFactoryBean")]),r._v(" Spring Bean")]),r._v(" "),e("li",[r._v("通过 "),e("code",[r._v("org.springframework.core.convert.ConversionService API")])])]),r._v(" "),e("h2",{attrs:{id:"统一类型转换服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#统一类型转换服务"}},[r._v("#")]),r._v(" 统一类型转换服务")]),r._v(" "),e("p",[e("code",[r._v("org.springframework.core.convert.ConversionService")])]),r._v(" "),e("table",[e("thead",[e("tr",[e("th",[r._v("实现类型")]),r._v(" "),e("th",[r._v("说明")])])]),r._v(" "),e("tbody",[e("tr",[e("td",[e("code",[r._v("GenericConversionService")])]),r._v(" "),e("td",[r._v("通用 ConversionService 模板实现，不内置转化器实现")])]),r._v(" "),e("tr",[e("td",[e("code",[r._v("DefaultConversionService")])]),r._v(" "),e("td",[r._v("基础 ConversionService 实现，内置常用转化器实现")])]),r._v(" "),e("tr",[e("td",[e("code",[r._v("FormattingConversionService")])]),r._v(" "),e("td",[r._v("通用 Formatter + GenericConversionService 实现，不内置转化器和 Formatter 实现")])]),r._v(" "),e("tr",[e("td",[e("code",[r._v("DefaultFormattingConversionService")])]),r._v(" "),e("td",[r._v("DefaultConversionService + 格式化 实现（如：JSR-354 Money & Currency, JSR-310 Date-Time）")])])])]),r._v(" "),e("h2",{attrs:{id:"conversionservice-作为依赖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#conversionservice-作为依赖"}},[r._v("#")]),r._v(" ConversionService 作为依赖")]),r._v(" "),e("p",[r._v("类型转换器底层接口 - "),e("code",[r._v("org.springframework.beans.TypeConverter")])]),r._v(" "),e("ul",[e("li",[r._v("起始版本：Spring 2.0")]),r._v(" "),e("li",[r._v("核心方法 - convertIfNecessary 重载方法")]),r._v(" "),e("li",[r._v("抽象实现 - "),e("code",[r._v("org.springframework.beans.TypeConverterSupport")])]),r._v(" "),e("li",[r._v("简单实现 - "),e("code",[r._v("org.springframework.beans.SimpleTypeConverter")])])]),r._v(" "),e("p",[r._v("类型转换器底层抽象实现 - "),e("code",[r._v("org.springframework.beans.TypeConverterSupport")])]),r._v(" "),e("ul",[e("li",[r._v("实现接口 - "),e("code",[r._v("org.springframework.beans.TypeConverter")])]),r._v(" "),e("li",[r._v("扩展实现 - "),e("code",[r._v("org.springframework.beans.PropertyEditorRegistrySupport")])]),r._v(" "),e("li",[r._v("委派实现 - "),e("code",[r._v("org.springframework.beans.TypeConverterDelegate")])])]),r._v(" "),e("p",[r._v("类型转换器底层委派实现 - "),e("code",[r._v("org.springframework.beans.TypeConverterDelegate")])]),r._v(" "),e("ul",[e("li",[r._v("构造来源 - "),e("code",[r._v("org.springframework.beans.AbstractNestablePropertyAccessor")]),r._v(" 实现\n"),e("ul",[e("li",[e("code",[r._v("org.springframework.beans.BeanWrapperImpl")])])])]),r._v(" "),e("li",[r._v("依赖 - "),e("code",[r._v("java.beans.PropertyEditor")]),r._v(" 实现\n"),e("ul",[e("li",[r._v("默认內建实现 - "),e("code",[r._v("PropertyEditorRegistrySupport#registerDefaultEditors")])])])]),r._v(" "),e("li",[r._v("可选依赖 - "),e("code",[r._v("org.springframework.core.convert.ConversionService")]),r._v(" 实现")])]),r._v(" "),e("h2",{attrs:{id:"问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[r._v("#")]),r._v(" 问题")]),r._v(" "),e("p",[e("strong",[r._v("Spring 类型转换实现有哪些")]),r._v("？")]),r._v(" "),e("ul",[e("li",[r._v("基于 JavaBeans PropertyEditor 接口实现")]),r._v(" "),e("li",[r._v("Spring 3.0+ 通用类型转换实现")])]),r._v(" "),e("p",[e("strong",[r._v("Spring 类型转换器接口有哪些")]),r._v("？")]),r._v(" "),e("ul",[e("li",[r._v("类型转换接口 - "),e("code",[r._v("org.springframework.core.convert.converter.Converter")])]),r._v(" "),e("li",[r._v("通用类型转换接口 - "),e("code",[r._v("org.springframework.core.convert.converter.GenericConverter")])]),r._v(" "),e("li",[r._v("类型条件接口 - "),e("code",[r._v("org.springframework.core.convert.converter.ConditionalConverter")])]),r._v(" "),e("li",[r._v("综合类型转换接口 - "),e("code",[r._v("org.springframework.core.convert.converter.ConditionalGenericConverter")])])]),r._v(" "),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[r._v("#")]),r._v(" 参考资料")]),r._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring 官方文档之 Core Technologies"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://time.geekbang.org/course/intro/265",target:"_blank",rel:"noopener noreferrer"}},[r._v("《小马哥讲 Spring 核心编程思想》"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=o.exports}}]);