(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{439:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"spring-aop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop"}},[t._v("#")]),t._v(" Spring AOP")]),t._v(" "),a("h2",{attrs:{id:"aop-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop-概念"}},[t._v("#")]),t._v(" AOP 概念")]),t._v(" "),a("h3",{attrs:{id:"什么是-aop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-aop"}},[t._v("#")]),t._v(" 什么是 AOP")]),t._v(" "),a("p",[t._v("AOP(Aspect-Oriented Programming，即 "),a("strong",[t._v("面向切面编程")]),t._v(")与 OOP( Object-Oriented Programming，面向对象编程) 相辅相成，提供了与 OOP 不同的抽象软件结构的视角。")]),t._v(" "),a("p",[t._v("在 OOP 中，我们以类(class)作为我们的基本单元，而 AOP 中的基本单元是 "),a("strong",[t._v("Aspect(切面)")])]),t._v(" "),a("h3",{attrs:{id:"术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#术语"}},[t._v("#")]),t._v(" 术语")]),t._v(" "),a("h4",{attrs:{id:"aspect-切面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aspect-切面"}},[t._v("#")]),t._v(" Aspect(切面)")]),t._v(" "),a("p",[a("code",[t._v("aspect")]),t._v(" 由 "),a("code",[t._v("pointcount")]),t._v(" 和 "),a("code",[t._v("advice")]),t._v(" 组成, 它既包含了横切逻辑的定义, 也包括了连接点的定义. Spring AOP 就是负责实施切面的框架, 它将切面所定义的横切逻辑织入到切面所指定的连接点中.\nAOP 的工作重心在于如何将增强织入目标对象的连接点上, 这里包含两个工作:")]),t._v(" "),a("ol",[a("li",[t._v("如何通过 pointcut 和 advice 定位到特定的 joinpoint 上")]),t._v(" "),a("li",[t._v("如何在 advice 中编写切面代码.")])]),t._v(" "),a("p",[a("strong",[t._v("可以简单地认为, 使用 @Aspect 注解的类就是切面.")])]),t._v(" "),a("h4",{attrs:{id:"advice-增强"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advice-增强"}},[t._v("#")]),t._v(" advice(增强)")]),t._v(" "),a("p",[t._v("由 aspect 添加到特定的 join point(即满足 point cut 规则的 join point) 的一段代码.\n许多 AOP 框架, 包括 Spring AOP, 会将 advice 模拟为一个拦截器(interceptor), 并且在 join point 上维护多个 advice, 进行层层拦截.\n例如 HTTP 鉴权的实现, 我们可以为每个使用 RequestMapping 标注的方法织入 advice, 当 HTTP 请求到来时, 首先进入到 advice 代码中, 在这里我们可以分析这个 HTTP 请求是否有相应的权限, 如果有, 则执行 Controller, 如果没有, 则抛出异常. 这里的 advice 就扮演着鉴权拦截器的角色了.")]),t._v(" "),a("h4",{attrs:{id:"连接点-join-point"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接点-join-point"}},[t._v("#")]),t._v(" 连接点(join point)")]),t._v(" "),a("blockquote",[a("p",[t._v("a point during the execution of a program, such as the execution of a method or the handling of an exception. In Spring AOP, a join point always represents a method execution.")])]),t._v(" "),a("p",[t._v("程序运行中的一些时间点, 例如一个方法的执行, 或者是一个异常的处理.\n"),a("code",[t._v("在 Spring AOP 中, join point 总是方法的执行点, 即只有方法连接点.")])]),t._v(" "),a("h4",{attrs:{id:"切点-point-cut"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切点-point-cut"}},[t._v("#")]),t._v(" 切点(point cut)")]),t._v(" "),a("p",[t._v("匹配 join point 的谓词(a predicate that matches join points).\nAdvice 是和特定的 point cut 关联的, 并且在 point cut 相匹配的 join point 中执行.\n"),a("code",[t._v("在 Spring 中, 所有的方法都可以认为是 joinpoint, 但是我们并不希望在所有的方法上都添加 Advice, 而 pointcut 的作用就是提供一组规则(使用 AspectJ pointcut expression language 来描述) 来匹配joinpoint, 给满足规则的 joinpoint 添加 Advice.")])]),t._v(" "),a("h4",{attrs:{id:"关于-join-point-和-point-cut-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于-join-point-和-point-cut-的区别"}},[t._v("#")]),t._v(" 关于 join point 和 point cut 的区别")]),t._v(" "),a("p",[t._v("在 Spring AOP 中, 所有的方法执行都是 join point. 而 point cut 是一个描述信息, 它修饰的是 join point, 通过 point cut, 我们就可以确定哪些 join point 可以被织入 Advice. 因此 join point 和 point cut 本质上就是两个不同纬度上的东西.\n"),a("code",[t._v("advice 是在 join point 上执行的, 而 point cut 规定了哪些 join point 可以执行哪些 advice")])]),t._v(" "),a("h4",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" introduction")]),t._v(" "),a("p",[t._v("为一个类型添加额外的方法或字段. Spring AOP 允许我们为 "),a("code",[t._v("目标对象")]),t._v(" 引入新的接口(和对应的实现). 例如我们可以使用 introduction 来为一个 bean 实现 IsModified 接口, 并以此来简化 caching 的实现.")]),t._v(" "),a("h4",{attrs:{id:"目标对象-target"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目标对象-target"}},[t._v("#")]),t._v(" 目标对象(Target)")]),t._v(" "),a("p",[t._v("织入 advice 的目标对象. 目标对象也被称为 "),a("code",[t._v("advised object")]),t._v(".\n"),a("code",[t._v("因为 Spring AOP 使用运行时代理的方式来实现 aspect, 因此 adviced object 总是一个代理对象(proxied object)")]),t._v(" "),a("code",[t._v("注意, adviced object 指的不是原来的类, 而是织入 advice 后所产生的代理类.")])]),t._v(" "),a("h4",{attrs:{id:"aop-proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop-proxy"}},[t._v("#")]),t._v(" AOP proxy")]),t._v(" "),a("p",[t._v("一个类被 AOP 织入 advice, 就会产生一个结果类, 它是融合了原类和增强逻辑的代理类.\n在 Spring AOP 中, 一个 AOP 代理是一个 JDK 动态代理对象或 CGLIB 代理对象.")]),t._v(" "),a("h4",{attrs:{id:"织入-weaving"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#织入-weaving"}},[t._v("#")]),t._v(" 织入(Weaving)")]),t._v(" "),a("p",[t._v("将 aspect 和其他对象连接起来, 并创建 adviced object 的过程.\n根据不同的实现技术, AOP 织入有三种方式:")]),t._v(" "),a("ul",[a("li",[t._v("编译器织入, 这要求有特殊的 Java 编译器.")]),t._v(" "),a("li",[t._v("类装载期织入, 这需要有特殊的类装载器.")]),t._v(" "),a("li",[t._v("动态代理织入, 在运行期为目标类添加增强(Advice)生成子类的方式.\nSpring 采用动态代理织入, 而 AspectJ 采用编译器织入和类装载期织入.")])]),t._v(" "),a("h3",{attrs:{id:"advice-的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advice-的类型"}},[t._v("#")]),t._v(" advice 的类型")]),t._v(" "),a("ul",[a("li",[t._v("before advice, 在 join point 前被执行的 advice. 虽然 before advice 是在 join point 前被执行, 但是它并不能够阻止 join point 的执行, 除非发生了异常(即我们在 before advice 代码中, 不能人为地决定是否继续执行 join point 中的代码)")]),t._v(" "),a("li",[t._v("after return advice, 在一个 join point 正常返回后执行的 advice")]),t._v(" "),a("li",[t._v("after throwing advice, 当一个 join point 抛出异常后执行的 advice")]),t._v(" "),a("li",[t._v("after(final) advice, 无论一个 join point 是正常退出还是发生了异常, 都会被执行的 advice.")]),t._v(" "),a("li",[t._v("around advice, 在 join point 前和 joint point 退出后都执行的 advice. 这个是最常用的 advice.")])]),t._v(" "),a("h3",{attrs:{id:"关于-aop-proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于-aop-proxy"}},[t._v("#")]),t._v(" 关于 AOP Proxy")]),t._v(" "),a("p",[t._v("Spring AOP 默认使用标准的 JDK 动态代理(dynamic proxy)技术来实现 AOP 代理, 通过它, 我们可以为任意的接口实现代理.\n"),a("code",[t._v("如果需要为一个类实现代理, 那么可以使用 CGLIB 代理.")]),t._v(" 当一个业务逻辑对象没有实现接口时, 那么 Spring AOP 就默认使用 CGLIB 来作为 AOP 代理了. 即如果我们需要为一个方法织入 advice, 但是这个方法不是一个接口所提供的方法, 则此时 Spring AOP 会使用 CGLIB 来实现动态代理. 鉴于此, Spring AOP 建议基于接口编程, 对接口进行 AOP 而不是类.")]),t._v(" "),a("h3",{attrs:{id:"彻底理解-aspect-join-point-point-cut-advice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#彻底理解-aspect-join-point-point-cut-advice"}},[t._v("#")]),t._v(" 彻底理解 aspect, join point, point cut, advice")]),t._v(" "),a("p",[t._v("看完了上面的理论部分知识, 我相信还是会有不少朋友感觉到 AOP 的概念还是很模糊, 对 AOP 中的各种概念理解的还不是很透彻. 其实这很正常, 因为 AOP 中的概念是在是太多了, 我当时也是花了老大劲才梳理清楚的.\n下面我以一个简单的例子来比喻一下 AOP 中 aspect, jointpoint, pointcut 与 advice 之间的关系.")]),t._v(" "),a("p",[t._v("让我们来假设一下, 从前有一个叫爪哇的小县城, 在一个月黑风高的晚上, 这个县城中发生了命案. 作案的凶手十分狡猾, 现场没有留下什么有价值的线索. 不过万幸的是, 刚从隔壁回来的老王恰好在这时候无意中发现了凶手行凶的过程, 但是由于天色已晚, 加上凶手蒙着面, 老王并没有看清凶手的面目, 只知道凶手是个男性, 身高约七尺五寸. 爪哇县的县令根据老王的描述, 对守门的士兵下命令说: 凡是发现有身高七尺五寸的男性, 都要抓过来审问. 士兵当然不敢违背县令的命令, 只好把进出城的所有符合条件的人都抓了起来.")]),t._v(" "),a("p",[t._v("来让我们看一下上面的一个小故事和 AOP 到底有什么对应关系.\n首先我们知道, 在 Spring AOP 中 join point 指代的是所有方法的执行点, 而 point cut 是一个描述信息, 它修饰的是 join point, 通过 point cut, 我们就可以确定哪些 join point 可以被织入 Advice. 对应到我们在上面举的例子, 我们可以做一个简单的类比, join point 就相当于 "),a("strong",[t._v("爪哇的小县城里的百姓")]),t._v(", point cut 就相当于 "),a("strong",[t._v("老王所做的指控, 即凶手是个男性, 身高约七尺五寸")]),t._v(", 而 advice 则是施加在符合老王所描述的嫌疑人的动作: "),a("strong",[t._v("抓过来审问")]),t._v(".\n为什么可以这样类比呢?")]),t._v(" "),a("ul",[a("li",[t._v("join point --\x3e 爪哇的小县城里的百姓: 因为根据定义, join point 是所有可能被织入 advice 的候选的点, 在 Spring AOP 中, 则可以认为所有方法执行点都是 join point. 而在我们上面的例子中, 命案发生在小县城中, 按理说在此县城中的所有人都有可能是嫌疑人.")]),t._v(" "),a("li",[t._v("point cut --\x3e 男性, 身高约七尺五寸: 我们知道, 所有的方法(joint point) 都可以织入 advice, 但是我们并不希望在所有方法上都织入 advice, 而 pointcut 的作用就是提供一组规则来匹配 joinpoint, 给满足规则的 joinpoint 添加 advice. 同理, 对于县令来说, 他再昏庸, 也知道不能把县城中的所有百姓都抓起来审问, 而是根据"),a("code",[t._v("凶手是个男性, 身高约七尺五寸")]),t._v(", 把符合条件的人抓起来. 在这里"),a("code",[t._v("凶手是个男性, 身高约七尺五寸")]),t._v(" 就是一个修饰谓语, 它限定了凶手的范围, 满足此修饰规则的百姓都是嫌疑人, 都需要抓起来审问.")]),t._v(" "),a("li",[t._v("advice --\x3e 抓过来审问, advice 是一个动作, 即一段 Java 代码, 这段 Java 代码是作用于 point cut 所限定的那些 join point 上的. 同理, 对比到我们的例子中, "),a("code",[t._v("抓过来审问")]),t._v(" 这个动作就是对作用于那些满足 "),a("code",[t._v("男性, 身高约七尺五寸")]),t._v(" 的"),a("code",[t._v("爪哇的小县城里的百姓")]),t._v(".")]),t._v(" "),a("li",[t._v("aspect: aspect 是 point cut 与 advice 的组合, 因此在这里我们就可以类比: "),a("strong",[t._v('"根据老王的线索, 凡是发现有身高七尺五寸的男性, 都要抓过来审问"')]),t._v(" 这一整个动作可以被认为是一个 aspect.")])]),t._v(" "),a("p",[t._v("或则我们也可以从语法的角度来简单类比一下. 我们在学英语时, 经常会接触什么 "),a("code",[t._v("定语")]),t._v(", "),a("code",[t._v("被动句")]),t._v(" 之类的概念, 那么可以做一个不严谨的类比, 即 "),a("code",[t._v("joinpoint")]),t._v(" 可以认为是一个 "),a("code",[t._v("宾语")]),t._v(", 而 "),a("code",[t._v("pointcut")]),t._v(" 则可以类比为修饰 "),a("code",[t._v("joinpoint")]),t._v(" 的定语, 那么整个 "),a("code",[t._v("aspect")]),t._v(" 就可以描述为: "),a("code",[t._v("满足 pointcut 规则的 joinpoint 会被添加相应的 advice 操作.")])]),t._v(" "),a("h2",{attrs:{id:"aspectj-支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aspectj-支持"}},[t._v("#")]),t._v(" @AspectJ 支持")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("@AspectJ")])]),t._v(" 是一种使用 Java 注解来实现 AOP 的编码风格。")]),t._v(" "),a("p",[t._v("@AspectJ 风格的 AOP 是 AspectJ Project 在 AspectJ 5 中引入的, 并且 Spring 也支持 @AspectJ 的 AOP 风格.")]),t._v(" "),a("h3",{attrs:{id:"使能-aspectj-支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使能-aspectj-支持"}},[t._v("#")]),t._v(" 使能 @AspectJ 支持")]),t._v(" "),a("p",[t._v("@AspectJ 可以以 XML 的方式或以注解的方式来使能, 并且不论以哪种方式使能@ASpectJ, 我们都必须保证 aspectjweaver.jar 在 classpath 中.")]),t._v(" "),a("h4",{attrs:{id:"使用-java-configuration-方式使能-aspectj"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-java-configuration-方式使能-aspectj"}},[t._v("#")]),t._v(" 使用 Java Configuration 方式使能@AspectJ")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableAspectJAutoProxy")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AppConfig")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"使用-xml-方式使能-aspectj"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-xml-方式使能-aspectj"}},[t._v("#")]),t._v(" 使用 XML 方式使能@AspectJ")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<aop:aspectj-autoproxy/>\n")])])]),a("h3",{attrs:{id:"定义-aspect-切面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义-aspect-切面"}},[t._v("#")]),t._v(" 定义 aspect(切面)")]),t._v(" "),a("p",[t._v("当使用注解 "),a("strong",[t._v("@Aspect")]),t._v(" 标注一个 Bean 后, 那么 Spring 框架会自动收集这些 Bean, 并添加到 Spring AOP 中, 例如:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Aspect")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("注意, 仅仅使用@Aspect 注解, 并不能将一个 Java 对象转换为 Bean, 因此我们还需要使用类似 @Component 之类的注解.")]),t._v(" "),a("code",[t._v("注意, 如果一个 类被@Aspect 标注, 则这个类就不能是其他 aspect 的 **advised object** 了, 因为使用 @Aspect 后, 这个类就会被排除在 auto-proxying 机制之外.")])]),t._v(" "),a("h3",{attrs:{id:"声明-pointcut"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明-pointcut"}},[t._v("#")]),t._v(" 声明 pointcut")]),t._v(" "),a("p",[t._v("一个 pointcut 的声明由两部分组成:")]),t._v(" "),a("ul",[a("li",[t._v("一个方法签名, 包括方法名和相关参数")]),t._v(" "),a("li",[t._v("一个 pointcut 表达式, 用来指定哪些方法执行是我们感兴趣的(即因此可以织入 advice).")])]),t._v(" "),a("p",[t._v("在@AspectJ 风格的 AOP 中, 我们使用一个方法来描述 pointcut, 即:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Pointcut")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"execution(* com.xys.service.UserService.*(..))"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 切点表达式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dataAccessOperation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 切点前面")]),t._v("\n")])])]),a("p",[a("code",[t._v("这个方法必须无返回值.")]),t._v(" "),a("code",[t._v("这个方法本身就是 pointcut signature, pointcut 表达式使用@Pointcut 注解指定.")]),t._v("\n上面我们简单地定义了一个 pointcut, 这个 pointcut 所描述的是: 匹配所有在包 "),a("strong",[t._v("com.xys.service.UserService")]),t._v(" 下的所有方法的执行.")]),t._v(" "),a("h4",{attrs:{id:"切点标志符-designator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切点标志符-designator"}},[t._v("#")]),t._v(" 切点标志符(designator)")]),t._v(" "),a("p",[t._v('AspectJ5 的切点表达式由标志符(designator)和操作参数组成. 如 "execution(* greetTo(..))" 的切点表达式, **execution** 就是 标志符, 而圆括号里的 *****greetTo(..) 就是操作参数')]),t._v(" "),a("h5",{attrs:{id:"execution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#execution"}},[t._v("#")]),t._v(" execution")]),t._v(" "),a("p",[t._v('匹配 join point 的执行, 例如 "execution(* hello(..))" 表示匹配所有目标类中的 hello() 方法. 这个是最基本的 pointcut 标志符.')]),t._v(" "),a("h5",{attrs:{id:"within"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#within"}},[t._v("#")]),t._v(" within")]),t._v(" "),a("p",[t._v("匹配特定包下的所有 join point, 例如 "),a("code",[t._v("within(com.xys.*)")]),t._v(" 表示 com.xys 包中的所有连接点, 即包中的所有类的所有方法. 而"),a("code",[t._v("within(com.xys.service.*Service)")]),t._v(" 表示在 com.xys.service 包中所有以 Service 结尾的类的所有的连接点.")]),t._v(" "),a("h5",{attrs:{id:"this-与-target"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-与-target"}},[t._v("#")]),t._v(" this 与 target")]),t._v(" "),a("p",[t._v("this 的作用是匹配一个 bean, 这个 bean(Spring AOP proxy) 是一个给定类型的实例(instance of). 而 target 匹配的是一个目标对象(target object, 即需要织入 advice 的原始的类), 此对象是一个给定类型的实例(instance of).")]),t._v(" "),a("h5",{attrs:{id:"bean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bean"}},[t._v("#")]),t._v(" bean")]),t._v(" "),a("p",[t._v("匹配 bean 名字为指定值的 bean 下的所有方法, 例如:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("bean(*Service) // 匹配名字后缀为 Service 的 bean 下的所有方法\nbean(myService) // 匹配名字为 myService 的 bean 下的所有方法\n")])])]),a("h5",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args"}},[t._v("#")]),t._v(" args")]),t._v(" "),a("p",[t._v("匹配参数满足要求的的方法.\n例如:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Pointcut")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"within(com.xys.demo2.*)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pointcut2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Before")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pointcut2()  &&  args(name)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    logger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"---page: {}---"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NormalService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Logger")]),t._v(" logger "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LoggerFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLogger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("someMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        logger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"---NormalService: someMethod invoked---"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        logger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"---NormalService: test invoked---"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"服务一切正常"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("当 NormalService.test 执行时, 则 advice "),a("code",[t._v("doSomething")]),t._v(" 就会执行, test 方法的参数 name 就会传递到 "),a("code",[t._v("doSomething")]),t._v(" 中.")]),t._v(" "),a("p",[t._v("常用例子:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配只有一个参数 name 的方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Before")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aspectMethod()  &&  args(name)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配第一个参数为 name 的方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Before")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aspectMethod()  &&  args(name, ..)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配第二个参数为 name 的方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Before")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aspectMethod()  &&  args(*, name, ..)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h5",{attrs:{id:"annotation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#annotation"}},[t._v("#")]),t._v(" @annotation")]),t._v(" "),a("p",[t._v("匹配由指定注解所标注的方法, 例如:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Pointcut")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@annotation(com.xys.demo1.AuthChecker)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pointcut")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("则匹配由注解 "),a("code",[t._v("AuthChecker")]),t._v(" 所标注的方法.")]),t._v(" "),a("h4",{attrs:{id:"常见的切点表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的切点表达式"}},[t._v("#")]),t._v(" 常见的切点表达式")]),t._v(" "),a("h5",{attrs:{id:"匹配方法签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配方法签名"}},[t._v("#")]),t._v(" 匹配方法签名")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 匹配指定包中的所有的方法\nexecution(* com.xys.service.*(..))\n\n// 匹配当前包中的指定类的所有方法\nexecution(* UserService.*(..))\n\n// 匹配指定包中的所有 public 方法\nexecution(public * com.xys.service.*(..))\n\n// 匹配指定包中的所有 public 方法, 并且返回值是 int 类型的方法\nexecution(public int com.xys.service.*(..))\n\n// 匹配指定包中的所有 public 方法, 并且第一个参数是 String, 返回值是 int 类型的方法\nexecution(public int com.xys.service.*(String name, ..))\n")])])]),a("h5",{attrs:{id:"匹配类型签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配类型签名"}},[t._v("#")]),t._v(" 匹配类型签名")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 匹配指定包中的所有的方法, 但不包括子包\nwithin(com.xys.service.*)\n\n// 匹配指定包中的所有的方法, 包括子包\nwithin(com.xys.service..*)\n\n// 匹配当前包中的指定类中的方法\nwithin(UserService)\n\n\n// 匹配一个接口的所有实现类中的实现的方法\nwithin(UserDao+)\n")])])]),a("h5",{attrs:{id:"匹配-bean-名字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配-bean-名字"}},[t._v("#")]),t._v(" 匹配 Bean 名字")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 匹配以指定名字结尾的 Bean 中的所有方法\nbean(*Service)\n")])])]),a("h5",{attrs:{id:"切点表达式组合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切点表达式组合"}},[t._v("#")]),t._v(" 切点表达式组合")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 匹配以 Service 或 ServiceImpl 结尾的 bean\nbean(*Service || *ServiceImpl)\n\n// 匹配名字以 Service 结尾, 并且在包 com.xys.service 中的 bean\nbean(*Service) && within(com.xys.service.*)\n")])])]),a("h3",{attrs:{id:"声明-advice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明-advice"}},[t._v("#")]),t._v(" 声明 advice")]),t._v(" "),a("p",[t._v("advice 是和一个 pointcut 表达式关联在一起的, 并且会在匹配的 join point 的方法执行的前/后/周围 运行. "),a("code",[t._v("pointcut 表达式可以是简单的一个 pointcut 名字的引用, 或者是完整的 pointcut 表达式")]),t._v(".\n下面我们以几个简单的 advice 为例子, 来看一下一个 advice 是如何声明的.")]),t._v(" "),a("h4",{attrs:{id:"before-advice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#before-advice"}},[t._v("#")]),t._v(" Before advice")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @author xiongyongshun\n * @version 1.0\n * @created 16/9/9 13:13\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Aspect")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeforeAspectTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义一个 Pointcut, 使用 切点表达式函数 来描述对哪些 Join point 使用 advise.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Pointcut")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"execution(* com.xys.service.UserService.*(..))"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dataAccessOperation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Aspect")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AdviseDefine")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义 advise")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Before")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.xys.aspect.PointcutDefine.dataAccessOperation()"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doBeforeAccessCheck")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JoinPoint")]),t._v(" joinPoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*****Before advise, method: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" joinPoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSignature")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toShortString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" *****"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这里, "),a("strong",[t._v("@Before")]),t._v(' 引用了一个 pointcut, 即 "com.xys.aspect.PointcutDefine.dataAccessOperation()" 是一个 pointcut 的名字.\n如果我们在 advice 在内置 pointcut, 则可以:')]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Aspect")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AdviseDefine")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 pointcut 和 advice 同时定义")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Before")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"within(com.xys.service..*)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doAccessCheck")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JoinPoint")]),t._v(" joinPoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*****doAccessCheck, Before advise, method: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" joinPoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSignature")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toShortString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" *****"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"around-advice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#around-advice"}},[t._v("#")]),t._v(" around advice")]),t._v(" "),a("p",[t._v("around advice 比较特别, 它可以在一个方法的之前之前和之后添加不同的操作, 并且甚至可以决定何时, 如何, 是否调用匹配到的方法.")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Aspect")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AdviseDefine")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义 advise")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Around")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.xys.aspect.PointcutDefine.dataAccessOperation()"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doAroundAccessCheck")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProceedingJoinPoint")]),t._v(" pjp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StopWatch")]),t._v(" stopWatch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StopWatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        stopWatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" retVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pjp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("proceed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        stopWatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结束")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"invoke method: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" pjp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSignature")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('", elapsed time: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" stopWatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTotalTimeMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" retVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("around advice 和前面的 before advice 差不多, 只是我们把注解 "),a("strong",[t._v("@Before")]),t._v(" 改为了 "),a("strong",[t._v("@Around")]),t._v(" 了.")]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://item.jd.com/11899370.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《 Spring 实战（第 4 版）》"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);