(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{463:function(e,v,_){"use strict";_.r(v);var r=_(14),t=Object(r.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"springmvc-简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-简介"}},[e._v("#")]),e._v(" SpringMVC 简介")]),e._v(" "),v("h2",{attrs:{id:"springmvc-工作流程描述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-工作流程描述"}},[e._v("#")]),e._v(" SpringMVC 工作流程描述")]),e._v(" "),v("p",[e._v("Spring MVC 的工作流程可以用一幅图来说明：")]),e._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/spring/web/spring-dispatcher-servlet.png",alt:"img"}})]),e._v(" "),v("ol",[v("li",[e._v("向服务器发送 HTTP 请求，请求被前端控制器 "),v("code",[e._v("DispatcherServlet")]),e._v(" 捕获。")]),e._v(" "),v("li",[v("code",[e._v("DispatcherServlet")]),e._v(" 根据 "),v("strong",[v("code",[e._v("<servlet-name>-servlet.xml")])]),e._v(" 中的配置对请求的 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 "),v("code",[e._v("HandlerMapping")]),e._v(" 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以"),v("code",[e._v("HandlerExecutionChain")]),e._v(" 对象的形式返回。")]),e._v(" "),v("li",[v("code",[e._v("DispatcherServlet")]),e._v(" 根据获得的"),v("code",[e._v("Handler")]),e._v("，选择一个合适的 "),v("code",[e._v("HandlerAdapter")]),e._v("。（附注：如果成功获得"),v("code",[e._v("HandlerAdapter")]),e._v("后，此时将开始执行拦截器的 preHandler(...)方法）。")]),e._v(" "),v("li",[e._v("提取"),v("code",[e._v("Request")]),e._v("中的模型数据，填充"),v("code",[e._v("Handler")]),e._v("入参，开始执行"),v("code",[e._v("Handler")]),e._v("（"),v("code",[e._v("Controller")]),e._v(")。 在填充"),v("code",[e._v("Handler")]),e._v("的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：\n"),v("ul",[v("li",[e._v("HttpMessageConveter： 将请求消息（如 Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息。")]),e._v(" "),v("li",[e._v("数据转换：对请求消息进行数据转换。如"),v("code",[e._v("String")]),e._v("转换成"),v("code",[e._v("Integer")]),e._v("、"),v("code",[e._v("Double")]),e._v("等。")]),e._v(" "),v("li",[e._v("数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等。")]),e._v(" "),v("li",[e._v("数据验证： 验证数据的有效性（长度、格式等），验证结果存储到"),v("code",[e._v("BindingResult")]),e._v("或"),v("code",[e._v("Error")]),e._v("中。")])])]),e._v(" "),v("li",[e._v("Handler(Controller)执行完成后，向 "),v("code",[e._v("DispatcherServlet")]),e._v(" 返回一个 "),v("code",[e._v("ModelAndView")]),e._v(" 对象；")]),e._v(" "),v("li",[e._v("根据返回的"),v("code",[e._v("ModelAndView")]),e._v("，选择一个适合的 "),v("code",[e._v("ViewResolver")]),e._v("（必须是已经注册到 Spring 容器中的"),v("code",[e._v("ViewResolver")]),e._v(")返回给"),v("code",[e._v("DispatcherServlet")]),e._v("。")]),e._v(" "),v("li",[v("code",[e._v("ViewResolver")]),e._v(" 结合"),v("code",[e._v("Model")]),e._v("和"),v("code",[e._v("View")]),e._v("，来渲染视图。")]),e._v(" "),v("li",[e._v("视图负责将渲染结果返回给客户端。")])])])}),[],!1,null,null,null);v.default=t.exports}}]);