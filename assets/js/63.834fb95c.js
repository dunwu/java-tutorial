(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{426:function(e,n,t){"use strict";t.r(n);var a=t(14),o=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"springboot-知识图谱"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot-知识图谱"}},[e._v("#")]),e._v(" SpringBoot 知识图谱")]),e._v(" "),n("blockquote",[n("ol",[n("li",[e._v("预警：本文非常长，建议先 mark 后看，也许是最后一次写这么长的文章")]),e._v(" "),n("li",[e._v("说明：前面有 4 个小节关于 Spring 的基础知识，分别是：IOC 容器、JavaConfig、事件监听、SpringFactoriesLoader 详解，它们占据了本文的大部分内容，虽然它们之间可能没有太多的联系，但这些知识对于理解 Spring Boot 的核心原理至关重要，如果你对 Spring 框架烂熟于心，完全可以跳过这 4 个小节。正是因为这个系列的文章是由这些看似不相关的知识点组成，因此取名知识清单。")])])]),e._v(" "),n("p",[e._v("在过去两三年的 Spring 生态圈，最让人兴奋的莫过于 Spring Boot 框架。或许从命名上就能看出这个框架的设计初衷：快速的启动 Spring 应用。因而 Spring Boot 应用本质上就是一个基于 Spring 框架的应用，它是 Spring 对“约定优先于配置”理念的最佳实践产物，它能够帮助开发者更快速高效地构建基于 Spring 生态圈的应用。")]),e._v(" "),n("p",[e._v("那 Spring Boot 有何魔法？"),n("strong",[e._v("自动配置")]),e._v("、"),n("strong",[e._v("起步依赖")]),e._v("、"),n("strong",[e._v("Actuator")]),e._v("、"),n("strong",[e._v("命令行界面(CLI)")]),e._v(" 是 Spring Boot 最重要的 4 大核心特性，其中 CLI 是 Spring Boot 的可选特性，虽然它功能强大，但也引入了一套不太常规的开发模型，因而这个系列的文章仅关注其它 3 种特性。如文章标题，本文是这个系列的第一部分，将为你打开 Spring Boot 的大门，重点为你剖析其启动流程以及自动配置实现原理。要掌握这部分核心内容，理解一些 Spring 框架的基础知识，将会让你事半功倍。")]),e._v(" "),n("h2",{attrs:{id:"一、抛砖引玉-探索-spring-ioc-容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、抛砖引玉-探索-spring-ioc-容器"}},[e._v("#")]),e._v(" 一、抛砖引玉：探索 Spring IoC 容器")]),e._v(" "),n("p",[e._v("如果有看过"),n("code",[e._v("SpringApplication.run()")]),e._v("方法的源码，Spring Boot 冗长无比的启动流程一定会让你抓狂，透过现象看本质，SpringApplication 只是将一个典型的 Spring 应用的启动流程进行了扩展，因此，透彻理解 Spring 容器是打开 Spring Boot 大门的一把钥匙。")]),e._v(" "),n("h3",{attrs:{id:"_1-1、spring-ioc-容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、spring-ioc-容器"}},[e._v("#")]),e._v(" 1.1、Spring IoC 容器")]),e._v(" "),n("p",[e._v("可以把 Spring IoC 容器比作一间餐馆，当你来到餐馆，通常会直接招呼服务员：点菜！至于菜的原料是什么？如何用原料把菜做出来？可能你根本就不关心。IoC 容器也是一样，你只需要告诉它需要某个 bean，它就把对应的实例（instance）扔给你，至于这个 bean 是否依赖其他组件，怎样完成它的初始化，根本就不需要你关心。")]),e._v(" "),n("p",[e._v("作为餐馆，想要做出菜肴，得知道菜的原料和菜谱，同样地，IoC 容器想要管理各个业务对象以及它们之间的依赖关系，需要通过某种途径来记录和管理这些信息。"),n("code",[e._v("BeanDefinition")]),e._v("对象就承担了这个责任：容器中的每一个 bean 都会有一个对应的 BeanDefinition 实例，该实例负责保存 bean 对象的所有必要信息，包括 bean 对象的 class 类型、是否是抽象类、构造方法和参数、其它属性等等。当客户端向容器请求相应对象时，容器就会通过这些信息为客户端返回一个完整可用的 bean 实例。")]),e._v(" "),n("p",[e._v("原材料已经准备好（把 BeanDefinition 看着原料），开始做菜吧，等等，你还需要一份菜谱，"),n("code",[e._v("BeanDefinitionRegistry")]),e._v("和"),n("code",[e._v("BeanFactory")]),e._v("就是这份菜谱，BeanDefinitionRegistry 抽象出 bean 的注册逻辑，而 BeanFactory 则抽象出了 bean 的管理逻辑，而各个 BeanFactory 的实现类就具体承担了 bean 的注册以及管理工作。它们之间的关系就如下图：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/9/165bd49d06649b0b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}}),e._v(" "),n("em",[e._v("BeanFactory、BeanDefinitionRegistry 关系图（来自：Spring 揭秘）")])]),e._v(" "),n("p",[n("code",[e._v("DefaultListableBeanFactory")]),e._v("作为一个比较通用的 BeanFactory 实现，它同时也实现了 BeanDefinitionRegistry 接口，因此它就承担了 Bean 的注册管理工作。从图中也可以看出，BeanFactory 接口中主要包含 getBean、containBean、getType、getAliases 等管理 bean 的方法，而 BeanDefinitionRegistry 接口则包含 registerBeanDefinition、removeBeanDefinition、getBeanDefinition 等注册管理 BeanDefinition 的方法。")]),e._v(" "),n("p",[e._v("下面通过一段简单的代码来模拟 BeanFactory 底层是如何工作的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 默认容器实现\nDefaultListableBeanFactory beanRegistry = new DefaultListableBeanFactory();\n// 根据业务对象构造相应的BeanDefinition\nAbstractBeanDefinition definition = new RootBeanDefinition(Business.class,true);\n// 将bean定义注册到容器中\nbeanRegistry.registerBeanDefinition("beanName",definition);\n// 如果有多个bean，还可以指定各个bean之间的依赖关系\n// ........\n\n// 然后可以从容器中获取这个bean的实例\n// 注意：这里的beanRegistry其实实现了BeanFactory接口，所以可以强转，\n// 单纯的BeanDefinitionRegistry是无法强制转换到BeanFactory类型的\nBeanFactory container = (BeanFactory)beanRegistry;\nBusiness business = (Business)container.getBean("beanName");\n')])])]),n("p",[e._v("这段代码仅为了说明 BeanFactory 底层的大致工作流程，实际情况会更加复杂，比如 bean 之间的依赖关系可能定义在外部配置文件(XML/Properties)中、也可能是注解方式。Spring IoC 容器的整个工作流程大致可以分为两个阶段：")]),e._v(" "),n("p",[e._v("①、容器启动阶段")]),e._v(" "),n("p",[e._v("容器启动时，会通过某种途径加载"),n("code",[e._v("Configuration MetaData")]),e._v("。除了代码方式比较直接外，在大部分情况下，容器需要依赖某些工具类，比如："),n("code",[e._v("BeanDefinitionReader")]),e._v("，BeanDefinitionReader 会对加载的"),n("code",[e._v("Configuration MetaData")]),e._v("进行解析和分析，并将分析后的信息组装为相应的 BeanDefinition，最后把这些保存了 bean 定义的 BeanDefinition，注册到相应的 BeanDefinitionRegistry，这样容器的启动工作就完成了。这个阶段主要完成一些准备性工作，更侧重于 bean 对象管理信息的收集，当然一些验证性或者辅助性的工作也在这一阶段完成。")]),e._v(" "),n("p",[e._v("来看一个简单的例子吧，过往，所有的 bean 都定义在 XML 配置文件中，下面的代码将模拟 BeanFactory 如何从配置文件中加载 bean 的定义以及依赖关系：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 通常为BeanDefinitionRegistry的实现类，这里以DeFaultListabeBeanFactory为例\nBeanDefinitionRegistry beanRegistry = new DefaultListableBeanFactory();\n// XmlBeanDefinitionReader实现了BeanDefinitionReader接口，用于解析XML文件\nXmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReaderImpl(beanRegistry);\n// 加载配置文件\nbeanDefinitionReader.loadBeanDefinitions("classpath:spring-bean.xml");\n\n// 从容器中获取bean实例\nBeanFactory container = (BeanFactory)beanRegistry;\nBusiness business = (Business)container.getBean("beanName");\n')])])]),n("p",[e._v("②、Bean 的实例化阶段")]),e._v(" "),n("p",[e._v("经过第一阶段，所有 bean 定义都通过 BeanDefinition 的方式注册到 BeanDefinitionRegistry 中，当某个请求通过容器的 getBean 方法请求某个对象，或者因为依赖关系容器需要隐式的调用 getBean 时，就会触发第二阶段的活动：容器会首先检查所请求的对象之前是否已经实例化完成。如果没有，则会根据注册的 BeanDefinition 所提供的信息实例化被请求对象，并为其注入依赖。当该对象装配完毕后，容器会立即将其返回给请求方法使用。")]),e._v(" "),n("p",[e._v("BeanFactory 只是 Spring IoC 容器的一种实现，如果没有特殊指定，它采用采用延迟初始化策略：只有当访问容器中的某个对象时，才对该对象进行初始化和依赖注入操作。而在实际场景下，我们更多的使用另外一种类型的容器："),n("code",[e._v("ApplicationContext")]),e._v("，它构建在 BeanFactory 之上，属于更高级的容器，除了具有 BeanFactory 的所有能力之外，还提供对事件监听机制以及国际化的支持等。它管理的 bean，在容器启动时全部完成初始化和依赖注入操作。")]),e._v(" "),n("h3",{attrs:{id:"_1-2、spring-容器扩展机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、spring-容器扩展机制"}},[e._v("#")]),e._v(" 1.2、Spring 容器扩展机制")]),e._v(" "),n("p",[e._v("IoC 容器负责管理容器中所有 bean 的生命周期，而在 bean 生命周期的不同阶段，Spring 提供了不同的扩展点来改变 bean 的命运。在容器的启动阶段，"),n("code",[e._v("BeanFactoryPostProcessor")]),e._v("允许我们在容器实例化相应对象之前，对注册到容器的 BeanDefinition 所保存的信息做一些额外的操作，比如修改 bean 定义的某些属性或者增加其他信息等。")]),e._v(" "),n("p",[e._v("如果要自定义扩展类，通常需要实现"),n("code",[e._v("org.springframework.beans.factory.config.BeanFactoryPostProcessor")]),e._v("接口，与此同时，因为容器中可能有多个 BeanFactoryPostProcessor，可能还需要实现"),n("code",[e._v("org.springframework.core.Ordered")]),e._v("接口，以保证 BeanFactoryPostProcessor 按照顺序执行。Spring 提供了为数不多的 BeanFactoryPostProcessor 实现，我们以"),n("code",[e._v("PropertyPlaceholderConfigurer")]),e._v("来说明其大致的工作流程。")]),e._v(" "),n("p",[e._v("在 Spring 项目的 XML 配置文件中，经常可以看到许多配置项的值使用占位符，而将占位符所代表的值单独配置到独立的 properties 文件，这样可以将散落在不同 XML 文件中的配置集中管理，而且也方便运维根据不同的环境进行配置不同的值。这个非常实用的功能就是由 PropertyPlaceholderConfigurer 负责实现的。")]),e._v(" "),n("p",[e._v("根据前文，当 BeanFactory 在第一阶段加载完所有配置信息时，BeanFactory 中保存的对象的属性还是以占位符方式存在的，比如"),n("code",[e._v("${jdbc.mysql.url}")]),e._v("。当 PropertyPlaceholderConfigurer 作为 BeanFactoryPostProcessor 被应用时，它会使用 properties 配置文件中的值来替换相应的 BeanDefinition 中占位符所表示的属性值。当需要实例化 bean 时，bean 定义中的属性值就已经被替换成我们配置的值。当然其实现比上面描述的要复杂一些，这里仅说明其大致工作原理，更详细的实现可以参考其源码。")]),e._v(" "),n("p",[e._v("与之相似的，还有"),n("code",[e._v("BeanPostProcessor")]),e._v("，其存在于对象实例化阶段。跟 BeanFactoryPostProcessor 类似，它会处理容器内所有符合条件并且已经实例化后的对象。简单的对比，BeanFactoryPostProcessor 处理 bean 的定义，而 BeanPostProcessor 则处理 bean 完成实例化后的对象。BeanPostProcessor 定义了两个接口：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public interface BeanPostProcessor {\n    // 前置处理\n    Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException;\n    // 后置处理\n    Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;\n}\n")])])]),n("p",[e._v("为了理解这两个方法执行的时机，简单的了解下 bean 的整个生命周期：")]),e._v(" "),n("p",[n("code",[e._v("postProcessBeforeInitialization()")]),e._v("方法与"),n("code",[e._v("postProcessAfterInitialization()")]),e._v("分别对应图中前置处理和后置处理两个步骤将执行的方法。这两个方法中都传入了 bean 对象实例的引用，为扩展容器的对象实例化过程提供了很大便利，在这儿几乎可以对传入的实例执行任何操作。注解、AOP 等功能的实现均大量使用了"),n("code",[e._v("BeanPostProcessor")]),e._v("，比如有一个自定义注解，你完全可以实现 BeanPostProcessor 的接口，在其中判断 bean 对象的脑袋上是否有该注解，如果有，你可以对这个 bean 实例执行任何操作，想想是不是非常的简单？")]),e._v(" "),n("p",[e._v("再来看一个更常见的例子，在 Spring 中经常能够看到各种各样的 Aware 接口，其作用就是在对象实例化完成以后将 Aware 接口定义中规定的依赖注入到当前实例中。比如最常见的"),n("code",[e._v("ApplicationContextAware")]),e._v("接口，实现了这个接口的类都可以获取到一个 ApplicationContext 对象。当容器中每个对象的实例化过程走到 BeanPostProcessor 前置处理这一步时，容器会检测到之前注册到容器的 ApplicationContextAwareProcessor，然后就会调用其 postProcessBeforeInitialization()方法，检查并设置 Aware 相关依赖。看看代码吧，是不是很简单：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 代码来自：org.springframework.context.support.ApplicationContextAwareProcessor\n// 其postProcessBeforeInitialization方法调用了invokeAwareInterfaces方法\nprivate void invokeAwareInterfaces(Object bean) {\n    if (bean instanceof EnvironmentAware) {\n        ((EnvironmentAware) bean).setEnvironment(this.applicationContext.getEnvironment());\n    }\n    if (bean instanceof ApplicationContextAware) {\n        ((ApplicationContextAware) bean).setApplicationContext(this.applicationContext);\n    }\n    // ......\n}\n")])])]),n("p",[e._v("最后总结一下，本小节内容和你一起回顾了 Spring 容器的部分核心内容，限于篇幅不能写更多，但理解这部分内容，足以让您轻松理解 Spring Boot 的启动原理，如果在后续的学习过程中遇到一些晦涩难懂的知识，再回过头来看看 Spring 的核心知识，也许有意想不到的效果。也许 Spring Boot 的中文资料很少，但 Spring 的中文资料和书籍有太多太多，总有东西能给你启发。")]),e._v(" "),n("h2",{attrs:{id:"二、夯实基础-javaconfig-与常见-annotation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、夯实基础-javaconfig-与常见-annotation"}},[e._v("#")]),e._v(" 二、夯实基础：JavaConfig 与常见 Annotation")]),e._v(" "),n("h3",{attrs:{id:"_2-1、javaconfig"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、javaconfig"}},[e._v("#")]),e._v(" 2.1、JavaConfig")]),e._v(" "),n("p",[e._v("我们知道"),n("code",[e._v("bean")]),e._v("是 Spring IOC 中非常核心的概念，Spring 容器负责 bean 的生命周期的管理。在最初，Spring 使用 XML 配置文件的方式来描述 bean 的定义以及相互间的依赖关系，但随着 Spring 的发展，越来越多的人对这种方式表示不满，因为 Spring 项目的所有业务类均以 bean 的形式配置在 XML 文件中，造成了大量的 XML 文件，使项目变得复杂且难以管理。")]),e._v(" "),n("p",[e._v("后来，基于纯 Java Annotation 依赖注入框架"),n("code",[e._v("Guice")]),e._v("出世，其性能明显优于采用 XML 方式的 Spring，甚至有部分人认为，"),n("code",[e._v("Guice")]),e._v("可以完全取代 Spring（"),n("code",[e._v("Guice")]),e._v("仅是一个轻量级 IOC 框架，取代 Spring 还差的挺远）。正是这样的危机感，促使 Spring 及社区推出并持续完善了"),n("code",[e._v("JavaConfig")]),e._v("子项目，它基于 Java 代码和 Annotation 注解来描述 bean 之间的依赖绑定关系。比如，下面是使用 XML 配置方式来描述 bean 的定义：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<bean id="bookService" class="cn.moondev.service.BookServiceImpl"></bean>\n')])])]),n("p",[e._v("而基于 JavaConfig 的配置形式是这样的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Configuration\npublic class MoonBookConfiguration {\n\n    // 任何标志了@Bean的方法，其返回值将作为一个bean注册到Spring的IOC容器中\n    // 方法名默认成为该bean定义的id\n    @Bean\n    public BookService bookService() {\n        return new BookServiceImpl();\n    }\n}\n")])])]),n("p",[e._v("如果两个 bean 之间有依赖关系的话，在 XML 配置中应该是这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<bean id="bookService" class="cn.moondev.service.BookServiceImpl">\n    <property name="dependencyService" ref="dependencyService"/>\n</bean>\n\n<bean id="otherService" class="cn.moondev.service.OtherServiceImpl">\n    <property name="dependencyService" ref="dependencyService"/>\n</bean>\n\n<bean id="dependencyService" class="DependencyServiceImpl"/>\n')])])]),n("p",[e._v("而在 JavaConfig 中则是这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Configuration\npublic class MoonBookConfiguration {\n\n    // 如果一个bean依赖另一个bean，则直接调用对应JavaConfig类中依赖bean的创建方法即可\n    // 这里直接调用dependencyService()\n    @Bean\n    public BookService bookService() {\n        return new BookServiceImpl(dependencyService());\n    }\n\n    @Bean\n    public OtherService otherService() {\n        return new OtherServiceImpl(dependencyService());\n    }\n\n    @Bean\n    public DependencyService dependencyService() {\n        return new DependencyServiceImpl();\n    }\n}\n")])])]),n("p",[e._v("你可能注意到这个示例中，有两个 bean 都依赖于 dependencyService，也就是说当初始化 bookService 时会调用"),n("code",[e._v("dependencyService()")]),e._v("，在初始化 otherService 时也会调用"),n("code",[e._v("dependencyService()")]),e._v("，那么问题来了？这时候 IOC 容器中是有一个 dependencyService 实例还是两个？这个问题留着大家思考吧，这里不再赘述。")]),e._v(" "),n("h3",{attrs:{id:"_2-2、-componentscan"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、-componentscan"}},[e._v("#")]),e._v(" 2.2、@ComponentScan")]),e._v(" "),n("p",[n("code",[e._v("@ComponentScan")]),e._v("注解对应 XML 配置形式中的``元素，表示启用组件扫描，Spring 会自动扫描所有通过注解配置的 bean，然后将其注册到 IOC 容器中。我们可以通过"),n("code",[e._v("basePackages")]),e._v("等属性来指定"),n("code",[e._v("@ComponentScan")]),e._v("自动扫描的范围，如果不指定，默认从声明"),n("code",[e._v("@ComponentScan")]),e._v("所在类的"),n("code",[e._v("package")]),e._v("进行扫描。正因为如此，SpringBoot 的启动类都默认在"),n("code",[e._v("src/main/java")]),e._v("下。")]),e._v(" "),n("h3",{attrs:{id:"_2-3、-import"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、-import"}},[e._v("#")]),e._v(" 2.3、@Import")]),e._v(" "),n("p",[n("code",[e._v("@Import")]),e._v("注解用于导入配置类，举个简单的例子：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Configuration\npublic class MoonBookConfiguration {\n    @Bean\n    public BookService bookService() {\n        return new BookServiceImpl();\n    }\n}\n")])])]),n("p",[e._v("现在有另外一个配置类，比如："),n("code",[e._v("MoonUserConfiguration")]),e._v("，这个配置类中有一个 bean 依赖于"),n("code",[e._v("MoonBookConfiguration")]),e._v("中的 bookService，如何将这两个 bean 组合在一起？借助"),n("code",[e._v("@Import")]),e._v("即可：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Configuration\n// 可以同时导入多个配置类，比如：@Import({A.class,B.class})\n@Import(MoonBookConfiguration.class)\npublic class MoonUserConfiguration {\n    @Bean\n    public UserService userService(BookService bookService) {\n        return new BookServiceImpl(bookService);\n    }\n}\n")])])]),n("p",[e._v("需要注意的是，在 4.2 之前，"),n("code",[e._v("@Import")]),e._v("注解只支持导入配置类，但是在 4.2 之后，它支持导入普通类，并将这个类作为一个 bean 的定义注册到 IOC 容器中。")]),e._v(" "),n("h3",{attrs:{id:"_2-4、-conditional"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4、-conditional"}},[e._v("#")]),e._v(" 2.4、@Conditional")]),e._v(" "),n("p",[n("code",[e._v("@Conditional")]),e._v("注解表示在满足某种条件后才初始化一个 bean 或者启用某些配置。它一般用在由"),n("code",[e._v("@Component")]),e._v("、"),n("code",[e._v("@Service")]),e._v("、"),n("code",[e._v("@Configuration")]),e._v("等注解标识的类上面，或者由"),n("code",[e._v("@Bean")]),e._v("标记的方法上。如果一个"),n("code",[e._v("@Configuration")]),e._v("类标记了"),n("code",[e._v("@Conditional")]),e._v("，则该类中所有标识了"),n("code",[e._v("@Bean")]),e._v("的方法和"),n("code",[e._v("@Import")]),e._v("注解导入的相关类将遵从这些条件。")]),e._v(" "),n("p",[e._v("在 Spring 里可以很方便的编写你自己的条件类，所要做的就是实现"),n("code",[e._v("Condition")]),e._v("接口，并覆盖它的"),n("code",[e._v("matches()")]),e._v("方法。举个例子，下面的简单条件类表示只有在"),n("code",[e._v("Classpath")]),e._v("里存在"),n("code",[e._v("JdbcTemplate")]),e._v("类时才生效：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class JdbcTemplateCondition implements Condition {\n\n    @Override\n    public boolean matches(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata) {\n        try {\n        conditionContext.getClassLoader().loadClass("org.springframework.jdbc.core.JdbcTemplate");\n            return true;\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n}\n')])])]),n("p",[e._v("当你用 Java 来声明 bean 的时候，可以使用这个自定义条件类：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Conditional(JdbcTemplateCondition.class)\n@Service\npublic MyService service() {\n    ......\n}\n")])])]),n("p",[e._v("这个例子中只有当"),n("code",[e._v("JdbcTemplateCondition")]),e._v("类的条件成立时才会创建 MyService 这个 bean。也就是说 MyService 这 bean 的创建条件是"),n("code",[e._v("classpath")]),e._v("里面包含"),n("code",[e._v("JdbcTemplate")]),e._v("，否则这个 bean 的声明就会被忽略掉。")]),e._v(" "),n("p",[n("code",[e._v("Spring Boot")]),e._v("定义了很多有趣的条件，并把他们运用到了配置类上，这些配置类构成了"),n("code",[e._v("Spring Boot")]),e._v("的自动配置的基础。"),n("code",[e._v("Spring Boot")]),e._v("运用条件化配置的方法是：定义多个特殊的条件化注解，并将它们用到配置类上。下面列出了"),n("code",[e._v("Spring Boot")]),e._v("提供的部分条件化注解：")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("条件化注解")]),e._v(" "),n("th",[e._v("配置生效条件")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("@ConditionalOnBean")]),e._v(" "),n("td",[e._v("配置了某个特定 bean")])]),e._v(" "),n("tr",[n("td",[e._v("@ConditionalOnMissingBean")]),e._v(" "),n("td",[e._v("没有配置特定的 bean")])]),e._v(" "),n("tr",[n("td",[e._v("@ConditionalOnClass")]),e._v(" "),n("td",[e._v("Classpath 里有指定的类")])]),e._v(" "),n("tr",[n("td",[e._v("@ConditionalOnMissingClass")]),e._v(" "),n("td",[e._v("Classpath 里没有指定的类")])]),e._v(" "),n("tr",[n("td",[e._v("@ConditionalOnExpression")]),e._v(" "),n("td",[e._v("给定的 Spring Expression Language 表达式计算结果为 true")])]),e._v(" "),n("tr",[n("td",[e._v("@ConditionalOnJava")]),e._v(" "),n("td",[e._v("Java 的版本匹配特定指或者一个范围值")])]),e._v(" "),n("tr",[n("td",[e._v("@ConditionalOnProperty")]),e._v(" "),n("td",[e._v("指定的配置属性要有一个明确的值")])]),e._v(" "),n("tr",[n("td",[e._v("@ConditionalOnResource")]),e._v(" "),n("td",[e._v("Classpath 里有指定的资源")])]),e._v(" "),n("tr",[n("td",[e._v("@ConditionalOnWebApplication")]),e._v(" "),n("td",[e._v("这是一个 Web 应用程序")])]),e._v(" "),n("tr",[n("td",[e._v("@ConditionalOnNotWebApplication")]),e._v(" "),n("td",[e._v("这不是一个 Web 应用程序")])])])]),e._v(" "),n("h3",{attrs:{id:"_2-5、-configurationproperties-与-enableconfigurationproperties"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5、-configurationproperties-与-enableconfigurationproperties"}},[e._v("#")]),e._v(" 2.5、@ConfigurationProperties 与@EnableConfigurationProperties")]),e._v(" "),n("p",[e._v("当某些属性的值需要配置的时候，我们一般会在"),n("code",[e._v("application.properties")]),e._v("文件中新建配置项，然后在 bean 中使用"),n("code",[e._v("@Value")]),e._v("注解来获取配置的值，比如下面配置数据源的代码。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// jdbc config\njdbc.mysql.url=jdbc:mysql://localhost:3306/sampledb\njdbc.mysql.username=root\njdbc.mysql.password=123456\n......\n\n// 配置数据源\n@Configuration\npublic class HikariDataSourceConfiguration {\n\n    @Value("jdbc.mysql.url")\n    public String url;\n    @Value("jdbc.mysql.username")\n    public String user;\n    @Value("jdbc.mysql.password")\n    public String password;\n\n    @Bean\n    public HikariDataSource dataSource() {\n        HikariConfig hikariConfig = new HikariConfig();\n        hikariConfig.setJdbcUrl(url);\n        hikariConfig.setUsername(user);\n        hikariConfig.setPassword(password);\n        // 省略部分代码\n        return new HikariDataSource(hikariConfig);\n    }\n}\n')])])]),n("p",[e._v("使用"),n("code",[e._v("@Value")]),e._v("注解注入的属性通常都比较简单，如果同一个配置在多个地方使用，也存在不方便维护的问题（考虑下，如果有几十个地方在使用某个配置，而现在你想改下名字，你改怎么做？）。对于更为复杂的配置，Spring Boot 提供了更优雅的实现方式，那就是"),n("code",[e._v("@ConfigurationProperties")]),e._v("注解。我们可以通过下面的方式来改写上面的代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Component\n//  还可以通过@PropertySource("classpath:jdbc.properties")来指定配置文件\n@ConfigurationProperties("jdbc.mysql")\n// 前缀=jdbc.mysql，会在配置文件中寻找jdbc.mysql.*的配置项\npulic class JdbcConfig {\n    public String url;\n    public String username;\n    public String password;\n}\n\n@Configuration\npublic class HikariDataSourceConfiguration {\n\n    @AutoWired\n    public JdbcConfig config;\n\n    @Bean\n    public HikariDataSource dataSource() {\n        HikariConfig hikariConfig = new HikariConfig();\n        hikariConfig.setJdbcUrl(config.url);\n        hikariConfig.setUsername(config.username);\n        hikariConfig.setPassword(config.password);\n        // 省略部分代码\n        return new HikariDataSource(hikariConfig);\n    }\n}\n')])])]),n("p",[n("code",[e._v("@ConfigurationProperties")]),e._v("对于更为复杂的配置，处理起来也是得心应手，比如有如下配置文件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("#App\napp.menus[0].title=Home\napp.menus[0].name=Home\napp.menus[0].path=/\napp.menus[1].title=Login\napp.menus[1].name=Login\napp.menus[1].path=/login\n\napp.compiler.timeout=5\napp.compiler.output-folder=/temp/\n\napp.error=/error/\n")])])]),n("p",[e._v("可以定义如下配置类来接收这些属性")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Component\n@ConfigurationProperties("app")\npublic class AppProperties {\n\n    public String error;\n    public List<Menu> menus = new ArrayList<>();\n    public Compiler compiler = new Compiler();\n\n    public static class Menu {\n        public String name;\n        public String path;\n        public String title;\n    }\n\n    public static class Compiler {\n        public String timeout;\n        public String outputFolder;\n    }\n}\n')])])]),n("p",[n("code",[e._v("@EnableConfigurationProperties")]),e._v("注解表示对"),n("code",[e._v("@ConfigurationProperties")]),e._v("的内嵌支持，默认会将对应 Properties Class 作为 bean 注入的 IOC 容器中，即在相应的 Properties 类上不用加"),n("code",[e._v("@Component")]),e._v("注解。")]),e._v(" "),n("h2",{attrs:{id:"三、削铁如泥-springfactoriesloader-详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、削铁如泥-springfactoriesloader-详解"}},[e._v("#")]),e._v(" 三、削铁如泥：SpringFactoriesLoader 详解")]),e._v(" "),n("p",[e._v("JVM 提供了 3 种类加载器："),n("code",[e._v("BootstrapClassLoader")]),e._v("、"),n("code",[e._v("ExtClassLoader")]),e._v("、"),n("code",[e._v("AppClassLoader")]),e._v("分别加载 Java 核心类库、扩展类库以及应用的类路径("),n("code",[e._v("CLASSPATH")]),e._v(")下的类库。JVM 通过双亲委派模型进行类的加载，我们也可以通过继承"),n("code",[e._v("java.lang.classloader")]),e._v("实现自己的类加载器。")]),e._v(" "),n("p",[e._v("何为双亲委派模型？当一个类加载器收到类加载任务时，会先交给自己的父加载器去完成，因此最终加载任务都会传递到最顶层的 BootstrapClassLoader，只有当父加载器无法完成加载任务时，才会尝试自己来加载。")]),e._v(" "),n("p",[e._v("采用双亲委派模型的一个好处是保证使用不同类加载器最终得到的都是同一个对象，这样就可以保证 Java 核心库的类型安全，比如，加载位于 rt.jar 包中的"),n("code",[e._v("java.lang.Object")]),e._v("类，不管是哪个加载器加载这个类，最终都是委托给顶层的 BootstrapClassLoader 来加载的，这样就可以保证任何的类加载器最终得到的都是同样一个 Object 对象。查看 ClassLoader 的源码，对双亲委派模型会有更直观的认识：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("protected Class<?> loadClass(String name, boolean resolve) {\n    synchronized (getClassLoadingLock(name)) {\n    // 首先，检查该类是否已经被加载，如果从JVM缓存中找到该类，则直接返回\n    Class<?> c = findLoadedClass(name);\n    if (c == null) {\n        try {\n            // 遵循双亲委派的模型，首先会通过递归从父加载器开始找，\n            // 直到父类加载器是BootstrapClassLoader为止\n            if (parent != null) {\n                c = parent.loadClass(name, false);\n            } else {\n                c = findBootstrapClassOrNull(name);\n            }\n        } catch (ClassNotFoundException e) {}\n        if (c == null) {\n            // 如果还找不到，尝试通过findClass方法去寻找\n            // findClass是留给开发者自己实现的，也就是说\n            // 自定义类加载器时，重写此方法即可\n           c = findClass(name);\n        }\n    }\n    if (resolve) {\n        resolveClass(c);\n    }\n    return c;\n    }\n}\n")])])]),n("p",[e._v("但双亲委派模型并不能解决所有的类加载器问题，比如，Java 提供了很多服务提供者接口("),n("code",[e._v("Service Provider Interface")]),e._v("，SPI)，允许第三方为这些接口提供实现。常见的 SPI 有 JDBC、JNDI、JAXP 等，这些 SPI 的接口由核心类库提供，却由第三方实现，这样就存在一个问题：SPI 的接口是 Java 核心库的一部分，是由 BootstrapClassLoader 加载的；SPI 实现的 Java 类一般是由 AppClassLoader 来加载的。BootstrapClassLoader 是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。它也不能代理给 AppClassLoader，因为它是最顶层的类加载器。也就是说，双亲委派模型并不能解决这个问题。")]),e._v(" "),n("p",[e._v("线程上下文类加载器("),n("code",[e._v("ContextClassLoader")]),e._v(")正好解决了这个问题。从名称上看，可能会误解为它是一种新的类加载器，实际上，它仅仅是 Thread 类的一个变量而已，可以通过"),n("code",[e._v("setContextClassLoader(ClassLoader cl)")]),e._v("和"),n("code",[e._v("getContextClassLoader()")]),e._v("来设置和获取该对象。如果不做任何的设置，Java 应用的线程的上下文类加载器默认就是 AppClassLoader。在核心类库使用 SPI 接口时，传递的类加载器使用线程上下文类加载器，就可以成功的加载到 SPI 实现的类。线程上下文类加载器在很多 SPI 的实现中都会用到。但在 JDBC 中，你可能会看到一种更直接的实现方式，比如，JDBC 驱动管理"),n("code",[e._v("java.sql.Driver")]),e._v("中的"),n("code",[e._v("loadInitialDrivers()")]),e._v("方法中，你可以直接看到 JDK 是如何加载驱动的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('for (String aDriver : driversList) {\n    try {\n        // 直接使用AppClassLoader\n        Class.forName(aDriver, true, ClassLoader.getSystemClassLoader());\n    } catch (Exception ex) {\n        println("DriverManager.Initialize: load failed: " + ex);\n    }\n}\n')])])]),n("p",[e._v("其实讲解线程上下文类加载器，最主要是让大家在看到"),n("code",[e._v("Thread.currentThread().getClassLoader()")]),e._v("和"),n("code",[e._v("Thread.currentThread().getContextClassLoader()")]),e._v("时不会一脸懵逼，这两者除了在许多底层框架中取得的 ClassLoader 可能会有所不同外，其他大多数业务场景下都是一样的，大家只要知道它是为了解决什么问题而存在的即可。")]),e._v(" "),n("p",[e._v("类加载器除了加载 class 外，还有一个非常重要功能，就是加载资源，它可以从 jar 包中读取任何资源文件，比如，"),n("code",[e._v("ClassLoader.getResources(String name)")]),e._v("方法就是用于读取 jar 包中的资源文件，其代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public Enumeration<URL> getResources(String name) throws IOException {\n    Enumeration<URL>[] tmp = (Enumeration<URL>[]) new Enumeration<?>[2];\n    if (parent != null) {\n        tmp[0] = parent.getResources(name);\n    } else {\n        tmp[0] = getBootstrapResources(name);\n    }\n    tmp[1] = findResources(name);\n    return new CompoundEnumeration<>(tmp);\n}\n")])])]),n("p",[e._v("是不是觉得有点眼熟，不错，它的逻辑其实跟类加载的逻辑是一样的，首先判断父类加载器是否为空，不为空则委托父类加载器执行资源查找任务，直到 BootstrapClassLoader，最后才轮到自己查找。而不同的类加载器负责扫描不同路径下的 jar 包，就如同加载 class 一样，最后会扫描所有的 jar 包，找到符合条件的资源文件。")]),e._v(" "),n("p",[e._v("类加载器的"),n("code",[e._v("findResources(name)")]),e._v("方法会遍历其负责加载的所有 jar 包，找到 jar 包中名称为 name 的资源文件，这里的资源可以是任何文件，甚至是.class 文件，比如下面的示例，用于查找 Array.class 文件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 寻找Array.class文件\npublic static void main(String[] args) throws Exception{\n    // Array.class的完整路径\n    String name = "java/sql/Array.class";\n    Enumeration<URL> urls = Thread.currentThread().getContextClassLoader().getResources(name);\n    while (urls.hasMoreElements()) {\n        URL url = urls.nextElement();\n        System.out.println(url.toString());\n    }\n}\n')])])]),n("p",[e._v("运行后可以得到如下结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$JAVA_HOME/jre/lib/rt.jar!/java/sql/Array.class\n")])])]),n("p",[e._v("根据资源文件的 URL，可以构造相应的文件来读取资源内容。")]),e._v(" "),n("p",[e._v("看到这里，你可能会感到挺奇怪的，你不是要详解"),n("code",[e._v("SpringFactoriesLoader")]),e._v("吗？上来讲了一堆 ClassLoader 是几个意思？看下它的源码你就知道了：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories";\n// spring.factories文件的格式为：key=value1,value2,value3\n// 从所有的jar包中找到META-INF/spring.factories文件\n// 然后从文件中解析出key=factoryClass类名称的所有value值\npublic static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {\n    String factoryClassName = factoryClass.getName();\n    // 取得资源文件的URL\n    Enumeration<URL> urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) : ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));\n    List<String> result = new ArrayList<String>();\n    // 遍历所有的URL\n    while (urls.hasMoreElements()) {\n        URL url = urls.nextElement();\n        // 根据资源文件URL解析properties文件\n        Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));\n        String factoryClassNames = properties.getProperty(factoryClassName);\n        // 组装数据，并返回\n        result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));\n    }\n    return result;\n}\n')])])]),n("p",[e._v("有了前面关于 ClassLoader 的知识，再来理解这段代码，是不是感觉豁然开朗：从"),n("code",[e._v("CLASSPATH")]),e._v("下的每个 Jar 包中搜寻所有"),n("code",[e._v("META-INF/spring.factories")]),e._v("配置文件，然后将解析 properties 文件，找到指定名称的配置后返回。需要注意的是，其实这里不仅仅是会去 ClassPath 路径下查找，会扫描所有路径下的 Jar 包，只不过这个文件只会在 Classpath 下的 jar 包中。来简单看下"),n("code",[e._v("spring.factories")]),e._v("文件的内容吧：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 来自 org.springframework.boot.autoconfigure下的META-INF/spring.factories\n// EnableAutoConfiguration后文会讲到，它用于开启Spring Boot自动配置功能\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration\\\n")])])]),n("p",[e._v("执行"),n("code",[e._v("loadFactoryNames(EnableAutoConfiguration.class, classLoader)")]),e._v("后，得到对应的一组"),n("code",[e._v("@Configuration")]),e._v("类，\n我们就可以通过反射实例化这些类然后注入到 IOC 容器中，最后容器里就有了一系列标注了"),n("code",[e._v("@Configuration")]),e._v("的 JavaConfig 形式的配置类。")]),e._v(" "),n("p",[e._v("这就是"),n("code",[e._v("SpringFactoriesLoader")]),e._v("，它本质上属于 Spring 框架私有的一种扩展方案，类似于 SPI，Spring Boot 在 Spring 基础上的很多核心功能都是基于此，希望大家可以理解。")]),e._v(" "),n("h2",{attrs:{id:"四、另一件武器-spring-容器的事件监听机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、另一件武器-spring-容器的事件监听机制"}},[e._v("#")]),e._v(" 四、另一件武器：Spring 容器的事件监听机制")]),e._v(" "),n("p",[e._v("过去，事件监听机制多用于图形界面编程，比如："),n("strong",[e._v("点击")]),e._v("按钮、在文本框"),n("strong",[e._v("输入")]),e._v("内容等操作被称为事件，而当事件触发时，应用程序作出一定的响应则表示应用监听了这个事件，而在服务器端，事件的监听机制更多的用于异步通知以及监控和异常处理。Java 提供了实现事件监听机制的两个基础类：自定义事件类型扩展自"),n("code",[e._v("java.util.EventObject")]),e._v("、事件的监听器扩展自"),n("code",[e._v("java.util.EventListener")]),e._v("。来看一个简单的实例：简单的监控一个方法的耗时。")]),e._v(" "),n("p",[e._v("首先定义事件类型，通常的做法是扩展 EventObject，随着事件的发生，相应的状态通常都封装在此类中：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class MethodMonitorEvent extends EventObject {\n    // 时间戳，用于记录方法开始执行的时间\n    public long timestamp;\n\n    public MethodMonitorEvent(Object source) {\n        super(source);\n    }\n}\n")])])]),n("p",[e._v("事件发布之后，相应的监听器即可对该类型的事件进行处理，我们可以在方法开始执行之前发布一个 begin 事件，在方法执行结束之后发布一个 end 事件，相应地，事件监听器需要提供方法对这两种情况下接收到的事件进行处理：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 1、定义事件监听接口\npublic interface MethodMonitorEventListener extends EventListener {\n    // 处理方法执行之前发布的事件\n    public void onMethodBegin(MethodMonitorEvent event);\n    // 处理方法结束时发布的事件\n    public void onMethodEnd(MethodMonitorEvent event);\n}\n// 2、事件监听接口的实现：如何处理\npublic class AbstractMethodMonitorEventListener implements MethodMonitorEventListener {\n\n    @Override\n    public void onMethodBegin(MethodMonitorEvent event) {\n        // 记录方法开始执行时的时间\n        event.timestamp = System.currentTimeMillis();\n    }\n\n    @Override\n    public void onMethodEnd(MethodMonitorEvent event) {\n        // 计算方法耗时\n        long duration = System.currentTimeMillis() - event.timestamp;\n        System.out.println("耗时：" + duration);\n    }\n}\n')])])]),n("p",[e._v("事件监听器接口针对不同的事件发布实际提供相应的处理方法定义，最重要的是，其方法只接收 MethodMonitorEvent 参数，说明这个监听器类只负责监听器对应的事件并进行处理。有了事件和监听器，剩下的就是发布事件，然后让相应的监听器监听并处理。通常情况，我们会有一个事件发布者，它本身作为事件源，在合适的时机，将相应的事件发布给对应的事件监听器：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class MethodMonitorEventPublisher {\n\n    private List<MethodMonitorEventListener> listeners = new ArrayList<MethodMonitorEventListener>();\n\n    public void methodMonitor() {\n        MethodMonitorEvent eventObject = new MethodMonitorEvent(this);\n        publishEvent("begin",eventObject);\n        // 模拟方法执行：休眠5秒钟\n        TimeUnit.SECONDS.sleep(5);\n        publishEvent("end",eventObject);\n\n    }\n\n    private void publishEvent(String status,MethodMonitorEvent event) {\n        // 避免在事件处理期间，监听器被移除，这里为了安全做一个复制操作\n        List<MethodMonitorEventListener> copyListeners = ➥ new ArrayList<MethodMonitorEventListener>(listeners);\n        for (MethodMonitorEventListener listener : copyListeners) {\n            if ("begin".equals(status)) {\n                listener.onMethodBegin(event);\n            } else {\n                listener.onMethodEnd(event);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        MethodMonitorEventPublisher publisher = new MethodMonitorEventPublisher();\n        publisher.addEventListener(new AbstractMethodMonitorEventListener());\n        publisher.methodMonitor();\n    }\n    // 省略实现\n    public void addEventListener(MethodMonitorEventListener listener) {}\n    public void removeEventListener(MethodMonitorEventListener listener) {}\n    public void removeAllListeners() {}\n')])])]),n("p",[e._v("对于事件发布者（事件源）通常需要关注两点：")]),e._v(" "),n("ol",[n("li",[e._v("在合适的时机发布事件。此例中的 methodMonitor()方法是事件发布的源头，其在方法执行之前和结束之后两个时间点发布 MethodMonitorEvent 事件，每个时间点发布的事件都会传给相应的监听器进行处理。在具体实现时需要注意的是，事件发布是顺序执行，为了不影响处理性能，事件监听器的处理逻辑应尽量简单。")]),e._v(" "),n("li",[e._v("事件监听器的管理。publisher 类中提供了事件监听器的注册与移除方法，这样客户端可以根据实际情况决定是否需要注册新的监听器或者移除某个监听器。如果这里没有提供 remove 方法，那么注册的监听器示例将一直被 MethodMonitorEventPublisher 引用，即使已经废弃不用了，也依然在发布者的监听器列表中，这会导致隐性的内存泄漏。")])]),e._v(" "),n("h4",{attrs:{id:"spring-容器内的事件监听机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-容器内的事件监听机制"}},[e._v("#")]),e._v(" Spring 容器内的事件监听机制")]),e._v(" "),n("p",[e._v("Spring 的 ApplicationContext 容器内部中的所有事件类型均继承自"),n("code",[e._v("org.springframework.context.ApplicationEvent")]),e._v("，容器中的所有监听器都实现"),n("code",[e._v("org.springframework.context.ApplicationListener")]),e._v("接口，并且以 bean 的形式注册在容器中。一旦在容器内发布 ApplicationEvent 及其子类型的事件，注册到容器的 ApplicationListener 就会对这些事件进行处理。")]),e._v(" "),n("p",[e._v("你应该已经猜到是怎么回事了。")]),e._v(" "),n("p",[e._v("ApplicationEvent 继承自 EventObject，Spring 提供了一些默认的实现，比如："),n("code",[e._v("ContextClosedEvent")]),e._v("表示容器在即将关闭时发布的事件类型，"),n("code",[e._v("ContextRefreshedEvent")]),e._v("表示容器在初始化或者刷新的时候发布的事件类型......")]),e._v(" "),n("p",[e._v("容器内部使用 ApplicationListener 作为事件监听器接口定义，它继承自 EventListener。ApplicationContext 容器在启动时，会自动识别并加载 EventListener 类型的 bean，一旦容器内有事件发布，将通知这些注册到容器的 EventListener。")]),e._v(" "),n("p",[e._v("ApplicationContext 接口继承了 ApplicationEventPublisher 接口，该接口提供了"),n("code",[e._v("void publishEvent(ApplicationEvent event)")]),e._v("方法定义，不难看出，ApplicationContext 容器担当的就是事件发布者的角色。如果有兴趣可以查看"),n("code",[e._v("AbstractApplicationContext.publishEvent(ApplicationEvent event)")]),e._v("方法的源码：ApplicationContext 将事件的发布以及监听器的管理工作委托给"),n("code",[e._v("ApplicationEventMulticaster")]),e._v("接口的实现类。在容器启动时，会检查容器内是否存在名为 applicationEventMulticaster 的 ApplicationEventMulticaster 对象实例。如果有就使用其提供的实现，没有就默认初始化一个 SimpleApplicationEventMulticaster 作为实现。")]),e._v(" "),n("p",[e._v("最后，如果我们业务需要在容器内部发布事件，只需要为其注入 ApplicationEventPublisher 依赖即可：实现 ApplicationEventPublisherAware 接口或者 ApplicationContextAware 接口(Aware 接口相关内容请回顾上文)。")]),e._v(" "),n("h2",{attrs:{id:"五、出神入化-揭秘自动配置原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、出神入化-揭秘自动配置原理"}},[e._v("#")]),e._v(" 五、出神入化：揭秘自动配置原理")]),e._v(" "),n("p",[e._v("典型的 Spring Boot 应用的启动类一般均位于"),n("code",[e._v("src/main/java")]),e._v("根路径下，比如"),n("code",[e._v("MoonApplication")]),e._v("类：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@SpringBootApplication\npublic class MoonApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(MoonApplication.class, args);\n    }\n}\n")])])]),n("p",[e._v("其中"),n("code",[e._v("@SpringBootApplication")]),e._v("开启组件扫描和自动配置，而"),n("code",[e._v("SpringApplication.run")]),e._v("则负责启动引导应用程序。"),n("code",[e._v("@SpringBootApplication")]),e._v("是一个复合"),n("code",[e._v("Annotation")]),e._v("，它将三个有用的注解组合在一起：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(excludeFilters = {\n        @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\n        @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\npublic @interface SpringBootApplication {\n    // ......\n}\n")])])]),n("p",[n("code",[e._v("@SpringBootConfiguration")]),e._v("就是"),n("code",[e._v("@Configuration")]),e._v("，它是 Spring 框架的注解，标明该类是一个"),n("code",[e._v("JavaConfig")]),e._v("配置类。而"),n("code",[e._v("@ComponentScan")]),e._v("启用组件扫描，前文已经详细讲解过，这里着重关注"),n("code",[e._v("@EnableAutoConfiguration")]),e._v("。")]),e._v(" "),n("p",[n("code",[e._v("@EnableAutoConfiguration")]),e._v("注解表示开启 Spring Boot 自动配置功能，Spring Boot 会根据应用的依赖、自定义的 bean、classpath 下有没有某个类 等等因素来猜测你需要的 bean，然后注册到 IOC 容器中。那"),n("code",[e._v("@EnableAutoConfiguration")]),e._v("是如何推算出你的需求？首先看下它的定义：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage\n@Import(EnableAutoConfigurationImportSelector.class)\npublic @interface EnableAutoConfiguration {\n    // ......\n}\n")])])]),n("p",[e._v("你的关注点应该在"),n("code",[e._v("@Import(EnableAutoConfigurationImportSelector.class)")]),e._v("上了，前文说过，"),n("code",[e._v("@Import")]),e._v("注解用于导入类，并将这个类作为一个 bean 的定义注册到容器中，这里它将把"),n("code",[e._v("EnableAutoConfigurationImportSelector")]),e._v("作为 bean 注入到容器中，而这个类会将所有符合条件的@Configuration 配置都加载到容器中，看看它的代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public String[] selectImports(AnnotationMetadata annotationMetadata) {\n    // 省略了大部分代码，保留一句核心代码\n    // 注意：SpringBoot最近版本中，这句代码被封装在一个单独的方法中\n    // SpringFactoriesLoader相关知识请参考前文\n    List<String> factories = new ArrayList<String>(new LinkedHashSet<String>(\n        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, this.beanClassLoader)));\n}\n")])])]),n("p",[e._v("这个类会扫描所有的 jar 包，将所有符合条件的@Configuration 配置类注入的容器中，何为符合条件，看看"),n("code",[e._v("META-INF/spring.factories")]),e._v("的文件内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 来自 org.springframework.boot.autoconfigure下的META-INF/spring.factories\n// 配置的key = EnableAutoConfiguration，与代码中一致\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration\\\n.....\n")])])]),n("p",[e._v("以"),n("code",[e._v("DataSourceAutoConfiguration")]),e._v("为例，看看 Spring Boot 是如何自动配置的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Configuration\n@ConditionalOnClass({ DataSource.class, EmbeddedDatabaseType.class })\n@EnableConfigurationProperties(DataSourceProperties.class)\n@Import({ Registrar.class, DataSourcePoolMetadataProvidersConfiguration.class })\npublic class DataSourceAutoConfiguration {\n}\n")])])]),n("p",[e._v("分别说一说：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("@ConditionalOnClass({ DataSource.class, EmbeddedDatabaseType.class })")]),e._v("：当 Classpath 中存在 DataSource 或者 EmbeddedDatabaseType 类时才启用这个配置，否则这个配置将被忽略。")]),e._v(" "),n("li",[n("code",[e._v("@EnableConfigurationProperties(DataSourceProperties.class)")]),e._v("：将 DataSource 的默认配置类注入到 IOC 容器中，DataSourceproperties 定义为：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 提供对datasource配置信息的支持，所有的配置前缀为：spring.datasource\n@ConfigurationProperties(prefix = "spring.datasource")\npublic class DataSourceProperties  {\n    private ClassLoader classLoader;\n    private Environment environment;\n    private String name = "testdb";\n    ......\n}\n')])])]),n("ul",[n("li",[n("code",[e._v("@Import({ Registrar.class, DataSourcePoolMetadataProvidersConfiguration.class })")]),e._v("：导入其他额外的配置，就以"),n("code",[e._v("DataSourcePoolMetadataProvidersConfiguration")]),e._v("为例吧。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Configuration\npublic class DataSourcePoolMetadataProvidersConfiguration {\n\n    @Configuration\n    @ConditionalOnClass(org.apache.tomcat.jdbc.pool.DataSource.class)\n    static class TomcatDataSourcePoolMetadataProviderConfiguration {\n        @Bean\n        public DataSourcePoolMetadataProvider tomcatPoolDataSourceMetadataProvider() {\n            .....\n        }\n    }\n  ......\n}\n")])])]),n("p",[e._v("DataSourcePoolMetadataProvidersConfiguration 是数据库连接池提供者的一个配置类，即 Classpath 中存在"),n("code",[e._v("org.apache.tomcat.jdbc.pool.DataSource.class")]),e._v("，则使用 tomcat-jdbc 连接池，如果 Classpath 中存在"),n("code",[e._v("HikariDataSource.class")]),e._v("则使用 Hikari 连接池。")]),e._v(" "),n("p",[e._v("这里仅描述了 DataSourceAutoConfiguration 的冰山一角，但足以说明 Spring Boot 如何利用条件话配置来实现自动配置的。回顾一下，"),n("code",[e._v("@EnableAutoConfiguration")]),e._v("中导入了 EnableAutoConfigurationImportSelector 类，而这个类的"),n("code",[e._v("selectImports()")]),e._v("通过 SpringFactoriesLoader 得到了大量的配置类，而每一个配置类则根据条件化配置来做出决策，以实现自动配置。")]),e._v(" "),n("p",[e._v("整个流程很清晰，但漏了一个大问题："),n("code",[e._v("EnableAutoConfigurationImportSelector.selectImports()")]),e._v("是何时执行的？其实这个方法会在容器启动过程中执行："),n("code",[e._v("AbstractApplicationContext.refresh()")]),e._v("，更多的细节在下一小节中说明。")]),e._v(" "),n("h2",{attrs:{id:"六、启动引导-spring-boot-应用启动的秘密"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、启动引导-spring-boot-应用启动的秘密"}},[e._v("#")]),e._v(" 六、启动引导：Spring Boot 应用启动的秘密")]),e._v(" "),n("h3",{attrs:{id:"_6-1-springapplication-初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-springapplication-初始化"}},[e._v("#")]),e._v(" 6.1 SpringApplication 初始化")]),e._v(" "),n("p",[e._v("SpringBoot 整个启动流程分为两个步骤：初始化一个 SpringApplication 对象、执行该对象的 run 方法。看下 SpringApplication 的初始化流程，SpringApplication 的构造方法中调用 initialize(Object[] sources)方法，其代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private void initialize(Object[] sources) {\n     if (sources != null && sources.length > 0) {\n         this.sources.addAll(Arrays.asList(sources));\n     }\n     // 判断是否是Web项目\n     this.webEnvironment = deduceWebEnvironment();\n     setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));\n     setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));\n     // 找到入口类\n     this.mainApplicationClass = deduceMainApplicationClass();\n}\n")])])]),n("p",[e._v("初始化流程中最重要的就是通过 SpringFactoriesLoader 找到"),n("code",[e._v("spring.factories")]),e._v("文件中配置的"),n("code",[e._v("ApplicationContextInitializer")]),e._v("和"),n("code",[e._v("ApplicationListener")]),e._v("两个接口的实现类名称，以便后期构造相应的实例。"),n("code",[e._v("ApplicationContextInitializer")]),e._v("的主要目的是在"),n("code",[e._v("ConfigurableApplicationContext")]),e._v("做 refresh 之前，对 ConfigurableApplicationContext 实例做进一步的设置或处理。ConfigurableApplicationContext 继承自 ApplicationContext，其主要提供了对 ApplicationContext 进行设置的能力。")]),e._v(" "),n("p",[e._v("实现一个 ApplicationContextInitializer 非常简单，因为它只有一个方法，但大多数情况下我们没有必要自定义一个 ApplicationContextInitializer，即便是 Spring Boot 框架，它默认也只是注册了两个实现，毕竟 Spring 的容器已经非常成熟和稳定，你没有必要来改变它。")]),e._v(" "),n("p",[e._v("而"),n("code",[e._v("ApplicationListener")]),e._v("的目的就没什么好说的了，它是 Spring 框架对 Java 事件监听机制的一种框架实现，具体内容在前文 Spring 事件监听机制这个小节有详细讲解。这里主要说说，如果你想为 Spring Boot 应用添加监听器，该如何实现？")]),e._v(" "),n("p",[e._v("Spring Boot 提供两种方式来添加自定义监听器：")]),e._v(" "),n("ul",[n("li",[e._v("通过"),n("code",[e._v("SpringApplication.addListeners(ApplicationListener... listeners)")]),e._v("或者"),n("code",[e._v("SpringApplication.setListeners(Collection> listeners)")]),e._v("两个方法来添加一个或者多个自定义监听器")]),e._v(" "),n("li",[e._v("既然 SpringApplication 的初始化流程中已经从"),n("code",[e._v("spring.factories")]),e._v("中获取到"),n("code",[e._v("ApplicationListener")]),e._v("的实现类，那么我们直接在自己的 jar 包的"),n("code",[e._v("META-INF/spring.factories")]),e._v("文件中新增配置即可：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("org.springframework.context.ApplicationListener=\\\ncn.moondev.listeners.xxxxListener\\\n")])])]),n("p",[e._v("关于 SpringApplication 的初始化，我们就说这么多。")]),e._v(" "),n("h3",{attrs:{id:"_6-2-spring-boot-启动流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-spring-boot-启动流程"}},[e._v("#")]),e._v(" 6.2 Spring Boot 启动流程")]),e._v(" "),n("p",[e._v("Spring Boot 应用的整个启动流程都封装在 SpringApplication.run 方法中，其整个流程真的是太长太长了，但本质上就是在 Spring 容器启动的基础上做了大量的扩展，按照这个思路来看看源码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public ConfigurableApplicationContext run(String... args) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        ConfigurableApplicationContext context = null;\n        FailureAnalyzers analyzers = null;\n        configureHeadlessProperty();\n        // ①\n        SpringApplicationRunListeners listeners = getRunListeners(args);\n        listeners.starting();\n        try {\n            // ②\n            ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);\n            ConfigurableEnvironment environment = prepareEnvironment(listeners,applicationArguments);\n            // ③\n            Banner printedBanner = printBanner(environment);\n            // ④\n            context = createApplicationContext();\n            // ⑤\n            analyzers = new FailureAnalyzers(context);\n            // ⑥\n            prepareContext(context, environment, listeners, applicationArguments,printedBanner);\n            // ⑦\n            refreshContext(context);\n            // ⑧\n            afterRefresh(context, applicationArguments);\n            // ⑨\n            listeners.finished(context, null);\n            stopWatch.stop();\n            return context;\n        }\n        catch (Throwable ex) {\n            handleRunFailure(context, listeners, analyzers, ex);\n            throw new IllegalStateException(ex);\n        }\n    }\n")])])]),n("p",[e._v("① 通过 SpringFactoriesLoader 查找并加载所有的"),n("code",[e._v("SpringApplicationRunListeners")]),e._v("，通过调用 starting()方法通知所有的 SpringApplicationRunListeners：应用开始启动了。SpringApplicationRunListeners 其本质上就是一个事件发布者，它在 SpringBoot 应用启动的不同时间点发布不同应用事件类型(ApplicationEvent)，如果有哪些事件监听者(ApplicationListener)对这些事件感兴趣，则可以接收并且处理。还记得初始化流程中，SpringApplication 加载了一系列 ApplicationListener 吗？这个启动流程中没有发现有发布事件的代码，其实都已经在 SpringApplicationRunListeners 这儿实现了。")]),e._v(" "),n("p",[e._v("简单的分析一下其实现流程，首先看下 SpringApplicationRunListener 的源码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public interface SpringApplicationRunListener {\n\n    // 运行run方法时立即调用此方法，可以用户非常早期的初始化工作\n    void starting();\n\n    // Environment准备好后，并且ApplicationContext创建之前调用\n    void environmentPrepared(ConfigurableEnvironment environment);\n\n    // ApplicationContext创建好后立即调用\n    void contextPrepared(ConfigurableApplicationContext context);\n\n    // ApplicationContext加载完成，在refresh之前调用\n    void contextLoaded(ConfigurableApplicationContext context);\n\n    // 当run方法结束之前调用\n    void finished(ConfigurableApplicationContext context, Throwable exception);\n\n}\n")])])]),n("p",[e._v("SpringApplicationRunListener 只有一个实现类："),n("code",[e._v("EventPublishingRunListener")]),e._v("。① 处的代码只会获取到一个 EventPublishingRunListener 的实例，我们来看看 starting()方法的内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public void starting() {\n    // 发布一个ApplicationStartedEvent\n    this.initialMulticaster.multicastEvent(new ApplicationStartedEvent(this.application, this.args));\n}\n")])])]),n("p",[e._v("顺着这个逻辑，你可以在 ② 处的"),n("code",[e._v("prepareEnvironment()")]),e._v("方法的源码中找到"),n("code",[e._v("listeners.environmentPrepared(environment);")]),e._v("即 SpringApplicationRunListener 接口的第二个方法，那不出你所料，"),n("code",[e._v("environmentPrepared()")]),e._v("又发布了另外一个事件"),n("code",[e._v("ApplicationEnvironmentPreparedEvent")]),e._v("。接下来会发生什么，就不用我多说了吧。")]),e._v(" "),n("p",[e._v("② 创建并配置当前应用将要使用的"),n("code",[e._v("Environment")]),e._v("，Environment 用于描述应用程序当前的运行环境，其抽象了两个方面的内容：配置文件(profile)和属性(properties)，开发经验丰富的同学对这两个东西一定不会陌生：不同的环境(eg：生产环境、预发布环境)可以使用不同的配置文件，而属性则可以从配置文件、环境变量、命令行参数等来源获取。因此，当 Environment 准备好后，在整个应用的任何时候，都可以从 Environment 中获取资源。")]),e._v(" "),n("p",[e._v("总结起来，② 处的两句代码，主要完成以下几件事：")]),e._v(" "),n("ul",[n("li",[e._v("判断 Environment 是否存在，不存在就创建（如果是 web 项目就创建"),n("code",[e._v("StandardServletEnvironment")]),e._v("，否则创建"),n("code",[e._v("StandardEnvironment")]),e._v("）")]),e._v(" "),n("li",[e._v("配置 Environment：配置 profile 以及 properties")]),e._v(" "),n("li",[e._v("调用 SpringApplicationRunListener 的"),n("code",[e._v("environmentPrepared()")]),e._v("方法，通知事件监听者：应用的 Environment 已经准备好")])]),e._v(" "),n("p",[e._v("③、SpringBoot 应用在启动时会输出这样的东西：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::        (v1.5.6.RELEASE)\n")])])]),n("p",[e._v("如果想把这个东西改成自己的涂鸦，你可以研究以下 Banner 的实现，这个任务就留给你们吧。")]),e._v(" "),n("p",[e._v("④、根据是否是 web 项目，来创建不同的 ApplicationContext 容器。")]),e._v(" "),n("p",[e._v("⑤、创建一系列"),n("code",[e._v("FailureAnalyzer")]),e._v("，创建流程依然是通过 SpringFactoriesLoader 获取到所有实现 FailureAnalyzer 接口的 class，然后在创建对应的实例。FailureAnalyzer 用于分析故障并提供相关诊断信息。")]),e._v(" "),n("p",[e._v("⑥、初始化 ApplicationContext，主要完成以下工作：")]),e._v(" "),n("ul",[n("li",[e._v("将准备好的 Environment 设置给 ApplicationContext")]),e._v(" "),n("li",[e._v("遍历调用所有的 ApplicationContextInitializer 的"),n("code",[e._v("initialize()")]),e._v("方法来对已经创建好的 ApplicationContext 进行进一步的处理")]),e._v(" "),n("li",[e._v("调用 SpringApplicationRunListener 的"),n("code",[e._v("contextPrepared()")]),e._v("方法，通知所有的监听者：ApplicationContext 已经准备完毕")]),e._v(" "),n("li",[e._v("将所有的 bean 加载到容器中")]),e._v(" "),n("li",[e._v("调用 SpringApplicationRunListener 的"),n("code",[e._v("contextLoaded()")]),e._v("方法，通知所有的监听者：ApplicationContext 已经装载完毕")])]),e._v(" "),n("p",[e._v("⑦、调用 ApplicationContext 的"),n("code",[e._v("refresh()")]),e._v("方法，完成 IoC 容器可用的最后一道工序。从名字上理解为刷新容器，那何为刷新？就是插手容器的启动，联系一下第一小节的内容。那如何刷新呢？且看下面代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 摘自refresh()方法中一句代码\ninvokeBeanFactoryPostProcessors(beanFactory);\n")])])]),n("p",[e._v("看看这个方法的实现：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n    PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());\n    ......\n}\n")])])]),n("p",[e._v("获取到所有的"),n("code",[e._v("BeanFactoryPostProcessor")]),e._v("来对容器做一些额外的操作。BeanFactoryPostProcessor 允许我们在容器实例化相应对象之前，对注册到容器的 BeanDefinition 所保存的信息做一些额外的操作。这里的 getBeanFactoryPostProcessors()方法可以获取到 3 个 Processor：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ConfigurationWarningsApplicationContextInitializer$ConfigurationWarningsPostProcessor\nSharedMetadataReaderFactoryContextInitializer$CachingMetadataReaderFactoryPostProcessor\nConfigFileApplicationListener$PropertySourceOrderingPostProcessor\n")])])]),n("p",[e._v("不是有那么多 BeanFactoryPostProcessor 的实现类，为什么这儿只有这 3 个？因为在初始化流程获取到的各种 ApplicationContextInitializer 和 ApplicationListener 中，只有上文 3 个做了类似于如下操作：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public void initialize(ConfigurableApplicationContext context) {\n    context.addBeanFactoryPostProcessor(new ConfigurationWarningsPostProcessor(getChecks()));\n}\n")])])]),n("p",[e._v("然后你就可以进入到"),n("code",[e._v("PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors()")]),e._v("方法了，这个方法除了会遍历上面的 3 个 BeanFactoryPostProcessor 处理外，还会获取类型为"),n("code",[e._v("BeanDefinitionRegistryPostProcessor")]),e._v("的 bean："),n("code",[e._v("org.springframework.context.annotation.internalConfigurationAnnotationProcessor")]),e._v("，对应的 Class 为"),n("code",[e._v("ConfigurationClassPostProcessor")]),e._v("。"),n("code",[e._v("ConfigurationClassPostProcessor")]),e._v("用于解析处理各种注解，包括：@Configuration、@ComponentScan、@Import、@PropertySource、@ImportResource、@Bean。当处理"),n("code",[e._v("@import")]),e._v("注解的时候，就会调用自动配置这一小节中的"),n("code",[e._v("EnableAutoConfigurationImportSelector.selectImports()")]),e._v("来完成自动配置功能。其他的这里不再多讲，如果你有兴趣，可以查阅参考资料 6。")]),e._v(" "),n("p",[e._v("⑧、查找当前 context 中是否注册有 CommandLineRunner 和 ApplicationRunner，如果有则遍历执行它们。")]),e._v(" "),n("p",[e._v("⑨、执行所有 SpringApplicationRunListener 的 finished()方法。")]),e._v(" "),n("p",[e._v("这就是 Spring Boot 的整个启动流程，其核心就是在 Spring 容器初始化并启动的基础上加入各种扩展点，这些扩展点包括：ApplicationContextInitializer、ApplicationListener 以及各种 BeanFactoryPostProcessor 等等。你对整个流程的细节不必太过关注，甚至没弄明白也没有关系，你只要理解这些扩展点是在何时如何工作的，能让它们为你所用即可。")]),e._v(" "),n("p",[e._v("整个启动流程确实非常复杂，可以查询参考资料中的部分章节和内容，对照着源码，多看看，我想最终你都能弄清楚的。言而总之，Spring 才是核心，理解清楚 Spring 容器的启动流程，那 Spring Boot 启动流程就不在话下了。")]),e._v(" "),n("h2",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),n("p",[e._v("[1]"),n("a",{attrs:{href:"https://link.jianshu.com/?t=http%3A%2F%2Funion-click.jd.com%2Fjdc%3Fd%3D4jESQ9",target:"_blank",rel:"noopener noreferrer"}},[e._v("王福强 著；springboot 揭秘：快速构建微服务体系; 机械工业出版社, 2016"),n("OutboundLink")],1),e._v("\n[2]"),n("a",{attrs:{href:"https://link.jianshu.com/?t=http%3A%2F%2Funion-click.jd.com%2Fjdc%3Fd%3DyzfgeF",target:"_blank",rel:"noopener noreferrer"}},[e._v("王福强 著；spring 揭秘; 人民邮件出版社, 2009"),n("OutboundLink")],1),e._v("\n[3]"),n("a",{attrs:{href:"https://link.jianshu.com/?t=http%3A%2F%2Funion-click.jd.com%2Fjdc%3Fd%3DAQ6oHO",target:"_blank",rel:"noopener noreferrer"}},[e._v("craig walls 著；丁雪丰 译；spring boot 实战；中国工信出版集团 人民邮电出版社，2016"),n("OutboundLink")],1),e._v("\n[4]"),n("a",{attrs:{href:"https://link.jianshu.com/?t=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fj-lo-classloader%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入探讨 java 类加载器"),n("OutboundLink")],1),e._v(" : "),n("a",{attrs:{href:"https://link.jianshu.com/?t=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fj-lo-classloader%2F",target:"_blank",rel:"noopener noreferrer"}},[e._v("www.ibm.com/developerwo…"),n("OutboundLink")],1),e._v("\n[5]"),n("a",{attrs:{href:"https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fliaokailin%2Farticle%2Fdetails%2F49559951",target:"_blank",rel:"noopener noreferrer"}},[e._v("spring boot 实战：自动配置原理分析"),n("OutboundLink")],1),e._v(" : "),n("a",{attrs:{href:"https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fliaokailin%2Farticle%2Fdetails%2F49559951",target:"_blank",rel:"noopener noreferrer"}},[e._v("blog.csdn.net/liaokailin/…"),n("OutboundLink")],1),e._v("\n[6]"),n("a",{attrs:{href:"https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fliaokailin%2Farticle%2Fdetails%2F49107209",target:"_blank",rel:"noopener noreferrer"}},[e._v("spring boot实战：spring boot bean加载源码分析"),n("OutboundLink")],1),e._v("： "),n("a",{attrs:{href:"https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fliaokailin%2Farticle%2Fdetails%2F49107209",target:"_blank",rel:"noopener noreferrer"}},[e._v("blog.csdn.net/liaokailin/…"),n("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=o.exports}}]);