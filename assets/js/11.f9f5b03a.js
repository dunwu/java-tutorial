(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{374:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"tomcat-快速入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-快速入门"}},[t._v("#")]),t._v(" Tomcat 快速入门")]),t._v(" "),a("blockquote",[a("p",[t._v("🎁 版本说明")]),t._v(" "),a("p",[t._v("当前最新版本：Tomcat 8.5.24")]),t._v(" "),a("p",[t._v("环境要求：JDK7+")])]),t._v(" "),a("h2",{attrs:{id:"_1-tomcat-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-tomcat-简介"}},[t._v("#")]),t._v(" 1. Tomcat 简介")]),t._v(" "),a("h3",{attrs:{id:"_1-1-tomcat-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-tomcat-是什么"}},[t._v("#")]),t._v(" 1.1. Tomcat 是什么")]),t._v(" "),a("p",[t._v("Tomcat 是由 Apache 开发的一个 Servlet 容器，实现了对 Servlet 和 JSP 的支持，并提供了作为 Web 服务器的一些特有功能，如 Tomcat 管理和控制平台、安全域管理和 Tomcat 阀等。")]),t._v(" "),a("p",[t._v("由于 Tomcat 本身也内含了一个 HTTP 服务器，它也可以被视作一个单独的 Web 服务器。但是，不能将 Tomcat 和 Apache HTTP 服务器混淆，Apache HTTP 服务器是一个用 C 语言实现的 HTTP Web 服务器；这两个 HTTP web server 不是捆绑在一起的。Tomcat 包含了一个配置管理工具，也可以通过编辑 XML 格式的配置文件来进行配置。")]),t._v(" "),a("h3",{attrs:{id:"_1-2-tomcat-重要目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-tomcat-重要目录"}},[t._v("#")]),t._v(" 1.2. Tomcat 重要目录")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("/bin")]),t._v(" - Tomcat 脚本存放目录（如启动、关闭脚本）。 "),a("code",[t._v("*.sh")]),t._v(" 文件用于 Unix 系统； "),a("code",[t._v("*.bat")]),t._v(" 文件用于 Windows 系统。")]),t._v(" "),a("li",[a("strong",[t._v("/conf")]),t._v(" - Tomcat 配置文件目录。")]),t._v(" "),a("li",[a("strong",[t._v("/logs")]),t._v(" - Tomcat 默认日志目录。")]),t._v(" "),a("li",[a("strong",[t._v("/webapps")]),t._v(" - webapp 运行的目录。")])]),t._v(" "),a("h3",{attrs:{id:"_1-3-web-工程发布目录结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-web-工程发布目录结构"}},[t._v("#")]),t._v(" 1.3. web 工程发布目录结构")]),t._v(" "),a("p",[t._v("一般 web 项目路径结构")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("|-- webapp                         # 站点根目录\n    |-- META-INF                   # META-INF 目录\n    |   `-- MANIFEST.MF            # 配置清单文件\n    |-- WEB-INF                    # WEB-INF 目录\n    |   |-- classes                # class文件目录\n    |   |   |-- *.class            # 程序需要的 class 文件\n    |   |   `-- *.xml              # 程序需要的 xml 文件\n    |   |-- lib                    # 库文件夹\n    |   |   `-- *.jar              # 程序需要的 jar 包\n    |   `-- web.xml                # Web应用程序的部署描述文件\n    |-- <userdir>                  # 自定义的目录\n    |-- <userfiles>                # 自定义的资源文件\n")])])]),a("ul",[a("li",[a("p",[a("code",[t._v("webapp")]),t._v("：工程发布文件夹。其实每个 war 包都可以视为 webapp 的压缩包。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("META-INF")]),t._v("：META-INF 目录用于存放工程自身相关的一些信息，元文件信息，通常由开发工具，环境自动生成。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("WEB-INF")]),t._v("：Java web 应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("/WEB-INF/classes")]),t._v("：存放程序所需要的所有 Java class 文件。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("/WEB-INF/lib")]),t._v("：存放程序所需要的所有 jar 文件。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("/WEB-INF/web.xml")]),t._v("：web 应用的部署配置文件。它是工程中最重要的配置文件，它描述了 servlet 和组成应用的其它组件，以及应用初始化参数、安全管理约束等。")])])]),t._v(" "),a("h3",{attrs:{id:"_1-4-tomcat-功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-tomcat-功能"}},[t._v("#")]),t._v(" 1.4. Tomcat 功能")]),t._v(" "),a("p",[t._v("Tomcat 支持的 I/O 模型有：")]),t._v(" "),a("ul",[a("li",[t._v("NIO：非阻塞 I/O，采用 Java NIO 类库实现。")]),t._v(" "),a("li",[t._v("NIO2：异步 I/O，采用 JDK 7 最新的 NIO2 类库实现。")]),t._v(" "),a("li",[t._v("APR：采用 Apache 可移植运行库实现，是 C/C++ 编写的本地库。")])]),t._v(" "),a("p",[t._v("Tomcat 支持的应用层协议有：")]),t._v(" "),a("ul",[a("li",[t._v("HTTP/1.1：这是大部分 Web 应用采用的访问协议。")]),t._v(" "),a("li",[t._v("AJP：用于和 Web 服务器集成（如 Apache）。")]),t._v(" "),a("li",[t._v("HTTP/2：HTTP 2.0 大幅度的提升了 Web 性能。")])]),t._v(" "),a("h2",{attrs:{id:"_2-tomcat-入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-tomcat-入门"}},[t._v("#")]),t._v(" 2. Tomcat 入门")]),t._v(" "),a("h3",{attrs:{id:"_2-1-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-安装"}},[t._v("#")]),t._v(" 2.1. 安装")]),t._v(" "),a("p",[a("strong",[t._v("前提条件")])]),t._v(" "),a("p",[t._v("Tomcat 8.5 要求 JDK 版本为 1.7 以上。")]),t._v(" "),a("p",[t._v("进入 "),a("a",{attrs:{href:"https://tomcat.apache.org/download-80.cgi",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tomcat 官方下载地址"),a("OutboundLink")],1),t._v(" 选择合适版本下载，并解压到本地。")]),t._v(" "),a("p",[a("strong",[t._v("Windows")])]),t._v(" "),a("p",[t._v("添加环境变量 "),a("code",[t._v("CATALINA_HOME")]),t._v(" ，值为 Tomcat 的安装路径。")]),t._v(" "),a("p",[t._v("进入安装目录下的 bin 目录，运行 startup.bat 文件，启动 Tomcat")]),t._v(" "),a("p",[a("strong",[t._v("Linux / Unix")])]),t._v(" "),a("p",[t._v("下面的示例以 8.5.24 版本为例，包含了下载、解压、启动操作。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 下载解压到本地")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.24/bin/apache-tomcat-8.5.24.tar.gz\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-zxf")]),t._v(" apache-tomcat-8.5.24.tar.gz\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动 Tomcat")]),t._v("\n./apache-tomcat-8.5.24/bin/startup.sh\n")])])]),a("p",[t._v("启动后，访问 "),a("code",[t._v("http://localhost:8080")]),t._v(" ，可以看到 Tomcat 安装成功的测试页面。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/tomcat.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"_2-2-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-配置"}},[t._v("#")]),t._v(" 2.2. 配置")]),t._v(" "),a("p",[t._v("本节将列举一些重要、常见的配置项。详细的 Tomcat8 配置可以参考 "),a("a",{attrs:{href:"http://tomcat.apache.org/tomcat-8.5-doc/config/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tomcat 8 配置官方参考文档"),a("OutboundLink")],1),t._v(" 。")]),t._v(" "),a("h4",{attrs:{id:"_2-2-1-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-server"}},[t._v("#")]),t._v(" 2.2.1. Server")]),t._v(" "),a("blockquote",[a("p",[t._v("Server 元素表示整个 Catalina servlet 容器。")]),t._v(" "),a("p",[t._v("因此，它必须是 "),a("code",[t._v("conf/server.xml")]),t._v(" 配置文件中的根元素。它的属性代表了整个 servlet 容器的特性。")])]),t._v(" "),a("p",[a("strong",[t._v("属性表")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("备注")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("className")]),t._v(" "),a("td",[t._v("这个类必须实现 org.apache.catalina.Server 接口。")]),t._v(" "),a("td",[t._v("默认 org.apache.catalina.core.StandardServer")])]),t._v(" "),a("tr",[a("td",[t._v("address")]),t._v(" "),a("td",[t._v("服务器等待关机命令的 TCP / IP 地址。如果没有指定地址，则使用 localhost。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("port")]),t._v(" "),a("td",[t._v("服务器等待关机命令的 TCP / IP 端口号。设置为-1 以禁用关闭端口。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("shutdown")]),t._v(" "),a("td",[t._v("必须通过 TCP / IP 连接接收到指定端口号的命令字符串，以关闭 Tomcat。")]),t._v(" "),a("td")])])]),t._v(" "),a("h4",{attrs:{id:"_2-2-2-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-service"}},[t._v("#")]),t._v(" 2.2.2. Service")]),t._v(" "),a("blockquote",[a("p",[t._v("Service 元素表示一个或多个连接器组件的组合，这些组件共享一个用于处理传入请求的引擎组件。Server 中可以有多个 Service。")])]),t._v(" "),a("p",[a("strong",[t._v("属性表")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("备注")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("className")]),t._v(" "),a("td",[t._v("这个类必须实现"),a("code",[t._v("org.apache.catalina.Service")]),t._v("接口。")]),t._v(" "),a("td",[t._v("默认 "),a("code",[t._v("org.apache.catalina.core.StandardService")])])]),t._v(" "),a("tr",[a("td",[t._v("name")]),t._v(" "),a("td",[t._v("此服务的显示名称，如果您使用标准 Catalina 组件，将包含在日志消息中。与特定服务器关联的每个服务的名称必须是唯一的。")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[a("strong",[t._v("实例 - "),a("code",[t._v("conf/server.xml")]),t._v(" 配置文件示例")])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token prolog"}},[t._v('<?xml version="1.0" encoding="UTF-8"?>')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("8080"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("shutdown")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("SHUTDOWN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Service")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  ...\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("Service")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("Server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h4",{attrs:{id:"_2-2-3-executor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-executor"}},[t._v("#")]),t._v(" 2.2.3. Executor")]),t._v(" "),a("blockquote",[a("p",[t._v("Executor 表示可以在 Tomcat 中的组件之间共享的线程池。")])]),t._v(" "),a("p",[a("strong",[t._v("属性表")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("备注")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("className")]),t._v(" "),a("td",[t._v("这个类必须实现"),a("code",[t._v("org.apache.catalina.Executor")]),t._v("接口。")]),t._v(" "),a("td",[t._v("默认 "),a("code",[t._v("org.apache.catalina.core.StandardThreadExecutor")])])]),t._v(" "),a("tr",[a("td",[t._v("name")]),t._v(" "),a("td",[t._v("线程池名称。")]),t._v(" "),a("td",[t._v("要求唯一, 供 Connector 元素的 executor 属性使用")])]),t._v(" "),a("tr",[a("td",[t._v("namePrefix")]),t._v(" "),a("td",[t._v("线程名称前缀。")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("maxThreads")]),t._v(" "),a("td",[t._v("最大活跃线程数。")]),t._v(" "),a("td",[t._v("默认 200")])]),t._v(" "),a("tr",[a("td",[t._v("minSpareThreads")]),t._v(" "),a("td",[t._v("最小活跃线程数。")]),t._v(" "),a("td",[t._v("默认 25")])]),t._v(" "),a("tr",[a("td",[t._v("maxIdleTime")]),t._v(" "),a("td",[t._v("当前活跃线程大于 minSpareThreads 时,空闲线程关闭的等待最大时间。")]),t._v(" "),a("td",[t._v("默认 60000ms")])]),t._v(" "),a("tr",[a("td",[t._v("maxQueueSize")]),t._v(" "),a("td",[t._v("线程池满情况下的请求排队大小。")]),t._v(" "),a("td",[t._v("默认 Integer.MAX_VALUE")])])])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Service")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Executor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("tomcatThreadPool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("namePrefix")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("catalina-exec-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("maxThreads")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("300"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("minSpareThreads")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("25"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("Service")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h4",{attrs:{id:"_2-2-4-connector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-connector"}},[t._v("#")]),t._v(" 2.2.4. Connector")]),t._v(" "),a("blockquote",[a("p",[t._v("Connector 代表连接组件。Tomcat 支持三种协议：HTTP/1.1、HTTP/2.0、AJP。")])]),t._v(" "),a("p",[a("strong",[t._v("属性表")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("备注")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("asyncTimeout")]),t._v(" "),a("td",[t._v("Servlet3.0 规范中的异步请求超时")]),t._v(" "),a("td",[t._v("默认 30s")])]),t._v(" "),a("tr",[a("td",[t._v("port")]),t._v(" "),a("td",[t._v("请求连接的 TCP Port")]),t._v(" "),a("td",[t._v("设置为 0,则会随机选取一个未占用的端口号")])]),t._v(" "),a("tr",[a("td",[t._v("protocol")]),t._v(" "),a("td",[t._v("协议. 一般情况下设置为 HTTP/1.1,这种情况下连接模型会在 NIO 和 APR/native 中自动根据配置选择")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("URIEncoding")]),t._v(" "),a("td",[t._v("对 URI 的编码方式.")]),t._v(" "),a("td",[t._v("如果设置系统变量 org.apache.catalina.STRICT_SERVLET_COMPLIANCE 为 true,使用 ISO-8859-1 编码;如果未设置此系统变量且未设置此属性, 使用 UTF-8 编码")])]),t._v(" "),a("tr",[a("td",[t._v("useBodyEncodingForURI")]),t._v(" "),a("td",[t._v("是否采用指定的 contentType 而不是 URIEncoding 来编码 URI 中的请求参数")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("以下属性在标准的 Connector(NIO, NIO2 和 APR/native)中有效:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("备注")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("acceptCount")]),t._v(" "),a("td",[t._v("当最大请求连接 maxConnections 满时的最大排队大小")]),t._v(" "),a("td",[t._v("默认 100,注意此属性和 Executor 中属性 maxQueueSize 的区别.这个指的是请求连接满时的堆栈大小,Executor 的 maxQueueSize 指的是处理线程满时的堆栈大小")])]),t._v(" "),a("tr",[a("td",[t._v("connectionTimeout")]),t._v(" "),a("td",[t._v("请求连接超时")]),t._v(" "),a("td",[t._v("默认 60000ms")])]),t._v(" "),a("tr",[a("td",[t._v("executor")]),t._v(" "),a("td",[t._v("指定配置的线程池名称")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("keepAliveTimeout")]),t._v(" "),a("td",[t._v("keeAlive 超时时间")]),t._v(" "),a("td",[t._v("默认值为 connectionTimeout 配置值.-1 表示不超时")])]),t._v(" "),a("tr",[a("td",[t._v("maxConnections")]),t._v(" "),a("td",[t._v("最大连接数")]),t._v(" "),a("td",[t._v("连接满时后续连接放入最大为 acceptCount 的队列中. 对 NIO 和 NIO2 连接,默认值为 10000;对 APR/native,默认值为 8192")])]),t._v(" "),a("tr",[a("td",[t._v("maxThreads")]),t._v(" "),a("td",[t._v("如果指定了 Executor, 此属性忽略;否则为 Connector 创建的内部线程池最大值")]),t._v(" "),a("td",[t._v("默认 200")])]),t._v(" "),a("tr",[a("td",[t._v("minSpareThreads")]),t._v(" "),a("td",[t._v("如果指定了 Executor, 此属性忽略;否则为 Connector 创建线程池的最小活跃线程数")]),t._v(" "),a("td",[t._v("默认 10")])]),t._v(" "),a("tr",[a("td",[t._v("processorCache")]),t._v(" "),a("td",[t._v("协议处理器缓存 Processor 对象的大小")]),t._v(" "),a("td",[t._v("-1 表示不限制.当不使用 servlet3.0 的异步处理情况下: 如果配置 Executor,配置为 Executor 的 maxThreads;否则配置为 Connnector 的 maxThreads. 如果使用 Serlvet3.0 异步处理, 取 maxThreads 和 maxConnections 的最大值")])])])]),t._v(" "),a("h4",{attrs:{id:"_2-2-5-context"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-context"}},[t._v("#")]),t._v(" 2.2.5. Context")]),t._v(" "),a("blockquote",[a("p",[t._v("Context 元素表示一个 Web 应用程序，它在特定的虚拟主机中运行。每个 Web 应用程序都基于 Web 应用程序存档（WAR）文件，或者包含相应的解包内容的相应目录，如 Servlet 规范中所述。")])]),t._v(" "),a("p",[a("strong",[t._v("属性表")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("备注")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("altDDName")]),t._v(" "),a("td",[t._v("web.xml 部署描述符路径")]),t._v(" "),a("td",[t._v("默认 /WEB-INF/web.xml")])]),t._v(" "),a("tr",[a("td",[t._v("docBase")]),t._v(" "),a("td",[t._v("Context 的 Root 路径")]),t._v(" "),a("td",[t._v("和 Host 的 appBase 相结合, 可确定 web 应用的实际目录")])]),t._v(" "),a("tr",[a("td",[t._v("failCtxIfServletStartFails")]),t._v(" "),a("td",[t._v("同 Host 中的 failCtxIfServletStartFails, 只对当前 Context 有效")]),t._v(" "),a("td",[t._v("默认为 false")])]),t._v(" "),a("tr",[a("td",[t._v("logEffectiveWebXml")]),t._v(" "),a("td",[t._v("是否日志打印 web.xml 内容(web.xml 由默认的 web.xml 和应用中的 web.xml 组成)")]),t._v(" "),a("td",[t._v("默认为 false")])]),t._v(" "),a("tr",[a("td",[t._v("path")]),t._v(" "),a("td",[t._v("web 应用的 context path")]),t._v(" "),a("td",[t._v('如果为根路径,则配置为空字符串(""), 不能不配置')])]),t._v(" "),a("tr",[a("td",[t._v("privileged")]),t._v(" "),a("td",[t._v("是否使用 Tomcat 提供的 manager servlet")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("reloadable")]),t._v(" "),a("td",[t._v("/WEB-INF/classes/ 和/WEB-INF/lib/ 目录中 class 文件发生变化是否自动重新加载")]),t._v(" "),a("td",[t._v("默认为 false")])]),t._v(" "),a("tr",[a("td",[t._v("swallowOutput")]),t._v(" "),a("td",[t._v("true 情况下, System.out 和 System.err 输出将被定向到 web 应用日志中")]),t._v(" "),a("td",[t._v("默认为 false")])])])]),t._v(" "),a("h4",{attrs:{id:"_2-2-6-engine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-6-engine"}},[t._v("#")]),t._v(" 2.2.6. Engine")]),t._v(" "),a("blockquote",[a("p",[t._v("Engine 元素表示与特定的 Catalina 服务相关联的整个请求处理机器。它接收并处理来自一个或多个连接器的所有请求，并将完成的响应返回给连接器，以便最终传输回客户端。")])]),t._v(" "),a("p",[a("strong",[t._v("属性表")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("备注")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("defaultHost")]),t._v(" "),a("td",[t._v("默认主机名，用于标识将处理指向此服务器上主机名称但未在此配置文件中配置的请求的主机。")]),t._v(" "),a("td",[t._v("这个名字必须匹配其中一个嵌套的主机元素的名字属性。")])]),t._v(" "),a("tr",[a("td",[t._v("name")]),t._v(" "),a("td",[t._v("此引擎的逻辑名称，用于日志和错误消息。")]),t._v(" "),a("td",[t._v("在同一服务器中使用多个服务元素时，每个引擎必须分配一个唯一的名称。")])])])]),t._v(" "),a("h4",{attrs:{id:"_2-2-7-host"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-7-host"}},[t._v("#")]),t._v(" 2.2.7. Host")]),t._v(" "),a("blockquote",[a("p",[t._v("Host 元素表示一个虚拟主机，它是一个服务器的网络名称（如“www.mycompany.com”）与运行 Tomcat 的特定服务器的关联。")])]),t._v(" "),a("p",[a("strong",[t._v("属性表")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("备注")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("name")]),t._v(" "),a("td",[t._v("名称")]),t._v(" "),a("td",[t._v("用于日志输出")])]),t._v(" "),a("tr",[a("td",[t._v("appBase")]),t._v(" "),a("td",[t._v("虚拟主机对应的应用基础路径")]),t._v(" "),a("td",[t._v("可以是个绝对路径, 或${CATALINA_BASE}相对路径")])]),t._v(" "),a("tr",[a("td",[t._v("xmlBase")]),t._v(" "),a("td",[t._v("虚拟主机 XML 基础路径,里面应该有 Context xml 配置文件")]),t._v(" "),a("td",[t._v("可以是个绝对路径, 或${CATALINA_BASE}相对路径")])]),t._v(" "),a("tr",[a("td",[t._v("createDirs")]),t._v(" "),a("td",[t._v("当 appBase 和 xmlBase 不存在时,是否创建目录")]),t._v(" "),a("td",[t._v("默认为 true")])]),t._v(" "),a("tr",[a("td",[t._v("autoDeploy")]),t._v(" "),a("td",[t._v("是否周期性的检查 appBase 和 xmlBase 并 deploy web 应用和 context 描述符")]),t._v(" "),a("td",[t._v("默认为 true")])]),t._v(" "),a("tr",[a("td",[t._v("deployIgnore")]),t._v(" "),a("td",[t._v("忽略 deploy 的正则")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("deployOnStartup")]),t._v(" "),a("td",[t._v("Tomcat 启动时是否自动 deploy")]),t._v(" "),a("td",[t._v("默认为 true")])]),t._v(" "),a("tr",[a("td",[t._v("failCtxIfServletStartFails")]),t._v(" "),a("td",[t._v("配置为 true 情况下,任何 load-on-startup >=0 的 servlet 启动失败,则其对应的 Contxt 也启动失败")]),t._v(" "),a("td",[t._v("默认为 false")])])])]),t._v(" "),a("h4",{attrs:{id:"_2-2-8-cluster"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-8-cluster"}},[t._v("#")]),t._v(" 2.2.8. Cluster")]),t._v(" "),a("p",[t._v("由于在实际开发中，我从未用过 Tomcat 集群配置，所以没研究。")]),t._v(" "),a("h3",{attrs:{id:"_2-3-启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-启动"}},[t._v("#")]),t._v(" 2.3. 启动")]),t._v(" "),a("h4",{attrs:{id:"_2-3-1-部署方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-部署方式"}},[t._v("#")]),t._v(" 2.3.1. 部署方式")]),t._v(" "),a("p",[t._v("这种方式要求本地必须安装 Tomcat 。")]),t._v(" "),a("p",[t._v("将打包好的 war 包放在 Tomcat 安装目录下的 "),a("code",[t._v("webapps")]),t._v(" 目录下，然后在 bin 目录下执行 "),a("code",[t._v("startup.bat")]),t._v(" 或 "),a("code",[t._v("startup.sh")]),t._v(" ，Tomcat 会自动解压 "),a("code",[t._v("webapps")]),t._v(" 目录下的 war 包。")]),t._v(" "),a("p",[t._v("成功后，可以访问 "),a("code",[t._v("http://localhost:8080/xxx")]),t._v(" （xxx 是 war 包文件名）。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("注意")])]),t._v(" "),a("p",[t._v("以上步骤是最简单的示例。步骤中的 war 包解压路径、启动端口以及一些更多的功能都可以修改配置文件来定制 （主要是 "),a("code",[t._v("server.xml")]),t._v(" 或 "),a("code",[t._v("context.xml")]),t._v(" 文件）。")])]),t._v(" "),a("h4",{attrs:{id:"_2-3-2-嵌入式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-嵌入式"}},[t._v("#")]),t._v(" 2.3.2. 嵌入式")]),t._v(" "),a("h5",{attrs:{id:"_2-3-2-1-api-方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-1-api-方式"}},[t._v("#")]),t._v(" 2.3.2.1. API 方式")]),t._v(" "),a("p",[t._v("在 pom.xml 中添加依赖")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.apache.tomcat.embed"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("tomcat-embed-core"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("8.5.24"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("添加 SimpleEmbedTomcatServer.java 文件，内容如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Optional")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("apache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("catalina"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tomcat")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SimpleTomcatServer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PORT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONTEXT_PATH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/javatool-server"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设定 profile")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Optional")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" profile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Optional")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ofNullable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"spring.profiles.active"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"spring.profiles.active"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" profile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("orElse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"develop"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tomcat")]),t._v(" tomcat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tomcat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        tomcat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PORT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        tomcat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHost")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAppBase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        tomcat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addWebapp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONTEXT_PATH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAbsolutePath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"src/main/webapp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        tomcat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        tomcat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAbsolutePath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" folderPath "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SimpleEmbedTomcatServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProtectionDomain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCodeSource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLocation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("folderPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" folderPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" folderPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("成功后，可以访问 "),a("code",[t._v("http://localhost:8080/javatool-server")]),t._v(" 。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("说明")])]),t._v(" "),a("p",[t._v("本示例是使用 "),a("code",[t._v("org.apache.tomcat.embed")]),t._v(" 启动嵌入式 Tomcat 的最简示例。")]),t._v(" "),a("p",[t._v("这个示例中使用的是 Tomcat 默认的配置，但通常，我们需要对 Tomcat 配置进行一些定制和调优。为了加载配置文件，启动类就要稍微再复杂一些。这里不想再贴代码，有兴趣的同学可以参考：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/dunwu/JavaStack/tree/master/codes/javatool/server",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("示例项目")]),a("OutboundLink")],1)])]),t._v(" "),a("h5",{attrs:{id:"_2-3-2-2-使用-maven-插件启动-不推荐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-2-使用-maven-插件启动-不推荐"}},[t._v("#")]),t._v(" 2.3.2.2. 使用 maven 插件启动（不推荐）")]),t._v(" "),a("p",[t._v("不推荐理由：这种方式启动 maven 虽然最简单，但是有一个很大的问题是，真的很久很久没发布新版本了（最新版本发布时间：2013-11-11）。且貌似只能找到 Tomcat6 、Tomcat7 插件。")]),t._v(" "),a("p",[a("strong",[t._v("使用方法")])]),t._v(" "),a("p",[t._v("在 pom.xml 中引入插件")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("plugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.apache.tomcat.maven"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("tomcat7-maven-plugin"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2.2"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("configuration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("8080"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("/${project.artifactId}"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("uriEncoding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("UTF-8"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("uriEncoding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("configuration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("plugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("运行 "),a("code",[t._v("mvn tomcat7:run")]),t._v(" 命令，启动 Tomcat。")]),t._v(" "),a("p",[t._v("成功后，可以访问 "),a("code",[t._v("http://localhost:8080/xxx")]),t._v(" （xxx 是 ${project.artifactId} 指定的项目名）。")]),t._v(" "),a("h4",{attrs:{id:"_2-3-3-ide-插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-ide-插件"}},[t._v("#")]),t._v(" 2.3.3. IDE 插件")]),t._v(" "),a("p",[t._v("常见 Java IDE 一般都有对 Tomcat 的支持。")]),t._v(" "),a("p",[t._v("以 Intellij IDEA 为例，提供了 "),a("strong",[t._v("Tomcat and TomEE Integration")]),t._v(" 插件（一般默认会安装）。")]),t._v(" "),a("p",[a("strong",[t._v("使用步骤")])]),t._v(" "),a("ul",[a("li",[t._v("点击 Run/Debug Configurations > New Tomcat Server > local ，打开 Tomcat 配置页面。")]),t._v(" "),a("li",[t._v("点击 Confiure... 按钮，设置 Tomcat 安装路径。")]),t._v(" "),a("li",[t._v("点击 Deployment 标签页，设置要启动的应用。")]),t._v(" "),a("li",[t._v("设置启动应用的端口、JVM 参数、启动浏览器等。")]),t._v(" "),a("li",[t._v("成功后，可以访问 "),a("code",[t._v("http://localhost:8080/")]),t._v("（当然，你也可以在 url 中设置上下文名称）。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/tomcat-intellij-run-config.png",alt:"img"}})]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("说明")])]),t._v(" "),a("p",[t._v("个人认为这个插件不如 Eclipse 的 Tomcat 插件好用，Eclipse 的 Tomcat 插件支持对 Tomcat xml 配置文件进行配置。而这里，你只能自己去 Tomcat 安装路径下修改配置文件。")])]),t._v(" "),a("p",[t._v("文中的嵌入式启动示例可以参考"),a("a",{attrs:{href:"https://github.com/dunwu/JavaStack/tree/master/codes/javatool/server",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("我的示例项目")]),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_3-tomcat-架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-tomcat-架构"}},[t._v("#")]),t._v(" 3. Tomcat 架构")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20201113193431.png",alt:"img"}})]),t._v(" "),a("p",[t._v("Tomcat 要实现 2 个核心功能：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("处理 Socket 连接")]),t._v("，负责网络字节流与 Request 和 Response 对象的转化。")]),t._v(" "),a("li",[a("strong",[t._v("加载和管理 Servlet")]),t._v("，以及"),a("strong",[t._v("处理具体的 Request 请求")]),t._v("。")])]),t._v(" "),a("p",[t._v("为此，Tomcat 设计了两个核心组件：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("连接器（Connector）")]),t._v("：负责和外部通信")]),t._v(" "),a("li",[a("strong",[t._v("容器（Container）")]),t._v("：负责内部处理")])]),t._v(" "),a("h3",{attrs:{id:"_3-1-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-service"}},[t._v("#")]),t._v(" 3.1. Service")]),t._v(" "),a("p",[t._v("Tomcat 支持的 I/O 模型有：")]),t._v(" "),a("ul",[a("li",[t._v("NIO：非阻塞 I/O，采用 Java NIO 类库实现。")]),t._v(" "),a("li",[t._v("NIO2：异步 I/O，采用 JDK 7 最新的 NIO2 类库实现。")]),t._v(" "),a("li",[t._v("APR：采用 Apache 可移植运行库实现，是 C/C++ 编写的本地库。")])]),t._v(" "),a("p",[t._v("Tomcat 支持的应用层协议有：")]),t._v(" "),a("ul",[a("li",[t._v("HTTP/1.1：这是大部分 Web 应用采用的访问协议。")]),t._v(" "),a("li",[t._v("AJP：用于和 Web 服务器集成（如 Apache）。")]),t._v(" "),a("li",[t._v("HTTP/2：HTTP 2.0 大幅度的提升了 Web 性能。")])]),t._v(" "),a("p",[t._v("Tomcat 支持多种 I/O 模型和应用层协议。为了实现这点，一个容器可能对接多个连接器。但是，单独的连接器或容器都不能对外提供服务，需要把它们组装起来才能工作，组装后这个整体叫作 Service 组件。Tomcat 内可能有多个 Service，通过在 Tomcat 中配置多个 Service，可以实现通过不同的端口号来访问同一台机器上部署的不同应用。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20201111093124.png",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("一个 Tomcat 实例有一个或多个 Service；一个 Service 有多个 Connector 和 Container")]),t._v("。Connector 和 Container 之间通过标准的 ServletRequest 和 ServletResponse 通信。")]),t._v(" "),a("h3",{attrs:{id:"_3-2-连接器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-连接器"}},[t._v("#")]),t._v(" 3.2. 连接器")]),t._v(" "),a("p",[t._v("连接器对 Servlet 容器屏蔽了协议及 I/O 模型等的区别，无论是 HTTP 还是 AJP，在容器中获取到的都是一个标准的 ServletRequest 对象。")]),t._v(" "),a("p",[t._v("连接器的主要功能是：")]),t._v(" "),a("ul",[a("li",[t._v("网络通信")]),t._v(" "),a("li",[t._v("应用层协议解析")]),t._v(" "),a("li",[t._v("Tomcat Request/Response 与 ServletRequest/ServletResponse 的转化")])]),t._v(" "),a("p",[t._v("Tomcat 设计了 3 个组件来实现这 3 个功能，分别是 "),a("strong",[a("code",[t._v("EndPoint")])]),t._v("、"),a("strong",[a("code",[t._v("Processor")])]),t._v(" 和 "),a("strong",[a("code",[t._v("Adapter")])]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20201111101440.png",alt:"img"}})]),t._v(" "),a("p",[t._v("组件间通过抽象接口交互。这样做还有一个好处是**封装变化。**这是面向对象设计的精髓，将系统中经常变化的部分和稳定的部分隔离，有助于增加复用性，并降低系统耦合度。网络通信的 I/O 模型是变化的，可能是非阻塞 I/O、异步 I/O 或者 APR。应用层协议也是变化的，可能是 HTTP、HTTPS、AJP。浏览器端发送的请求信息也是变化的。但是整体的处理逻辑是不变的，EndPoint 负责提供字节流给 Processor，Processor 负责提供 Tomcat Request 对象给 Adapter，Adapter 负责提供 ServletRequest 对象给容器。")]),t._v(" "),a("p",[t._v("如果要支持新的 I/O 方案、新的应用层协议，只需要实现相关的具体子类，上层通用的处理逻辑是不变的。由于 I/O 模型和应用层协议可以自由组合，比如 NIO + HTTP 或者 NIO2 + AJP。Tomcat 的设计者将网络通信和应用层协议解析放在一起考虑，设计了一个叫 ProtocolHandler 的接口来封装这两种变化点。各种协议和通信模型的组合有相应的具体实现类。比如：Http11NioProtocol 和 AjpNioProtocol。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20201027091819.png",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"_3-2-1-protocolhandler-组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-protocolhandler-组件"}},[t._v("#")]),t._v(" 3.2.1. ProtocolHandler 组件")]),t._v(" "),a("p",[a("strong",[t._v("连接器用 ProtocolHandler 接口来封装通信协议和 I/O 模型的差异")]),t._v("。ProtocolHandler 内部又分为 EndPoint 和 Processor 模块，EndPoint 负责底层 Socket 通信，Proccesor 负责应用层协议解析。")]),t._v(" "),a("h5",{attrs:{id:"_3-2-1-1-endpoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-1-endpoint"}},[t._v("#")]),t._v(" 3.2.1.1. EndPoint")]),t._v(" "),a("p",[t._v("EndPoint 是通信端点，即通信监听的接口，是具体的 Socket 接收和发送处理器，是对传输层的抽象，因此 EndPoint 是用来实现 TCP/IP 协议的。")]),t._v(" "),a("p",[t._v("EndPoint 是一个接口，对应的抽象实现类是 AbstractEndpoint，而 AbstractEndpoint 的具体子类，比如在 NioEndpoint 和 Nio2Endpoint 中，有两个重要的子组件：Acceptor 和 SocketProcessor。")]),t._v(" "),a("p",[t._v("其中 Acceptor 用于监听 Socket 连接请求。SocketProcessor 用于处理接收到的 Socket 请求，它实现 Runnable 接口，在 Run 方法里调用协议处理组件 Processor 进行处理。为了提高处理能力，SocketProcessor 被提交到线程池来执行。而这个线程池叫作执行器（Executor)。")]),t._v(" "),a("h5",{attrs:{id:"_3-2-1-2-processor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-2-processor"}},[t._v("#")]),t._v(" 3.2.1.2. Processor")]),t._v(" "),a("p",[t._v("如果说 EndPoint 是用来实现 TCP/IP 协议的，那么 Processor 用来实现 HTTP 协议，Processor 接收来自 EndPoint 的 Socket，读取字节流解析成 Tomcat Request 和 Response 对象，并通过 Adapter 将其提交到容器处理，Processor 是对应用层协议的抽象。")]),t._v(" "),a("p",[t._v("Processor 是一个接口，定义了请求的处理等方法。它的抽象实现类 AbstractProcessor 对一些协议共有的属性进行封装，没有对方法进行实现。具体的实现有 AJPProcessor、HTTP11Processor 等，这些具体实现类实现了特定协议的解析方法和请求处理方式。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20201113185929.png",alt:"img"}})]),t._v(" "),a("p",[t._v("从图中我们看到，EndPoint 接收到 Socket 连接后，生成一个 SocketProcessor 任务提交到线程池去处理，SocketProcessor 的 Run 方法会调用 Processor 组件去解析应用层协议，Processor 通过解析生成 Request 对象后，会调用 Adapter 的 Service 方法。")]),t._v(" "),a("h4",{attrs:{id:"_3-2-2-adapter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-adapter"}},[t._v("#")]),t._v(" 3.2.2. Adapter")]),t._v(" "),a("p",[a("strong",[t._v("连接器通过适配器 Adapter 调用容器")]),t._v("。")]),t._v(" "),a("p",[t._v("由于协议不同，客户端发过来的请求信息也不尽相同，Tomcat 定义了自己的 Request 类来适配这些请求信息。")]),t._v(" "),a("p",[t._v("ProtocolHandler 接口负责解析请求并生成 Tomcat Request 类。但是这个 Request 对象不是标准的 ServletRequest，也就意味着，不能用 Tomcat Request 作为参数来调用容器。Tomcat 的解决方案是引入 CoyoteAdapter，这是适配器模式的经典运用，连接器调用 CoyoteAdapter 的 Sevice 方法，传入的是 Tomcat Request 对象，CoyoteAdapter 负责将 Tomcat Request 转成 ServletRequest，再调用容器的 Service 方法。")]),t._v(" "),a("h3",{attrs:{id:"_3-3-容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-容器"}},[t._v("#")]),t._v(" 3.3. 容器")]),t._v(" "),a("p",[t._v("Tomcat 设计了 4 种容器，分别是 Engine、Host、Context 和 Wrapper。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Engine")]),t._v(" - Servlet 的顶层容器，包含一 个或多个 Host 子容器；")]),t._v(" "),a("li",[a("strong",[t._v("Host")]),t._v(" - 虚拟主机，负责 web 应用的部署和 Context 的创建；")]),t._v(" "),a("li",[a("strong",[t._v("Context")]),t._v(" - Web 应用上下文，包含多个 Wrapper，负责 web 配置的解析、管理所有的 Web 资源；")]),t._v(" "),a("li",[a("strong",[t._v("Wrapper")]),t._v(" - 最底层的容器，是对 Servlet 的封装，负责 Servlet 实例的创 建、执行和销毁。")])]),t._v(" "),a("h4",{attrs:{id:"_3-3-1-请求分发-servlet-过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-请求分发-servlet-过程"}},[t._v("#")]),t._v(" 3.3.1. 请求分发 Servlet 过程")]),t._v(" "),a("p",[t._v("Tomcat 是怎么确定请求是由哪个 Wrapper 容器里的 Servlet 来处理的呢？答案是，Tomcat 是用 Mapper 组件来完成这个任务的。")]),t._v(" "),a("p",[t._v("举例来说，假如有一个网购系统，有面向网站管理人员的后台管理系统，还有面向终端客户的在线购物系统。这两个系统跑在同一个 Tomcat 上，为了隔离它们的访问域名，配置了两个虚拟域名："),a("code",[t._v("manage.shopping.com")]),t._v("和"),a("code",[t._v("user.shopping.com")]),t._v("，网站管理人员通过"),a("code",[t._v("manage.shopping.com")]),t._v("域名访问 Tomcat 去管理用户和商品，而用户管理和商品管理是两个单独的 Web 应用。终端客户通过"),a("code",[t._v("user.shopping.com")]),t._v("域名去搜索商品和下订单，搜索功能和订单管理也是两个独立的 Web 应用。如下所示，演示了 url 应声 Servlet 的处理流程。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20201113192022.jpg",alt:"img"}})]),t._v(" "),a("p",[t._v("假如有用户访问一个 URL，比如图中的"),a("code",[t._v("http://user.shopping.com:8080/order/buy")]),t._v("，Tomcat 如何将这个 URL 定位到一个 Servlet 呢？")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("首先，根据协议和端口号选定 Service 和 Engine。")])]),t._v(" "),a("li",[a("strong",[t._v("然后，根据域名选定 Host。")])]),t._v(" "),a("li",[a("strong",[t._v("之后，根据 URL 路径找到 Context 组件。")])]),t._v(" "),a("li",[a("strong",[t._v("最后，根据 URL 路径找到 Wrapper（Servlet）。")])])]),t._v(" "),a("p",[t._v("这个路由分发过程具体是怎么实现的呢？答案是使用 Pipeline-Valve 管道。")]),t._v(" "),a("h4",{attrs:{id:"_3-3-2-pipeline-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-pipeline-value"}},[t._v("#")]),t._v(" 3.3.2. Pipeline-Value")]),t._v(" "),a("p",[t._v("Pipeline 可以理解为现实中的管道，Valve 为管道中的阀门，Request 和 Response 对象在管道中经过各个阀门的处理和控制。")]),t._v(" "),a("p",[t._v("Pipeline-Valve 是责任链模式，责任链模式是指在一个请求处理的过程中有很多处理者依次对请求进行处理，每个处理者负责做自己相应的处理，处理完之后将再调用下一个处理者继续处理。Valve 表示一个处理点，比如权限认证和记录日志。")]),t._v(" "),a("p",[t._v("先来了解一下 Valve 和 Pipeline 接口的设计：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/Pipeline%E4%B8%8EValve.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[t._v("每一个容器都有一个 Pipeline 对象，只要触发这个 Pipeline 的第一个 Valve，这个容器里 Pipeline 中的 Valve 就都会被调用到。但是，不同容器的 Pipeline 是怎么链式触发的呢，比如 Engine 中 Pipeline 需要调用下层容器 Host 中的 Pipeline。")]),t._v(" "),a("li",[t._v("这是因为 Pipeline 中还有个 getBasic 方法。这个 BasicValve 处于 Valve 链表的末端，它是 Pipeline 中必不可少的一个 Valve，负责调用下层容器的 Pipeline 里的第一个 Valve。")]),t._v(" "),a("li",[t._v("Pipeline 中有 addValve 方法。Pipeline 中维护了 Valve 链表，Valve 可以插入到 Pipeline 中，对请求做某些处理。我们还发现 Pipeline 中没有 invoke 方法，因为整个调用链的触发是 Valve 来完成的，Valve 完成自己的处理后，调用 "),a("code",[t._v("getNext.invoke()")]),t._v(" 来触发下一个 Valve 调用。")]),t._v(" "),a("li",[t._v("Valve 中主要的三个方法："),a("code",[t._v("setNext")]),t._v("、"),a("code",[t._v("getNext")]),t._v("、"),a("code",[t._v("invoke")]),t._v("。Valve 之间的关系是单向链式结构，本身 "),a("code",[t._v("invoke")]),t._v(" 方法中会调用下一个 Valve 的 "),a("code",[t._v("invoke")]),t._v(" 方法。")]),t._v(" "),a("li",[t._v("各层容器对应的 basic valve 分别是 "),a("code",[t._v("StandardEngineValve")]),t._v("、"),a("code",[t._v("StandardHostValve")]),t._v("、 "),a("code",[t._v("StandardContextValve")]),t._v("、"),a("code",[t._v("StandardWrapperValve")]),t._v("。")]),t._v(" "),a("li",[t._v("由于 Valve 是一个处理点，因此 invoke 方法就是来处理请求的。注意到 Valve 中有 getNext 和 setNext 方法，因此我们大概可以猜到有一个链表将 Valve 链起来了。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B.png",alt:"img"}})]),t._v(" "),a("p",[t._v("整个调用过程由连接器中的 Adapter 触发的，它会调用 Engine 的第一个 Valve：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("connector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getContainer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPipeline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"_4-tomcat-生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-tomcat-生命周期"}},[t._v("#")]),t._v(" 4. Tomcat 生命周期")]),t._v(" "),a("h3",{attrs:{id:"_4-1-tomcat-的启动过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-tomcat-的启动过程"}},[t._v("#")]),t._v(" 4.1. Tomcat 的启动过程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20201118145455.png",alt:"img"}})]),t._v(" "),a("ol",[a("li",[t._v("Tomcat 是一个 Java 程序，它的运行从执行 "),a("code",[t._v("startup.sh")]),t._v(" 脚本开始。"),a("code",[t._v("startup.sh")]),t._v(" 会启动一个 JVM 来运行 Tomcat 的启动类 "),a("code",[t._v("Bootstrap")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("Bootstrap")]),t._v(" 会初始化 Tomcat 的类加载器并实例化 "),a("code",[t._v("Catalina")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("Catalina")]),t._v(" 会通过 Digester 解析 "),a("code",[t._v("server.xml")]),t._v("，根据其中的配置信息来创建相应组件，并调用 "),a("code",[t._v("Server")]),t._v(" 的 "),a("code",[t._v("start")]),t._v(" 方法。")]),t._v(" "),a("li",[a("code",[t._v("Server")]),t._v(" 负责管理 "),a("code",[t._v("Service")]),t._v(" 组件，它会调用 "),a("code",[t._v("Service")]),t._v(" 的 "),a("code",[t._v("start")]),t._v(" 方法。")]),t._v(" "),a("li",[a("code",[t._v("Service")]),t._v(" 负责管理 "),a("code",[t._v("Connector")]),t._v(" 和顶层容器 "),a("code",[t._v("Engine")]),t._v("，它会调用 "),a("code",[t._v("Connector")]),t._v(" 和 "),a("code",[t._v("Engine")]),t._v(" 的 "),a("code",[t._v("start")]),t._v(" 方法。")])]),t._v(" "),a("h4",{attrs:{id:"_4-1-1-catalina-组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-catalina-组件"}},[t._v("#")]),t._v(" 4.1.1. Catalina 组件")]),t._v(" "),a("p",[t._v("Catalina 的职责就是解析 server.xml 配置，并据此实例化 Server。接下来，调用 Server 组件的 init 方法和 start 方法，将 Tomcat 启动起来。")]),t._v(" "),a("p",[t._v("Catalina 还需要处理各种“异常”情况，比如当我们通过“Ctrl + C”关闭 Tomcat 时，Tomcat 将如何优雅的停止并且清理资源呢？因此 Catalina 在 JVM 中注册一个“关闭钩子”。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1. 如果持有的 Server 实例为空，就解析 server.xml 创建出来")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2. 如果创建失败，报错退出")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fatal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"catalina.noServer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3. 启动 Server")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LifecycleException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建并注册关闭钩子")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("useShutdownHook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shutdownHook "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            shutdownHook "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CatalinaShutdownHook")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runtime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRuntime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addShutdownHook")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shutdownHook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用 await 方法监听停止请求")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("await"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("为什么需要关闭钩子？")]),t._v(" "),a("p",[t._v("如果我们需要在 JVM 关闭时做一些清理工作，比如将缓存数据刷到磁盘上，或者清理一些临时文件，可以向 JVM 注册一个“关闭钩子”。“关闭钩子”其实就是一个线程，JVM 在停止之前会尝试执行这个线程的 "),a("code",[t._v("run")]),t._v(" 方法。")]),t._v(" "),a("p",[t._v("Tomcat 的“关闭钩子”—— "),a("code",[t._v("CatalinaShutdownHook")]),t._v(" 做了些什么呢？")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CatalinaShutdownHook")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Catalina")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Tomcat 的“关闭钩子”实际上就执行了 "),a("code",[t._v("Server")]),t._v(" 的 "),a("code",[t._v("stop")]),t._v(" 方法，"),a("code",[t._v("Server")]),t._v(" 的 "),a("code",[t._v("stop")]),t._v(" 方法会释放和清理所有的资源。")]),t._v(" "),a("h4",{attrs:{id:"_4-1-2-server-组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-server-组件"}},[t._v("#")]),t._v(" 4.1.2. Server 组件")]),t._v(" "),a("p",[t._v("Server 组件的具体实现类是 StandardServer，Server 继承了 LifeCycleBase，它的生命周期被统一管理，并且它的子组件是 Service，因此它还需要管理 Service 的生命周期，也就是说在启动时调用 Service 组件的启动方法，在停止时调用它们的停止方法。Server 在内部维护了若干 Service 组件，它是以数组来保存的。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Service")]),t._v(" service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("servicesLock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个长度 +1 的新数组")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Service")]),t._v(" results"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Service")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("services"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将老的数据复制过去")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("arraycopy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("services"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" results"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" services"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        results"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("services"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        services "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" results"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 启动 Service 组件")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAvailable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LifecycleException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ignore")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 触发监听事件")]),t._v("\n        support"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("firePropertyChange")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"service"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Server 并没有一开始就分配一个很长的数组，而是在添加的过程中动态地扩展数组长度，当添加一个新的 Service 实例时，会创建一个新数组并把原来数组内容复制到新数组，这样做的目的其实是为了节省内存空间。")]),t._v(" "),a("p",[t._v("除此之外，Server 组件还有一个重要的任务是启动一个 Socket 来监听停止端口，这就是为什么你能通过 shutdown 命令来关闭 Tomcat。不知道你留意到没有，上面 Caralina 的启动方法的最后一行代码就是调用了 Server 的 await 方法。")]),t._v(" "),a("p",[t._v("在 await 方法里会创建一个 Socket 监听 8005 端口，并在一个死循环里接收 Socket 上的连接请求，如果有新的连接到来就建立连接，然后从 Socket 中读取数据；如果读到的数据是停止命令“SHUTDOWN”，就退出循环，进入 stop 流程。")]),t._v(" "),a("h4",{attrs:{id:"_4-1-3-service-组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-3-service-组件"}},[t._v("#")]),t._v(" 4.1.3. Service 组件")]),t._v(" "),a("p",[t._v("Service 组件的具体实现类是 StandardService。")]),t._v(" "),a("p",[t._v("【源码】StandardService 源码定义")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StandardService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LifecycleBase")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Service")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 名字")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Server 实例")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Server")]),t._v(" server "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 连接器数组")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Connector")]),t._v(" connectors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Connector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" connectorsLock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应的 Engine 容器")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Engine")]),t._v(" engine "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 映射器及其监听器")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mapper")]),t._v(" mapper "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mapper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MapperListener")]),t._v(" mapperListener "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MapperListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("StandardService 继承了 LifecycleBase 抽象类。")]),t._v(" "),a("p",[t._v("StandardService 维护了一个 MapperListener 用于支持 Tomcat 热部署。当 Web 应用的部署发生变化时，Mapper 中的映射信息也要跟着变化，MapperListener 就是一个监听器，它监听容器的变化，并把信息更新到 Mapper 中，这是典型的观察者模式。")]),t._v(" "),a("p",[t._v("作为“管理”角色的组件，最重要的是维护其他组件的生命周期。此外在启动各种组件时，要注意它们的依赖关系，也就是说，要注意启动的顺序。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("startInternal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LifecycleException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1. 触发启动监听器")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LifecycleState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STARTING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2. 先启动 Engine，Engine 会启动它子容器")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("engine "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("engine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            engine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3. 再启动 Mapper 监听器")]),t._v("\n    mapperListener"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4. 最后启动连接器，连接器会启动它子组件，比如 Endpoint")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connectorsLock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Connector")]),t._v(" connector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" connectors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LifecycleState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FAILED")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                connector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("从启动方法可以看到，Service 先启动了 Engine 组件，再启动 Mapper 监听器，最后才是启动连接器。这很好理解，因为内层组件启动好了才能对外提供服务，才能启动外层的连接器组件。而 Mapper 也依赖容器组件，容器组件启动好了才能监听它们的变化，因此 Mapper 和 MapperListener 在容器组件之后启动。组件停止的顺序跟启动顺序正好相反的，也是基于它们的依赖关系。")]),t._v(" "),a("h4",{attrs:{id:"_4-1-4-engine-组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-4-engine-组件"}},[t._v("#")]),t._v(" 4.1.4. Engine 组件")]),t._v(" "),a("p",[t._v("Engine 本质是一个容器，因此它继承了 ContainerBase 基类，并且实现了 Engine 接口。")]),t._v(" "),a("h3",{attrs:{id:"_4-2-web-应用的部署方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-web-应用的部署方式"}},[t._v("#")]),t._v(" 4.2. Web 应用的部署方式")]),t._v(" "),a("p",[t._v("注：catalina.home：安装目录;catalina.base：工作目录;默认值 user.dir")]),t._v(" "),a("ul",[a("li",[t._v("Server.xml 配置 Host 元素，指定 appBase 属性，默认$catalina.base/webapps/")]),t._v(" "),a("li",[t._v("Server.xml 配置 Context 元素，指定 docBase，元素，指定 web 应用的路径")]),t._v(" "),a("li",[t._v("自定义配置：在$catalina.base/EngineName/HostName/XXX.xml 配置 Context 元素")])]),t._v(" "),a("p",[t._v("HostConfig 监听了 StandardHost 容器的事件，在 start 方法中解析上述配置文件：")]),t._v(" "),a("ul",[a("li",[t._v("扫描 appbase 路径下的所有文件夹和 war 包，解析各个应用的 META-INF/context.xml，并 创建 StandardContext，并将 Context 加入到 Host 的子容器中。")]),t._v(" "),a("li",[t._v("解析$catalina.base/EngineName/HostName/下的所有 Context 配置，找到相应 web 应 用的位置，解析各个应用的 META-INF/context.xml，并创建 StandardContext，并将 Context 加入到 Host 的子容器中。")])]),t._v(" "),a("p",[t._v("注：")]),t._v(" "),a("ul",[a("li",[t._v("HostConfig 并没有实际解析 Context.xml，而是在 ContextConfig 中进行的。")]),t._v(" "),a("li",[t._v("HostConfig 中会定期检查 watched 资源文件(context.xml 配置文件)")])]),t._v(" "),a("p",[t._v("ContextConfig 解析 context.xml 顺序：")]),t._v(" "),a("ul",[a("li",[t._v("先解析全局的配置 config/context.xml")]),t._v(" "),a("li",[t._v("然后解析 Host 的默认配置 EngineName/HostName/context.xml.default")]),t._v(" "),a("li",[t._v("最后解析应用的 META-INF/context.xml")])]),t._v(" "),a("p",[t._v("ContextConfig 解析 web.xml 顺序：")]),t._v(" "),a("ul",[a("li",[t._v("先解析全局的配置 config/web.xml")]),t._v(" "),a("li",[t._v("然后解析 Host 的默认配置 EngineName/HostName/web.xml.default 接着解析应用的 MEB-INF/web.xml")]),t._v(" "),a("li",[t._v("扫描应用 WEB-INF/lib/下的 jar 文件，解析其中的 META-INF/web-fragment.xml 最后合并 xml 封装成 WebXml，并设置 Context")])]),t._v(" "),a("p",[t._v("注：")]),t._v(" "),a("ul",[a("li",[t._v("扫描 web 应用和 jar 中的注解(Filter、Listener、Servlet)就是上述步骤中进行的。")]),t._v(" "),a("li",[t._v("容器的定期执行：backgroundProcess，由 ContainerBase 来实现的，并且只有在顶层容器 中才会开启线程。(backgroundProcessorDelay=10 标志位来控制)")])]),t._v(" "),a("h3",{attrs:{id:"_4-3-lifecycle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-lifecycle"}},[t._v("#")]),t._v(" 4.3. LifeCycle")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20201118105012.png",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"_4-3-1-请求处理过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-请求处理过程"}},[t._v("#")]),t._v(" 4.3.1. 请求处理过程")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/请求处理过程.png",width:"600"}})]),t._v(" "),a("ol",[a("li",[t._v("根据 server.xml 配置的指定的 connector 以及端口监听 http、或者 ajp 请求")]),t._v(" "),a("li",[t._v("请求到来时建立连接,解析请求参数,创建 Request 和 Response 对象,调用顶层容器 pipeline 的 invoke 方法")]),t._v(" "),a("li",[t._v("容器之间层层调用,最终调用业务 servlet 的 service 方法")]),t._v(" "),a("li",[t._v("Connector 将 response 流中的数据写到 socket 中")])]),t._v(" "),a("h3",{attrs:{id:"_4-4-connector-流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-connector-流程"}},[t._v("#")]),t._v(" 4.4. Connector 流程")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/connector.png",width:"600"}})]),t._v(" "),a("h4",{attrs:{id:"_4-4-1-阻塞-io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-阻塞-io"}},[t._v("#")]),t._v(" 4.4.1. 阻塞 IO")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/阻塞IO.png",width:"600"}})]),t._v(" "),a("h4",{attrs:{id:"_4-4-2-非阻塞-io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-2-非阻塞-io"}},[t._v("#")]),t._v(" 4.4.2. 非阻塞 IO")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/非阻塞IO.png",width:"600"}})]),t._v(" "),a("h4",{attrs:{id:"_4-4-3-io-多路复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-3-io-多路复用"}},[t._v("#")]),t._v(" 4.4.3. IO 多路复用")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/IO多路复用.png",width:"600"}})]),t._v(" "),a("p",[t._v("阻塞与非阻塞的区别在于进行读操作和写操作的系统调用时，如果此时内核态没有数据可读或者没有缓冲空间可写时，是否阻塞。")]),t._v(" "),a("p",[t._v("IO 多路复用的好处在于可同时监听多个 socket 的可读和可写事件，这样就能使得应用可以同时监听多个 socket，释放了应用线程资源。")]),t._v(" "),a("h4",{attrs:{id:"_4-4-4-tomcat-各类-connector-对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-4-tomcat-各类-connector-对比"}},[t._v("#")]),t._v(" 4.4.4. Tomcat 各类 Connector 对比")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/Tomcat各类Connector对比.jpg",width:"500"}})]),t._v(" "),a("ul",[a("li",[t._v("JIO：用 java.io 编写的 TCP 模块，阻塞 IO")]),t._v(" "),a("li",[t._v("NIO：用 java.nio 编写的 TCP 模块，非阻塞 IO，（IO 多路复用）")]),t._v(" "),a("li",[t._v("APR：全称 Apache Portable Runtime，使用 JNI 的方式来进行读取文件以及进行网络传输")])]),t._v(" "),a("p",[t._v("Apache Portable Runtime 是一个高度可移植的库，它是 Apache HTTP Server 2.x 的核心。 APR 具有许多用途，包括访问高级 IO 功能（如 sendfile，epoll 和 OpenSSL），操作系统级功能（随机数生成，系统状态等）和本地进程处理（共享内存，NT 管道和 Unix 套接字）。")]),t._v(" "),a("p",[t._v("表格中字段含义说明：")]),t._v(" "),a("ul",[a("li",[t._v("Support Polling - 是否支持基于 IO 多路复用的 socket 事件轮询")]),t._v(" "),a("li",[t._v("Polling Size - 轮询的最大连接数")]),t._v(" "),a("li",[t._v("Wait for next Request - 在等待下一个请求时，处理线程是否释放，BIO 是没有释放的，所以在 keep-alive=true 的情况下处理的并发连接数有限")]),t._v(" "),a("li",[t._v("Read Request Headers - 由于 request header 数据较少，可以由容器提前解析完毕，不需要阻塞")]),t._v(" "),a("li",[t._v("Read Request Body - 读取 request body 的数据是应用业务逻辑的事情，同时 Servlet 的限制，是需要阻塞读取的")]),t._v(" "),a("li",[t._v("Write Response - 跟读取 request body 的逻辑类似，同样需要阻塞写")])]),t._v(" "),a("p",[a("strong",[t._v("NIO 处理相关类")])]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/NIO处理相关类.jpg",width:"500"}})]),t._v(" "),a("p",[t._v("Poller 线程从 EventQueue 获取 PollerEvent，并执行 PollerEvent 的 run 方法，调用 Selector 的 select 方法，如果有可读的 Socket 则创建 Http11NioProcessor，放入到线程池中执行；")]),t._v(" "),a("p",[t._v("CoyoteAdapter 是 Connector 到 Container 的适配器，Http11NioProcessor 调用其提供的 service 方法，内部创建 Request 和 Response 对象，并调用最顶层容器的 Pipeline 中的第一个 Valve 的 invoke 方法")]),t._v(" "),a("p",[t._v("Mapper 主要处理 http url 到 servlet 的映射规则的解析，对外提供 map 方法")]),t._v(" "),a("h3",{attrs:{id:"_4-5-comet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-comet"}},[t._v("#")]),t._v(" 4.5. Comet")]),t._v(" "),a("p",[t._v("Comet 是一种用于 web 的推送技术，能使服务器实时地将更新的信息传送到客户端，而无须客户端发出请求\n在 WebSocket 出来之前，如果不适用 comet，只能通过浏览器端轮询 Server 来模拟实现服务器端推送。\nComet 支持 servlet 异步处理 IO，当连接上数据可读时触发事件，并异步写数据(阻塞)")]),t._v(" "),a("p",[t._v("Tomcat 要实现 Comet，只需继承 HttpServlet 同时，实现 CometProcessor 接口")]),t._v(" "),a("ul",[a("li",[t._v("Begin：新的请求连接接入调用，可进行与 Request 和 Response 相关的对象初始化操作，并保存 response 对象，用于后续写入数据")]),t._v(" "),a("li",[t._v("Read：请求连接有数据可读时调用")]),t._v(" "),a("li",[t._v("End：当数据可用时，如果读取到文件结束或者 response 被关闭时则被调用")]),t._v(" "),a("li",[t._v("Error：在连接上发生异常时调用，数据读取异常、连接断开、处理异常、socket 超时")])]),t._v(" "),a("p",[t._v("Note：")]),t._v(" "),a("ul",[a("li",[t._v("Read：在 post 请求有数据，但在 begin 事件中没有处理，则会调用 read，如果 read 没有读取数据，在会触发 Error 回调，关闭 socket")]),t._v(" "),a("li",[t._v("End：当 socket 超时，并且 response 被关闭时也会调用；server 被关闭时调用")]),t._v(" "),a("li",[t._v("Error：除了 socket 超时不会关闭 socket，其他都会关闭 socket")]),t._v(" "),a("li",[t._v("End 和 Error 时间触发时应关闭当前 comet 会话，即调用 CometEvent 的 close 方法\nNote：在事件触发时要做好线程安全的操作")])]),t._v(" "),a("h3",{attrs:{id:"_4-6-异步-servlet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-异步-servlet"}},[t._v("#")]),t._v(" 4.6. 异步 Servlet")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/传统Servlet处理流程.png"}})]),t._v(" "),a("p",[t._v("传统流程：")]),t._v(" "),a("ul",[a("li",[t._v("首先，Servlet 接收到请求之后，request 数据解析；")]),t._v(" "),a("li",[t._v("接着，调用业务接口的某些方法，以完成业务处理；")]),t._v(" "),a("li",[t._v("最后，根据处理的结果提交响应，Servlet 线程结束")])]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/异步Servlet处理流程.png"}})]),t._v(" "),a("p",[t._v("异步处理流程：")]),t._v(" "),a("ul",[a("li",[t._v("客户端发送一个请求")]),t._v(" "),a("li",[t._v("Servlet 容器分配一个线程来处理容器中的一个 servlet")]),t._v(" "),a("li",[t._v("servlet 调用 request.startAsync()，保存 AsyncContext, 然后返回")]),t._v(" "),a("li",[t._v("任何方式存在的容器线程都将退出，但是 response 仍然保持开放")]),t._v(" "),a("li",[t._v("业务线程使用保存的 AsyncContext 来完成响应（线程池）")]),t._v(" "),a("li",[t._v("客户端收到响应")])]),t._v(" "),a("p",[t._v("Servlet 线程将请求转交给一个异步线程来执行业务处理，线程本身返回至容器，此时 Servlet 还没有生成响应数据，异步线程处理完业务以后，可以直接生成响应数据（异步线程拥有 ServletRequest 和 ServletResponse 对象的引用）")]),t._v(" "),a("p",[a("strong",[t._v("为什么 web 应用中支持异步？")])]),t._v(" "),a("p",[t._v("推出异步，主要是针对那些比较耗时的请求：比如一次缓慢的数据库查询，一次外部 REST API 调用, 或者是其他一些 I/O 密集型操作。这种耗时的请求会很快的耗光 Servlet 容器的线程池，继而影响可扩展性。")]),t._v(" "),a("p",[t._v("Note：从客户端的角度来看，request 仍然像任何其他的 HTTP 的 request-response 交互一样，只是耗费了更长的时间而已")]),t._v(" "),a("p",[a("strong",[t._v("异步事件监听")])]),t._v(" "),a("ul",[a("li",[t._v("onStartAsync：Request 调用 startAsync 方法时触发")]),t._v(" "),a("li",[t._v("onComplete：syncContext 调用 complete 方法时触发")]),t._v(" "),a("li",[t._v("onError：处理请求的过程出现异常时触发")]),t._v(" "),a("li",[t._v("onTimeout：socket 超时触发")])]),t._v(" "),a("p",[t._v("Note :\nonError/ onTimeout 触发后，会紧接着回调 onComplete\nonComplete 执行后，就不可再操作 request 和 response")]),t._v(" "),a("h2",{attrs:{id:"_5-参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-参考资料"}},[t._v("#")]),t._v(" 5. 参考资料")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("官方")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://tomcat.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tomcat 官方网站"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://wiki.apache.org/tomcat/FrontPage",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tomcat Wiki"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://tomee.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tomee 官方网站"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("文章")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/basic_app_embedded_tomcat/basic_app-tomcat-embedded.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Creating a Web App with Bootstrap and Tomcat Embedded"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/58eb5fdda0bb9f00692a78fc",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tomcat 组成与工作原理"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tomcat 工作原理"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat2/index.html?ca=drs-",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tomcat 设计模式分析"),a("OutboundLink")],1)])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);