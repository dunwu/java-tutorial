(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{493:function(t,a,s){"use strict";s.r(a);var e=s(14),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"hystrix-快速入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hystrix-快速入门"}},[t._v("#")]),t._v(" Hystrix 快速入门")]),t._v(" "),a("h2",{attrs:{id:"hystrix-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hystrix-简介"}},[t._v("#")]),t._v(" Hystrix 简介")]),t._v(" "),a("h3",{attrs:{id:"hystrix-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hystrix-是什么"}},[t._v("#")]),t._v(" Hystrix 是什么")]),t._v(" "),a("p",[t._v("Hystrix 是由 Netflix 开源，用于处理分布式系统的延迟和容错的一个开源组件。在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等。Hystrix 采用"),a("strong",[t._v("断路器模式")]),t._v("来实现服务间的彼此隔离，从而避免级联故障，以提高分布式系统整体的弹性。")]),t._v(" "),a("p",[t._v("“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），"),a("strong",[t._v("向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常")]),t._v("，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。")]),t._v(" "),a("p",[t._v("Hystrix 官方已宣布"),a("strong",[t._v("不再发布新版本")]),t._v("。但是，Hystrix 的断路器设计理念，有非常高的学习价值。")]),t._v(" "),a("h3",{attrs:{id:"为什么需要-hystrix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要-hystrix"}},[t._v("#")]),t._v(" 为什么需要 Hystrix")]),t._v(" "),a("p",[t._v("复杂的分布式系统架构中的应用程序往往具有数十个依赖项，每个依赖项都会不可避免地在某个时刻失败。 如果主机应用程序未与这些外部故障隔离开来，则可能会被波及。")]),t._v(" "),a("p",[t._v("例如，对于依赖于 30 个服务的应用程序，假设每个服务的正常运行时间为 99.99％，则可以期望：")]),t._v(" "),a("blockquote",[a("p",[t._v("99.99"),a("sup",[t._v("30")]),t._v(" = 99.7％ 的正常运行时间")]),t._v(" "),a("p",[t._v("10 亿个请求中的 0.3％= 3,000,000 个失败")]),t._v(" "),a("p",[t._v("即使所有依赖项都具有出色的正常运行时间，每月也会有 2 个小时以上的停机时间。")]),t._v(" "),a("p",[t._v("然而，现实情况一般比这种估量情况更糟糕。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("当一切正常时，整体系统如下所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20200717141615.png",alt:"img"}})]),t._v(" "),a("p",[t._v("在高并发场景，这些依赖的稳定性与否对系统的影响非常大，但是依赖有很多不可控问题：如网络连接、资源繁忙、服务宕机等。例如：下图中有一个 QPS 为 50 的依赖 I 出现不可用，但是其他依赖服务是可用的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20200717141749.png",alt:"img"}})]),t._v(" "),a("p",[t._v("但是，在高并发场景下，当依赖 I 阻塞时，大多数服务器的线程池就出现阻塞(BLOCK)。当这种级联故障愈演愈烈，就可能造成整个线上服务不可用的雪崩效应，如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20200717141859.png",alt:"img"}})]),t._v(" "),a("p",[t._v("Hystrix 就是为了解决这类问题而应运而生。")]),t._v(" "),a("h3",{attrs:{id:"hystrix-的功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hystrix-的功能"}},[t._v("#")]),t._v(" Hystrix 的功能")]),t._v(" "),a("p",[t._v("Hystrix 具有以下功能：")]),t._v(" "),a("ul",[a("li",[t._v("避免资源耗尽：阻止任何一个依赖服务耗尽所有的资源，比如 tomcat 中的所有线程资源。")]),t._v(" "),a("li",[t._v("避免请求排队和积压：采用限流和 "),a("code",[t._v("fail fast")]),t._v(" 来控制故障。")]),t._v(" "),a("li",[t._v("支持降级：提供 fallback 降级机制来应对故障。")]),t._v(" "),a("li",[t._v("资源隔离：比如 "),a("code",[t._v("bulkhead")]),t._v("（舱壁隔离技术）、"),a("code",[t._v("swimlane")]),t._v("（泳道技术）、"),a("code",[t._v("circuit breaker")]),t._v("（断路技术）来限制任何一个依赖服务的故障的影响。")]),t._v(" "),a("li",[t._v("统计/监控/报警：通过近实时的统计/监控/报警功能，来提高故障发现的速度。")]),t._v(" "),a("li",[t._v("通过近实时的属性和配置"),a("strong",[t._v("热修改")]),t._v("功能，来提高故障处理和恢复的速度。")]),t._v(" "),a("li",[t._v("保护依赖服务调用的所有故障情况，而不仅仅只是网络故障情况。")])]),t._v(" "),a("p",[t._v("如果使用 Hystrix 对每个基础依赖服务进行过载保护，则整个系统架构将会类似下图所示，每个依赖项彼此隔离，受到延迟时发生饱和的资源的被限制访问，并包含 fallback 逻辑（用于降级处理），该逻辑决定了在依赖项中发生任何类型的故障时做出对应的处理。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20200717142842.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"hystrix-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hystrix-原理"}},[t._v("#")]),t._v(" Hystrix 原理")]),t._v(" "),a("p",[t._v("如下图所示，Hystrix 的工作流程大致可以分为 9 个步骤。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20200717143247.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"一-构建一个-hystrixcommand-或-hystrixobservablecommand-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-构建一个-hystrixcommand-或-hystrixobservablecommand-对象"}},[t._v("#")]),t._v(" （一）构建一个 HystrixCommand 或 HystrixObservableCommand 对象")]),t._v(" "),a("p",[t._v("Hystrix 进行资源隔离，其实是提供了一个抽象，叫做命令模式。这也是 Hystrix 最基本的资源隔离技术。")]),t._v(" "),a("p",[t._v("在使用 Hystrix 的过程中，会对依赖服务的调用请求封装成命令对象，Hystrix 对 命令对象抽象了两个抽象类："),a("code",[t._v("HystrixCommand")]),t._v(" 和 "),a("code",[t._v("HystrixObservableCommand")]),t._v(" 。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("HystrixCommand")]),t._v(" 表示的命令对象会返回一个唯一返回值。")]),t._v(" "),a("li",[a("code",[t._v("HystrixObservableCommand")]),t._v(" 表示的命令对象 会返回多个返回值。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HystrixCommand")]),t._v(" command "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HystrixCommand")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HystrixObservableCommand")]),t._v(" command "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HystrixObservableCommand")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"二-执行命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-执行命令"}},[t._v("#")]),t._v(" （二）执行命令")]),t._v(" "),a("p",[t._v("Hystrix 中共有 4 种方式执行命令，如下所示：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("执行方式")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("可用对象")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#execute()",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("execute()")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("阻塞式同步执行，返回依赖服务的单一返回结果(或者抛出异常)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("HystrixCommand")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#queue()",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("queue()")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("异步执行，通过 "),a("code",[t._v("Future")]),t._v(" 返回依赖服务的单一返回结果(或者抛出异常)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("HystrixCommand")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#observe()",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("observe()")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("基于 Rxjava 的 Observable 方式，返回通过 Observable 表示的依赖服务返回结果。代调用代码先执行(Hot Obserable)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("HystrixObservableCommand")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#toObservable()",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("toObservable()")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("基于 Rxjava 的 Observable 方式，返回通过 Observable 表示的依赖服务返回结果。执行代码等到真正订阅的时候才会执行(cold observable)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("HystrixObservableCommand")])])])])]),t._v(" "),a("p",[t._v("这四种命令中，"),a("code",[t._v("exeucte()")]),t._v("、"),a("code",[t._v("queue()")]),t._v("、"),a("code",[t._v("observe()")]),t._v(" 的表示其实是通过 "),a("code",[t._v("toObservable()")]),t._v(" 实现的，其转换关系如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/14126519-60964d9fa41614c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/563/format/webp",alt:"img"}})]),t._v(" "),a("p",[a("code",[t._v("HystrixCommand")]),t._v(" 执行方式")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" value   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价语句：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("queue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" fValue  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("queue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等价语句：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" fValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toObservable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toBlocking")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toFuture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Observable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" ohValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//hot observable，立刻订阅，命令立刻执行")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等价语句：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Observable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" ohValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toObservable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上述执行最终实现还是基于 toObservable()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Observable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" ocValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toObservable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//cold observable，延后订阅，订阅发生后，执行才真正执行")]),t._v("\n")])])]),a("h3",{attrs:{id:"三-是否缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-是否缓存"}},[t._v("#")]),t._v(" （三）是否缓存")]),t._v(" "),a("p",[t._v("如果当前命令对象启用了请求缓存，并且请求的响应存在于缓存中，则缓存的响应会立刻以 "),a("code",[t._v("Observable")]),t._v(" 的形式返回。")]),t._v(" "),a("h3",{attrs:{id:"四-是否开启断路器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-是否开启断路器"}},[t._v("#")]),t._v(" （四）是否开启断路器")]),t._v(" "),a("p",[t._v("如果第三步没有缓存没有命中，则判断一下当前断路器的断路状态是否打开。如果断路器状态为打开状态，则 Hystrix 将不会执行此 Command 命令，直接执行步骤 8 调用 Fallback；")]),t._v(" "),a("p",[t._v("如果断路器状态是关闭，则执行步骤 5 检查是否有足够的资源运行 Command 命令")]),t._v(" "),a("h3",{attrs:{id:"五-信号量、线程池是否拒绝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-信号量、线程池是否拒绝"}},[t._v("#")]),t._v(" （五）信号量、线程池是否拒绝")]),t._v(" "),a("p",[t._v("当您执行该命令时，Hystrix 会检查断路器以查看电路是否打开。")]),t._v(" "),a("p",[t._v("如果电路开路（或“跳闸”），则 Hystrix 将不会执行该命令，而是将流程路由到 (8) 获取回退。")]),t._v(" "),a("p",[t._v("如果电路闭合，则流程前进至 (5) 以检查是否有可用容量来运行命令。")]),t._v(" "),a("p",[t._v("如果当前要执行的 Command 命令 先关连的线程池 和队列(或者信号量)资源已经满了，Hystrix 将不会运行 Command 命令，直接执行 "),a("strong",[t._v("步骤 8")]),t._v("的 Fallback 降级处理；如果未满，表示有剩余的资源执行 Command 命令，则执行"),a("strong",[t._v("步骤 6")])]),t._v(" "),a("h3",{attrs:{id:"六-construct-或-run"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六-construct-或-run"}},[t._v("#")]),t._v(" （六）construct() 或 run()")]),t._v(" "),a("p",[t._v("当经过"),a("strong",[t._v("步骤 5")]),t._v(" 判断，有足够的资源执行 Command 命令时，本步骤将调用 Command 命令运行方法，基于不同类型的 Command，有如下两种两种运行方式：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("运行方式")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("HystrixCommand.run()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回一个处理结果或者抛出一个异常")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("HystrixObservableCommand.construct()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回一个 Observable 表示的结果(可能多个)，或者 基于"),a("code",[t._v("onError")]),t._v("的错误通知")])])])]),t._v(" "),a("p",[t._v("如果"),a("code",[t._v("run()")]),t._v(" 或者"),a("code",[t._v("construct()")]),t._v("方法 的"),a("code",[t._v("真实执行时间")]),t._v("超过了 Command 设置的"),a("code",[t._v("超时时间阈值")]),t._v(", 则"),a("strong",[t._v("当前则执行线程")]),t._v("（或者是独立的定时器线程）将会抛出"),a("code",[t._v("TimeoutException")]),t._v("。抛出超时异常 TimeoutException，后，将执行"),a("strong",[t._v("步骤 8")]),t._v("的 Fallback 降级处理。即使"),a("code",[t._v("run()")]),t._v("或者"),a("code",[t._v("construct()")]),t._v("执行没有被取消或中断，最终能够处理返回结果，但在降级处理逻辑中，将会抛弃"),a("code",[t._v("run()")]),t._v("或"),a("code",[t._v("construct()")]),t._v("方法的返回结果，而返回 Fallback 降级处理结果。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("注意事项")]),t._v("\n需要注意的是，Hystrix 无法强制 将正在运行的线程停止掉--Hystrix 能够做的最好的方式就是在 JVM 中抛出一个"),a("code",[t._v("InterruptedException")]),t._v("。如果 Hystrix 包装的工作不抛出中断异常"),a("code",[t._v("InterruptedException")]),t._v(", 则在 Hystrix 线程池中的线程将会继续执行，尽管"),a("code",[t._v("调用的客户端")]),t._v("已经接收到了"),a("code",[t._v("TimeoutException")]),t._v("。这种方式会使 Hystrix 的线程池处于饱和状态。大部分的 Java Http Client 开源库并不会解析 "),a("code",[t._v("InterruptedException")]),t._v("。所以确认 HTTP client 相关的连接和读/写相关的超时时间设置。\n如果 Command 命令没有抛出任何异常，并且有返回结果，则 Hystrix 将会在做完日志记录和统计之后会将结果返回。 如果是通过"),a("code",[t._v("run()")]),t._v("方式运行，则返回一个"),a("code",[t._v("Obserable")]),t._v("对象，包含一个唯一值，并且发送一个"),a("code",[t._v("onCompleted")]),t._v("通知；如果是通过"),a("code",[t._v("consturct()")]),t._v("方式运行 ，则返回一个"),a("code",[t._v("Observable对象")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"七-健康检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七-健康检查"}},[t._v("#")]),t._v(" （七）健康检查")]),t._v(" "),a("p",[t._v("Hystrix 会统计 Command 命令执行执行过程中的"),a("strong",[t._v("成功数")]),t._v("、"),a("strong",[t._v("失败数")]),t._v("、"),a("strong",[t._v("拒绝数")]),t._v("和"),a("strong",[t._v("超时数")]),t._v(",将这些信息记录到"),a("strong",[t._v("断路器(Circuit Breaker)"),a("strong",[t._v("中。断路器将上述统计按照")]),t._v("时间窗")]),t._v("的形式记录到一个定长数组中。断路器根据时间窗内的统计数据去判定请求什么时候可以被熔断，熔断后，在接下来一段恢复周期内，相同的请求过来后会直接被熔断。当再次校验，如果健康监测通过后，熔断开关将会被关闭。")]),t._v(" "),a("h3",{attrs:{id:"八-获取-fallback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八-获取-fallback"}},[t._v("#")]),t._v(" （八）获取 Fallback")]),t._v(" "),a("p",[t._v("当以下场景出现后，Hystrix 将会尝试触发 "),a("code",[t._v("Fallback")]),t._v(":")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("步骤 6 Command 执行时抛出了任何异常；")]),t._v(" "),a("li",[t._v("步骤 4 断路器已经被打开")]),t._v(" "),a("li",[t._v("步骤 5 执行命令的线程池、队列或者信号量资源已满")]),t._v(" "),a("li",[t._v("命令执行的时间超过阈值")])])]),t._v(" "),a("h3",{attrs:{id:"九-返回结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九-返回结果"}},[t._v("#")]),t._v(" （九）返回结果")]),t._v(" "),a("p",[t._v("如果 Hystrix 命令对象执行成功，将会返回结果，或者以"),a("code",[t._v("Observable")]),t._v("形式包装的结果。根据"),a("strong",[t._v("步骤 2")]),t._v("的 command 调用方式，返回的"),a("code",[t._v("Observable")]),t._v(" 会按照如下图说是的转换关系进行返回：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/14126519-8790f97df332d9a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("code",[t._v("execute()")]),t._v(" — 用和 "),a("code",[t._v(".queue()")]),t._v(" 相同的方式获取 "),a("code",[t._v("Future")]),t._v("，然后调用 "),a("code",[t._v("Future")]),t._v(" 的 "),a("code",[t._v("get()")]),t._v(" 以获取 "),a("code",[t._v("Observable")]),t._v(" 的单个值。")]),t._v(" "),a("li",[a("code",[t._v("queue()")]),t._v(" —将 "),a("code",[t._v("Observable")]),t._v(" 转换为 "),a("code",[t._v("BlockingObservable")]),t._v("，以便可以将其转换为 "),a("code",[t._v("Future")]),t._v(" 并返回。")]),t._v(" "),a("li",[a("code",[t._v("watch()")]),t._v(" —订阅 "),a("code",[t._v("Observable")]),t._v(" 并开始执行命令的流程； 返回一个 "),a("code",[t._v("Observable")]),t._v("，当订阅该 "),a("code",[t._v("Observable")]),t._v(" 时，它会重新通知。")]),t._v(" "),a("li",[a("code",[t._v("toObservable()")]),t._v(" —返回不变的 "),a("code",[t._v("Observable")]),t._v("； 必须订阅它才能真正开始执行命令的流程。")])]),t._v(" "),a("h2",{attrs:{id:"断路器工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#断路器工作原理"}},[t._v("#")]),t._v(" 断路器工作原理")]),t._v(" "),a("p",[a("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/14126519-dce007513bf90794.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp",alt:"img"}})]),t._v(" "),a("ol",[a("li",[t._v("断路器时间窗内的请求数 是否超过了"),a("strong",[t._v("请求数断路器生效阈值")]),a("code",[t._v("circuitBreaker.requestVolumeThreshold")]),t._v(",如果超过了阈值，则将会触发断路，断路状态为"),a("strong",[t._v("开启")]),t._v("\n例如，如果当前阈值设置的是"),a("code",[t._v("20")]),t._v(",则当时间窗内统计的请求数共计 19 个，即使 19 个全部失败了，都不会触发断路器。")]),t._v(" "),a("li",[t._v("并且请求错误率超过了"),a("strong",[t._v("请求错误率阈值")]),a("code",[t._v("errorThresholdPercentage")])]),t._v(" "),a("li",[t._v("如果两个都满足，则将断路器由"),a("strong",[t._v("关闭")]),t._v("迁移到"),a("strong",[t._v("开启")])]),t._v(" "),a("li",[t._v("如果断路器开启，则后续的所有相同请求将会被断路掉；")]),t._v(" "),a("li",[t._v("直到过了"),a("strong",[t._v("沉睡时间窗")]),a("code",[t._v("sleepWindowInMilliseconds")]),t._v("后，再发起请求时，允许其通过（此时的状态为"),a("strong",[t._v("半开起状态")]),t._v("）。如果请求失败了，则保持断路器状态为"),a("strong",[t._v("开启")]),t._v("状态，并更新"),a("strong",[t._v("沉睡时间窗")]),t._v("。如果请求成功了，则将断路器状态改为"),a("strong",[t._v("关闭")]),t._v("状态；")])]),t._v(" "),a("p",[t._v("核心的逻辑如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HealthCounts")]),t._v(" hc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// check if we are past the statisticalWindowVolumeThreshold")]),t._v("\n                            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTotalRequests")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" properties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("circuitBreakerRequestVolumeThreshold")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// we are not past the minimum volume threshold for the stat window,")]),t._v("\n                                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// so no change to circuit status.")]),t._v("\n                                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if it was CLOSED, it stays CLOSED")]),t._v("\n                                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if it was half-open, we need to wait for a successful command execution")]),t._v("\n                                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if it was open, we need to wait for sleep window to elapse")]),t._v("\n                            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getErrorPercentage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" properties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("circuitBreakerErrorThresholdPercentage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//we are not past the minimum error threshold for the stat window,")]),t._v("\n                                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// so no change to circuit status.")]),t._v("\n                                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if it was CLOSED, it stays CLOSED")]),t._v("\n                                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if it was half-open, we need to wait for a successful command execution")]),t._v("\n                                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if it was open, we need to wait for sleep window to elapse")]),t._v("\n                                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// our failure rate is too high, we need to set the state to OPEN")]),t._v("\n                                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Status")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CLOSED")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Status")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OPEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                                        circuitOpened"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentTimeMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"系统指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统指标"}},[t._v("#")]),t._v(" 系统指标")]),t._v(" "),a("p",[t._v("Hystrix 对系统指标的统计是基于时间窗模式的：")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("时间窗")]),t._v("：最近的一个时间区间内，比如前一小时到现在，那么时间窗的长度就是"),a("code",[t._v("1小时")]),t._v("；\n"),a("strong",[t._v("桶")]),t._v("：桶是在特定的"),a("strong",[t._v("时间窗")]),t._v("内，等分的指标收集的统计集合；比如时间窗的长度为"),a("code",[t._v("1小时")]),t._v("，而桶的数量为"),a("code",[t._v("10")]),t._v(",那么每个桶在时间轴上依次排开，时间由远及近，每个桶统计的时间分片为 "),a("code",[t._v("1h / 10 = 6 min")]),t._v(" 6 分钟。一个桶中，包含了"),a("code",[t._v("成功数")]),t._v("、"),a("code",[t._v("失败数")]),t._v("、"),a("code",[t._v("超时数")]),t._v("、"),a("code",[t._v("拒绝数")]),t._v(" 四个指标。")])]),t._v(" "),a("p",[t._v("在系统内，时间窗会随着系统的运行逐渐向前移动，而时间窗的长度和桶的数量是固定不变的，那么随着时间的移动，会出现较久的过期的桶被移除出去，新的桶被添加进来，如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/14126519-11710915e1a5dcda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"资源隔离技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源隔离技术"}},[t._v("#")]),t._v(" 资源隔离技术")]),t._v(" "),a("h3",{attrs:{id:"线程池隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池隔离"}},[t._v("#")]),t._v(" 线程池隔离")]),t._v(" "),a("p",[t._v("如下图所示，由于计算机系统的基本执行单位就是线程，线程具备独立的执行能力，所以，为了做到资源保护，需要对系统的线程池进行划分，对于外部调用方")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("User Request\n")])])]),a("p",[t._v("的请求，调用各个线程池的服务，各个线程池独立完成调用，然后将结果返回")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("调用方\n")])])]),a("p",[t._v("。在调用服务的过程中，如果")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("服务提供方\n")])])]),a("p",[t._v("执行时间过长，则")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("调用方\n")])])]),a("p",[t._v("可以直接以超时的方式直接返回，快速失败。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/14126519-55a0be64ecac4cda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp",alt:"img"}})]),t._v(" "),a("p",[t._v("线程池隔离的几点好处")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("使用超时返回的机制，避免同步调用服务时，调用时间过长，无法释放，导致资源耗尽的情况")]),t._v(" "),a("li",[t._v("服务方可以控制请求数量，请求过多，可以直接拒绝,达到快速失败的目的；")]),t._v(" "),a("li",[t._v("请求排队，线程池可以维护执行队列，将请求压到队列中处理")])])]),t._v(" "),a("p",[t._v("举个例子，如下代码段，模拟了同步调用服务的过程：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//服务提供方，执行服务的时候模拟2分钟的耗时")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Callable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" callableService  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentTimeMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentTimeMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//模拟服务执行时间过长的情况")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"OK"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//模拟10个客户端调用服务")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" clients "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//模拟给10个客户端提交处理请求")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            clients"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//同步调用")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" callableService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"当前客户端："')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"调用服务完成，得到结果："')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在此环节中，客户端 "),a("code",[t._v("clients")]),t._v("必须等待服务方返回结果之后，才能接收新的请求。如果用吞吐量来衡量系统的话，会发现系统的处理能力比较低。为了提高相应时间，可以借助线程池的方式，设置超时时间，这样的话，客户端就不需要必须等待服务方返回，如果时间过长，可以提前返回,改造后的代码如下所示：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//服务提供方，执行服务的时候模拟2分钟的耗时")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Callable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" callableService  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentTimeMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentTimeMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//模拟服务执行时间过长的情况")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"OK"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建线程池作为服务方")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" executorService "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//模拟10个客户端调用服务")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" clients "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            clients"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//同步调用")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将请求提交给线程池执行，Callable 和 Runnable在某种意义上，也是Command对象")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" future "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" executorService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callableService"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在指定的时间内获取结果，如果超时，调用方可以直接返回")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" future"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//客户端等待时间之后，快速返回")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"当前客户端："')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"调用服务完成，得到结果："')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeoutException")]),t._v(" timeoutException"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"服务调用超时，返回处理"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutionException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果我们将服务方的线程池设置为：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" executorService "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBlockingQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DiscardPolicy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提交请求过多时，可以丢弃请求，避免死等阻塞的情况。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("strong",[t._v("线程池隔离模式的弊端")])]),t._v(" "),a("blockquote",[a("p",[t._v("线程池隔离模式，会根据服务划分出独立的线程池，系统资源的线程并发数是有限的，当线程数过多，系统话费大量的 CPU 时间来做线程上下文切换的无用操作，反而降低系统性能；如果线程池隔离的过多，会导致真正用于接收用户请求的线程就相应地减少，系统吞吐量反而下降；\n"),a("strong",[t._v("在实践上，应当对像远程方法调用，网络资源请求这种服务时间不太可控的场景下使用线程池隔离模式处理")]),t._v("\n如下图所示，是线程池隔离模式的三种场景：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/14126519-8e16e7f8072475eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"信号量隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号量隔离"}},[t._v("#")]),t._v(" 信号量隔离")]),t._v(" "),a("p",[t._v("由于基于线程池隔离的模式占用系统线程池资源，Hystrix 还提供了另外一个隔离技术：基于信号量的隔离。")]),t._v(" "),a("p",[t._v("基于信号量的隔离方式非常地简单，其核心就是使用共用变量")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("semaphore\n")])])]),a("p",[t._v("进行原子操作，控制线程的并发量，当并发量达到一定量级时，服务禁止调用。如下图所示：信号量本身不会消耗多余的线程资源，所以就非常轻量。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/14126519-9af3442e03df941e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp",alt:"img"}})]),t._v(" "),a("p",[t._v("基于信号量隔离的利弊")]),t._v(" "),a("blockquote",[a("p",[t._v("利：基于信号量的隔离，利用 JVM 的原子性 CAS 操作，避免了资源锁的竞争，省去了线程池开销，效率非常高；\n弊：本质上基于信号量的隔离是同步行为，所以无法做到超时熔断，所以服务方自身要控制住执行时间，避免超时。\n应用场景："),a("strong",[t._v("业务服务上，有并发上限限制时，可以考虑此方式")]),t._v(" > "),a("code",[t._v("Alibaba Sentinel")]),t._v("开源框架，就是基于信号量的熔断和断路器框架。")])]),t._v(" "),a("h2",{attrs:{id:"hystrix-应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hystrix-应用"}},[t._v("#")]),t._v(" Hystrix 应用")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Hystrix 配置无法动态调节生效")]),t._v("。Hystrix 框架本身是使用的"),a("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FNetflix%2Farchaius",target:"_blank",rel:"noopener noreferrer"}},[t._v("Archaius"),a("OutboundLink")],1),t._v("框架完成的配置加载和刷新，但是集成自 Spring Cloud 下，无法有效地根据实时监控结果，动态调整熔断和系统参数")]),t._v(" "),a("li",[a("strong",[t._v("线程池和 Command 之间的配置比较复杂")]),t._v(",在 Spring Cloud 在做 feigin-hystrix 集成的时候，还有些 BUG，对 command 的默认配置没有处理好，导致所有 command 占用公共的 command 线程池，没有细粒度控制，还需要做框架适配调整")])]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[t._v("public interface SetterFactory {\n\n  /**\n   * Returns a hystrix setter appropriate for the given target and method\n   */\n  HystrixCommand.Setter create(Target"),a("span",{pre:!0,attrs:{class:"token php language-php"}},[a("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Method method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * Default behavior is to derive the group key from {@link Target#name()} and the command key from\n   * {@link Feign#configKey(Class, Method)}.\n   */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("Default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SetterFactory")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    @Override\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" HystrixCommand"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("Setter "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Target"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("?>")])]),t._v(" target, Method method) {\n      String groupKey = target.name();\n      String commandKey = Feign.configKey(target.type(), method);\n      return HystrixCommand.Setter\n          .withGroupKey(HystrixCommandGroupKey.Factory.asKey(groupKey))\n          .andCommandKey(HystrixCommandKey.Factory.asKey(commandKey));\n          //没有处理好default配置项的加载\n    }\n  }\n}\n")])])]),a("h2",{attrs:{id:"hystrix-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hystrix-配置"}},[t._v("#")]),t._v(" Hystrix 配置")]),t._v(" "),a("blockquote",[a("p",[t._v("详细配置可以参考 "),a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hystrix 官方配置手册"),a("OutboundLink")],1),t._v("，这里仅介绍比较核心的配置")])]),t._v(" "),a("h3",{attrs:{id:"执行配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行配置"}},[t._v("#")]),t._v(" 执行配置")]),t._v(" "),a("p",[t._v("以下配置用于控制 "),a("a",{attrs:{href:"http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#run()",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("HystrixCommand.run()")]),a("OutboundLink")],1),t._v(" 如何执行。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("配置项")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#execution.isolation.strategy",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("execution.isolation.strategy")]),a("OutboundLink")],1)]),t._v(" "),a("td",[t._v("线程隔离（THREAD）或信号量隔离（SEMAPHORE）")]),t._v(" "),a("td",[t._v("THREAD")])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#execution.isolation.thread.timeoutInMilliseconds",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("execution.isolation.thread.timeoutInMilliseconds")]),a("OutboundLink")],1)]),t._v(" "),a("td",[t._v("方法执行超时时间")]),t._v(" "),a("td",[t._v("1000(ms)")])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#execution.isolation.semaphore.maxConcurrentRequests",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("execution.isolation.semaphore.maxConcurrentRequests")]),a("OutboundLink")],1)]),t._v(" "),a("td",[t._v("信号量隔离最大并发数")]),t._v(" "),a("td",[t._v("10")])])])]),t._v(" "),a("h3",{attrs:{id:"断路配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#断路配置"}},[t._v("#")]),t._v(" 断路配置")]),t._v(" "),a("p",[t._v("以下配置用于控制 "),a("a",{attrs:{href:"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCircuitBreaker.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("HystrixCircuitBreaker")]),a("OutboundLink")],1),t._v(" 的断路处理。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("配置项")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.enabled",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("circuitBreaker.enabled")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("是否开启断路器")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.requestVolumeThreshold",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("circuitBreaker.requestVolumeThreshold")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("断路器启用请求数阈值")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("20")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.sleepWindowInMilliseconds",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("circuitBreaker.sleepWindowInMilliseconds")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("断路器启用后的休眠时间")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("5000(ms)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.errorThresholdPercentage",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("circuitBreaker.errorThresholdPercentage")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("断路器启用失败率阈值")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("50(%)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.forceOpen",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("circuitBreaker.forceOpen")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("是否强制将断路器设置成开启状态")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("false")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.forceClosed",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("circuitBreaker.forceClosed")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("是否强制将断路器设置成关闭状态")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("false")])])])]),t._v(" "),a("h3",{attrs:{id:"指标配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指标配置"}},[t._v("#")]),t._v(" 指标配置")]),t._v(" "),a("p",[t._v("以下配置用于从 HystrixCommand 和 HystrixObservableCommand 执行中捕获相关指标。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("配置项")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingStats.timeInMilliseconds",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("metrics.rollingStats.timeInMilliseconds")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("时间窗的长度")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("10000(ms)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingStats.numBuckets",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("metrics.rollingStats.numBuckets")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("桶的数量，需要保证"),a("code",[t._v("timeInMilliseconds % numBuckets =0")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("10")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingPercentile.enabled",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("metrics.rollingPercentile.enabled")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("是否统计运行延迟的占比")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingPercentile.timeInMilliseconds",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("metrics.rollingPercentile.timeInMilliseconds")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("运行延迟占比")]),t._v("统计的时间窗")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("60000(ms)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingPercentile.numBuckets",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("metrics.rollingPercentile.numBuckets")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("运行延迟占比")]),t._v("统计的桶数")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("6")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.rollingPercentile.bucketSize",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("metrics.rollingPercentile.bucketSize")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("百分比统计桶的容量，桶内最多保存的运行时间统计")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("100")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#metrics.healthSnapshot.intervalInMilliseconds",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("metrics.healthSnapshot.intervalInMilliseconds")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("统计快照刷新间隔")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("500 (ms)")])])])]),t._v(" "),a("h3",{attrs:{id:"线程池配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池配置"}},[t._v("#")]),t._v(" 线程池配置")]),t._v(" "),a("p",[t._v("以下配置用于控制 Hystrix Command 执行所使用的线程池。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("配置项")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#coreSize",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("coreSize")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("线程池核心线程数")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("10")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#maximumSize",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("maximumSize")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("线程池最大线程数")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("10")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#maxQueueSize",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("maxQueueSize")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("最大 LinkedBlockingQueue 的大小，-1 表示用 SynchronousQueue")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("-1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#queueSizeRejectionThreshold",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("queueSizeRejectionThreshold")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("队列大小阈值，超过则拒绝")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("5")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix/wiki/Configuration#allowMaximumSizeToDivergeFromCoreSize",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("allowMaximumSizeToDivergeFromCoreSize")]),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("此属性允许 maximumSize 的配置生效。该值可以等于或大于 coreSize。设置 coreSize <maximumSize 使得线程池可以维持 maximumSize 并发性，但是会在相对空闲时将线程回收。（取决于 keepAliveTimeInMinutes）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("false")])])])]),t._v(" "),a("h2",{attrs:{id:"其他限流技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他限流技术"}},[t._v("#")]),t._v(" 其他限流技术")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("resilience4j")]),t._v("\nHystrix 虽然官方宣布不再维护，其推荐另外一个框架："),a("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fresilience4j%2Fresilience4j",target:"_blank",rel:"noopener noreferrer"}},[t._v("resilience4j"),a("OutboundLink")],1),t._v(", 这个框架是是为 Java 8 和 函数式编程设计的一个轻量级的容错框架，该框架充分利用函数式编程的概念，为"),a("code",[t._v("函数式接口")]),t._v("、"),a("code",[t._v("lamda表达式")]),t._v("、"),a("code",[t._v("方法引用")]),t._v("高阶函数进行包装，(本质上是装饰者模式的概念)，通过包装实现"),a("code",[t._v("断路")]),t._v("、"),a("code",[t._v("限流")]),t._v("、"),a("code",[t._v("重试")]),t._v("、"),a("code",[t._v("舱壁")]),t._v("功能。\n这个框架整体而言比较轻量，没有控制台，不太好做系统级监控；")])]),t._v(" "),a("li",[a("p",[t._v("Alibaba Sentinel")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Sentinel\n")])])]),a("p",[t._v("是 阿里巴巴开源的轻量级的流量控制、熔断降级 Java 库，该库的核心是使用的是信号量隔离的方式做流量控制和熔断，其优点是其集成性和易用性，几乎能和当前主流的 Spring Cloud, dubbo ,grpc ,nacos, zookeeper 做集成，如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/14126519-70fd779fc1f3b9b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp",alt:"img"}})]),t._v(" "),a("p",[t._v("sentinel-features-overview-en.png")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Sentinel\n")])])]),a("p",[t._v("的目标生态圈：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/14126519-84833e6225a05df0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp",alt:"img"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sentinel\n")])])]),a("p",[t._v("一个强大的功能，就是它有一个流控管理控制台，你可以实时地监控每个服务的流控情况，并且可以实时编辑各种流控、熔断规则，有效地保证了服务保护的及时性。下图是内部试用的 sentinel 控制台：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/14126519-bb4aa4ba3a1de64c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp",alt:"img"}}),t._v("另外，")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sentinel\n")])])]),a("p",[t._v("还可以和")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ctrip apollo\n")])])]),a("p",[t._v("分布式配置系统进行集成，将流控规降级等各种规则先配置在 apollo 中，然后服务启动自动加载流控规则。")])])]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/Netflix/Hystrix",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hystrix Github"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/684b04b6c454",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Cloud Hystrix 设计原理"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5c009ff6f265da614b11b84d",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hystrix 都停更了，我为什么还要学？"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);