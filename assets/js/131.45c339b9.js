(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{494:function(t,a,s){"use strict";s.r(a);var e=s(14),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"数据库连接池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库连接池"}},[t._v("#")]),t._v(" 数据库连接池")]),t._v(" "),a("blockquote",[a("p",[t._v("数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。——摘自百度百科")])]),t._v(" "),a("h2",{attrs:{id:"什么是数据库连接池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是数据库连接池"}},[t._v("#")]),t._v(" 什么是数据库连接池")]),t._v(" "),a("p",[t._v("数据库连接是一种关键的有限的昂贵的资源，这一点在多用户的网页应用程序中体现得尤为突出。 一个数据库连接对象均对应一个物理数据库连接，每次操作都打开一个物理连接，使用完都关闭连接，这样造成系统的 性能低下。 数据库连接池的解决方案是在应用程序启动时建立足够的数据库连接，并讲这些连接组成一个连接池(简单说：在一个“池”里放了好多半成品的数据库联接对象)，由应用程序动态地对池中的连接进行申请、使用和释放。对于多于连接池中连接数的并发请求，应该在请求队列中排队等待。并且应用程序可以根据池中连接的使用率，动态增加或减少池中的连接数。 连接池技术尽可能多地重用了消耗内存地资源，大大节省了内存，提高了服务器地服务效率，能够支持更多的客户服务。通过使用连接池，将大大提高程序运行效率，同时，我们可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。")]),t._v(" "),a("h2",{attrs:{id:"为什么需要数据库连接池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要数据库连接池"}},[t._v("#")]),t._v(" 为什么需要数据库连接池")]),t._v(" "),a("h3",{attrs:{id:"不使用数据库连接池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不使用数据库连接池"}},[t._v("#")]),t._v(" 不使用数据库连接池")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20220921231353.png",alt:""}})]),t._v(" "),a("p",[t._v("不使用数据库连接池的"),a("strong",[t._v("步骤")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("TCP 建立连接的三次握手")]),t._v(" "),a("li",[t._v("MySQL 认证的三次握手")]),t._v(" "),a("li",[t._v("真正的 SQL 执行")]),t._v(" "),a("li",[t._v("MySQL 的关闭")]),t._v(" "),a("li",[t._v("TCP 的四次握手关闭")])]),t._v(" "),a("p",[t._v("不使用数据库连接池的特性：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("优点")]),t._v("：实现简单")]),t._v(" "),a("li",[a("strong",[t._v("缺点")]),t._v("：\n"),a("ul",[a("li",[t._v("网络 IO 较多")]),t._v(" "),a("li",[t._v("数据库的负载较高")]),t._v(" "),a("li",[t._v("响应时间较长及 QPS 较低")]),t._v(" "),a("li",[t._v("应用频繁的创建连接和关闭连接，导致临时对象较多，GC 频繁")]),t._v(" "),a("li",[t._v("在关闭连接后，会出现大量 TIME_WAIT 的 TCP 状态（在 2 个 MSL 之后关闭）")])])])]),t._v(" "),a("h3",{attrs:{id:"使用数据库连接池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用数据库连接池"}},[t._v("#")]),t._v(" 使用数据库连接池")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/master/snap/20220921231500.png",alt:""}})]),t._v(" "),a("p",[t._v("使用数据库连接池的步骤：只有第一次访问的时候，需要建立连接。 但是之后的访问，均会"),a("strong",[t._v("复用")]),t._v("之前创建的连接，直接执行 SQL 语句。")]),t._v(" "),a("p",[t._v("使用数据库连接池的"),a("strong",[t._v("优点")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("减少了网络开销")]),t._v(" "),a("li",[t._v("系统的性能会有一个实质的提升")]),t._v(" "),a("li",[t._v("没有了 TIME_WAIT 状态")])]),t._v(" "),a("h2",{attrs:{id:"数据库连接池如何工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库连接池如何工作"}},[t._v("#")]),t._v(" 数据库连接池如何工作")]),t._v(" "),a("p",[t._v("数据库连接池工作的核心在于以下几点：")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("创建连接池")]),t._v("：与线程池等池化对象类似，数据库连接池会在进程启动之初，根据配置初始化，并在池中创建了几个连接对象，以便使用时能从连接池中获取。连接池中的连接不能随意创建和关闭，以避免创建、关闭所带来的系统开销。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("使用、管理连接池中")]),t._v("：连接池管理策略是连接池机制的核心，连接池内连接的分配和释放对系统的性能有很大的影响。合理的策略可以保证数据库连接的有效复用，避免频繁的建立、释放连接所带来的系统资源开销。通常，数据库连接池的管理策略如下：")]),t._v(" "),a("ol",[a("li",[t._v("当请求数据库连接时，首先查看连接池中是否有空闲连接。")]),t._v(" "),a("li",[t._v("如果存在空闲连接，则将连接分配给客户使用。")]),t._v(" "),a("li",[t._v("如果没有空闲连接，则查看当前所开的连接数是否已经达到最大连接数。若未达到，就重新创建一个连接，并分配给请求的客户；如果达到，就按设定的最大等待时间进行等待，若超出最大等待时间，则抛出异常给客户。")]),t._v(" "),a("li",[t._v("当客户释放数据库连接时，先判断该连接的引用次数是否超过了规定值。如果超过，就从连接池中删除该连接；否则保留为其他客户服务。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("关闭连接池")]),t._v("：当应用程序退出时，关闭连接池中所有的连接，释放连接池相关的资源，该过程正好与创建相反。")])])]),t._v(" "),a("h2",{attrs:{id:"数据库连接池的核心参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库连接池的核心参数"}},[t._v("#")]),t._v(" 数据库连接池的核心参数")]),t._v(" "),a("p",[t._v("使用数据库连接池，需要为其配置一些参数，以控制其工作。")]),t._v(" "),a("p",[t._v("通常，数据库连接池都会包含以下核心参数：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("最小连接数")]),t._v("：是连接池一直保持的数据库连接,所以如果应用程序对数据库连接的使用量不大,将会有大量的数据库连接资源被浪费.")]),t._v(" "),a("li",[a("strong",[t._v("最大连接数")]),t._v("：是连接池能申请的最大连接数,如果数据库连接请求超过次数,后面的数据库连接请求将被加入到等待队列中,这会影响以后的数据库操作")]),t._v(" "),a("li",[t._v("最大空闲时间")]),t._v(" "),a("li",[t._v("获取连接超时时间")]),t._v(" "),a("li",[t._v("超时重试连接次数")])]),t._v(" "),a("h2",{attrs:{id:"数据库连接池的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库连接池的问题"}},[t._v("#")]),t._v(" 数据库连接池的问题")]),t._v(" "),a("p",[a("strong",[t._v("并发问题")]),t._v("：为了保证连接管理服务具有最大的通用性，必须考虑多线程环境，即并发问题。")]),t._v(" "),a("p",[a("strong",[t._v("事务处理")]),t._v("：我们知道，事务具有原子性，此时要求对数据库的操作符合“ALL-OR-NOTHING”原则,即对于一组 SQL 语句要么全做，要么全不做。我们知道当 2 个线程共用一个连接 Connection 对象，而且各自都有自己的事务要处理时候，对于连接池是一个很头疼的问题，因为即使 Connection 类提供了相应的事务支持，可是我们仍然不能确定那个数据库操作是对应那个事务的，这是由于我们有２个线程都在进行事务操作而引起的。为此我们可以使用每一个事务独占一个连接来实现，虽然这种方法有点浪费连接池资源但是可以大大降低事务管理的复杂性。")]),t._v(" "),a("p",[a("strong",[t._v("连接池的分配与释放")]),t._v("：连接池的分配与释放，对系统的性能有很大的影响。合理的分配与释放，可以提高连接的复用度，从而降低建立新连接的开销，同时还可以加快用户的访问速度。 对于连接的管理可使用一个 List。即把已经创建的连接都放入 List 中去统一管理。每当用户请求一个连接时，系统检查这个 List 中有没有可以分配的连接。如果有就把那个最合适的连接分配给他；如果没有就抛出一个异常给用户。")]),t._v(" "),a("p",[a("strong",[t._v("连接池的配置与维护")]),t._v("：连接池中到底应该放置多少连接，才能使系统的性能最佳？系统可采取设置最小连接数（minConnection）和最大连接数（maxConnection）等参数来控制连接池中的连接。比方说，最小连接数是系统启动时连接池所创建的连接数。如果创建过多，则系统启动就慢，但创建后系统的响应速度会很快；如果创建过少，则系统启动的很快，响应起来却慢。这样，可以在开发时，设置较小的最小连接数，开发起来会快，而在系统实际使用时设置较大的，因为这样对访问客户来说速度会快些。最大连接数是连接池中允许连接的最大数目，具体设置多少，要看系统的访问量，可通过软件需求上得到。 如何确保连接池中的最小连接数呢？有动态和静态两种策略。动态即每隔一定时间就对连接池进行检测，如果发现连接数量小于最小连接数，则补充相应数量的新连接,以保证连接池的正常运转。静态是发现空闲连接不够时再去检查。")]),t._v(" "),a("h2",{attrs:{id:"数据库连接池技术选型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库连接池技术选型"}},[t._v("#")]),t._v(" 数据库连接池技术选型")]),t._v(" "),a("p",[t._v("常见的数据库连接池：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/brettwooldridge/HikariCP",target:"_blank",rel:"noopener noreferrer"}},[t._v("HikariCP"),a("OutboundLink")],1),t._v("：HiKariCP 号称是跑的最快的连接池，并且是 SpringBoot 框架的默认连接池。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/apache/druid",target:"_blank",rel:"noopener noreferrer"}},[t._v("Druid"),a("OutboundLink")],1),t._v("：Druid 是阿里巴巴开源的数据库连接池。Druid 内置强大的监控功能，监控特性不影响性能。功能强大，能防 SQL 注入，内置 Loging 能诊断 Hack 应用行为。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://commons.apache.org/proper/commons-dbcp/",target:"_blank",rel:"noopener noreferrer"}},[t._v("DBCP"),a("OutboundLink")],1),t._v("： 由 Apache 开发的一个 Java 数据库连接池。"),a("code",[t._v("commons-dbcp2")]),t._v(" 基于 "),a("code",[t._v("commons-pool2")]),t._v(" 来实现底层的对象池机制。单线程，性能较差，适用于小型系统。官方自 2021 年后没有再更新。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/swaldman/c3p0",target:"_blank",rel:"noopener noreferrer"}},[t._v("C3P0"),a("OutboundLink")],1),t._v("：开源的 JDBC 连接池，实现了数据源和 JNDI 绑定，支持 JDBC3 规范和 JDBC2 的标准扩展。单线程，性能较差，适用于小型系统。官方自 2019 年后再没有更新。")]),t._v(" "),a("li",[t._v("Tomcat-jdbc：Tomcat 在 7.0 以前使用 DBCP 做为连接池组件，从 7.0 后新增了 Tomcat jdbc pool 模块，基于 Tomcat JULI，使用 Tomcat 日志框架，完全兼容 dbcp，通过异步方式获取连接，支持高并发应用环境，超级简单核心文件只有 8 个，支持 JMX，支持 XA Connection。")])]),t._v(" "),a("p",[t._v("来自 Druid 的竞品对比（https://github.com/alibaba/druid/wiki/Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D）：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("功能类别")]),t._v(" "),a("th",[t._v("功能")]),t._v(" "),a("th",[t._v("Druid")]),t._v(" "),a("th",[t._v("HikariCP")]),t._v(" "),a("th",[t._v("DBCP")]),t._v(" "),a("th",[t._v("Tomcat-jdbc")]),t._v(" "),a("th",[t._v("C3P0")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("性能")]),t._v(" "),a("td",[t._v("PSCache")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("是")])]),t._v(" "),a("tr",[a("td",[t._v("LRU")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("SLB 负载均衡支持")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("稳定性")]),t._v(" "),a("td",[t._v("ExceptionSorter")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")])]),t._v(" "),a("tr",[a("td",[t._v("扩展")]),t._v(" "),a("td",[t._v("扩展")]),t._v(" "),a("td",[t._v("Filter")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("JdbcIntercepter")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("监控")]),t._v(" "),a("td",[t._v("监控方式")]),t._v(" "),a("td",[t._v("jmx/log/http")]),t._v(" "),a("td",[t._v("jmx/metrics")]),t._v(" "),a("td",[t._v("jmx")]),t._v(" "),a("td",[t._v("jmx")]),t._v(" "),a("td",[t._v("jmx")])]),t._v(" "),a("tr",[a("td",[t._v("支持 SQL 级监控")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("Spring/Web 关联监控")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("诊断支持")]),t._v(" "),a("td",[t._v("LogFilter")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")])]),t._v(" "),a("tr",[a("td",[t._v("连接泄露诊断")]),t._v(" "),a("td",[t._v("logAbandoned")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("安全")]),t._v(" "),a("td",[t._v("SQL 防注入")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("无")])]),t._v(" "),a("tr",[a("td",[t._v("支持配置加密")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("从数据库连接池最重要的性能角度来看：HikariCP 应该性能最好；Druid 也不错，并且有更多、更久的生产实践，更为可靠；而其他常见的数据库连接池性能远远不如。")]),t._v(" "),a("p",[t._v("从功能角度来看：Druid 功能最全面，除基本的数据库连接池能力以外，还支持 sql 级监控、扩展、SQL 防注入以及监控等功能。")]),t._v(" "),a("p",[t._v("综合来看：HikariCP 是 Spring Boot 首选数据库连接池，对于 Spring Boot 项目来说，无疑适配性最好。而非 Spring Boot 项目，可以优先考虑 Druid，在国内有大规模应用，中文社区支持良好。")]),t._v(" "),a("h2",{attrs:{id:"hikaricp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hikaricp"}},[t._v("#")]),t._v(" HikariCP")]),t._v(" "),a("p",[t._v("HiKariCP 号称是跑的最快的连接池，并且是 SpringBoot 框架的默认连接池。")]),t._v(" "),a("p",[t._v("HiKariCP 为了提升性能，做了很多细节上的优化，例如：")]),t._v(" "),a("ul",[a("li",[t._v("使用 FastList 替代 ArrayList，通过初始化的默认值，减少了越界检查的操作")]),t._v(" "),a("li",[t._v("优化并精简了字节码，通过使用 Javassist，减少了动态代理的性能损耗，比如使用 invokestatic 指令代替 invokevirtual 指令")]),t._v(" "),a("li",[t._v("实现了无锁的 ConcurrentBag，减少了并发场景下的锁竞争")])]),t._v(" "),a("p",[t._v("HikariCP 关键配置：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("maximum-pool-size")]),t._v("：池中最大连接数（包括空闲和正在使用的连接）。默认值是 10，这个一般预估应用的最大连接数，后期根据监测得到一个最大值的一个平均值。要知道，最大连接并不是越多越好，一个 connection 会占用系统的带宽和存储。但是 当连接池没有空闲连接并且已经到达最大值，新来的连接池请求（HikariPool#getConnection）会被阻塞直到"),a("code",[t._v("connectionTimeout")]),t._v("（毫秒），超时后便抛出 SQLException。")]),t._v(" "),a("li",[a("code",[t._v("minimum-idle")]),t._v("：池中最小空闲连接数量。默认值 10，小于池中最大连接数，一般根据系统大部分情况下的数据库连接情况取一个平均值。Hikari 会尽可能、尽快地将空闲连接数维持在这个数量上。如果为了获得最佳性能和对峰值需求的响应能力，我们也不妨让他和最大连接数保持一致，使得 HikariCP 成为一个固定大小的数据库连接池。")]),t._v(" "),a("li",[a("code",[t._v("connection-timeout")]),t._v("：连接超时时间。默认值为 30s，可以接收的最小超时时间为 250ms。但是连接池请求也可以自定义超时时间（com.zaxxer.hikari.pool.HikariPool#getConnection(long)）。")]),t._v(" "),a("li",[a("code",[t._v("idle-timeout")]),t._v("：空闲连接存活最大时间，默认 600000（十分钟）")]),t._v(" "),a("li",[a("code",[t._v("max-lifetime")]),t._v("：连接池中连接的最大生命周期。当连接一致处于闲置状态时，超过 8 小时数据库会主动断开连接。为了防止大量的同一时间处于空闲连接因为数据库方的闲置超时策略断开连接（可以理解为连接雪崩），一般将这个值设置的比数据库的“闲置超时时间”小几秒，以便这些连接断开后，HikariCP 能迅速的创建新一轮的连接。")]),t._v(" "),a("li",[a("code",[t._v("pool-name")]),t._v("：连接池的名字。一般会出现在日志和 JMX 控制台中。默认值：auto-genenrated。建议取一个合适的名字，便于监控。")]),t._v(" "),a("li",[a("code",[t._v("auto-commit")]),t._v("：是否自动提交池中返回的连接。默认值为 true。一般是有必要自动提交上一个连接中的事物的。如果为 false，那么就需要应用层手动提交事物。")])]),t._v(" "),a("p",[t._v("参考配置：")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连接池名称")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.hikari.pool-name")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("SpringTutorialHikariPool")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最大连接数，小于等于 0 会被重置为默认值 10；大于零小于 1 会被重置为 minimum-idle 的值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.hikari.maximum-pool-size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最小空闲连接，默认值10，小于 0 或大于 maximum-pool-size，都会重置为 maximum-pool-size")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.hikari.minimum-idle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连接超时时间（单位：毫秒），小于 250 毫秒，会被重置为默认值 30 秒")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.hikari.connection-timeout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("60000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 空闲连接超时时间，默认值 600000（10分钟），大于等于 max-lifetime 且 max-lifetime>0，会被重置为0；不等于 0 且小于 10 秒，会被重置为 10 秒")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只有空闲连接数大于最大连接数且空闲时间超过该值，才会被释放")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.hikari.idle-timeout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("600000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连接最大存活时间，不等于 0 且小于 30 秒，会被重置为默认值 30 分钟。该值应该比数据库所设置的超时时间短")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.hikari.max-lifetime")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("1800000")]),t._v("\n")])])]),a("h2",{attrs:{id:"druid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#druid"}},[t._v("#")]),t._v(" Druid")]),t._v(" "),a("p",[t._v("Druid 是阿里巴巴开源的数据库连接池。Druid 连接池为监控而生，内置强大的监控功能，监控特性不影响性能。功能强大，能防 SQL 注入，内置 Loging 能诊断 Hack 应用行为。")]),t._v(" "),a("p",[t._v("Druid 关键配置：")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 数据库访问配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 主数据源，默认的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("com.alibaba.druid.pool.DruidDataSource")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.driver-class-name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("com.mysql.jdbc.Driver")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("jdbc:mysql://localhost:3306/druid")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.username")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("root")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.password")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("root")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 下面为连接池的补充设置，应用到上面所有数据源中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化大小，最小，最大")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.initialSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.minIdle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.maxActive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("20")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置获取连接等待超时的时间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.maxWait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("60000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.timeBetweenEvictionRunsMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("60000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置一个连接在池中最小生存的时间，单位是毫秒")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.minEvictableIdleTimeMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("300000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.validationQuery")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("SELECT 1 FROM DUAL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.testWhileIdle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.testOnBorrow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.testOnReturn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打开PSCache，并且指定每个连接上PSCache的大小")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.poolPreparedStatements")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.maxPoolPreparedStatementPerConnectionSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("20")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.filters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("stat,wall,log4j")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过connectProperties属性来打开mergeSql功能；慢SQL记录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.datasource.connectionProperties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并多个DruidDataSource的监控数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#spring.datasource.useGlobalDataSourceStat=true")]),t._v("\n")])])]),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://blog.csdn.net/crankz/article/details/82874158",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库连接池学习笔记（一）：原理介绍+常用连接池介绍"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&mid=2651814835&idx=1&sn=cb775d3926ce39d12fa420a292c1f83d&scene=0#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("高性能数据库连接池的内幕"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/brettwooldridge/HikariCP",target:"_blank",rel:"noopener noreferrer"}},[t._v("HikariCP"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/apache/druid",target:"_blank",rel:"noopener noreferrer"}},[t._v("druid"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);